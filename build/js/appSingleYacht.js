"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
/*!
 * lightgallery | 2.4.0-beta.0 | December 12th 2021
 * http://www.lightgalleryjs.com/
 * Copyright (c) 2020 Sachin Neravath;
 * @license GPLv3
 */

(function (global, factory) {
  (typeof exports === "undefined" ? "undefined" : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.lightGallery = factory());
})(void 0, function () {
  'use strict';

  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
    Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */
  var _assign = function __assign() {
    _assign = Object.assign || function __assign(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
      return t;
    };
    return _assign.apply(this, arguments);
  };
  function __spreadArrays() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];
    return r;
  }

  /**
   * List of lightGallery events
   * All events should be documented here
   * Below interfaces are used to build the website documentations
   * */
  var lGEvents = {
    afterAppendSlide: 'lgAfterAppendSlide',
    init: 'lgInit',
    hasVideo: 'lgHasVideo',
    containerResize: 'lgContainerResize',
    updateSlides: 'lgUpdateSlides',
    afterAppendSubHtml: 'lgAfterAppendSubHtml',
    beforeOpen: 'lgBeforeOpen',
    afterOpen: 'lgAfterOpen',
    slideItemLoad: 'lgSlideItemLoad',
    beforeSlide: 'lgBeforeSlide',
    afterSlide: 'lgAfterSlide',
    posterClick: 'lgPosterClick',
    dragStart: 'lgDragStart',
    dragMove: 'lgDragMove',
    dragEnd: 'lgDragEnd',
    beforeNextSlide: 'lgBeforeNextSlide',
    beforePrevSlide: 'lgBeforePrevSlide',
    beforeClose: 'lgBeforeClose',
    afterClose: 'lgAfterClose',
    rotateLeft: 'lgRotateLeft',
    rotateRight: 'lgRotateRight',
    flipHorizontal: 'lgFlipHorizontal',
    flipVertical: 'lgFlipVertical',
    autoplay: 'lgAutoplay',
    autoplayStart: 'lgAutoplayStart',
    autoplayStop: 'lgAutoplayStop'
  };
  var lightGalleryCoreSettings = {
    mode: 'lg-slide',
    easing: 'ease',
    speed: 400,
    licenseKey: '0000-0000-000-0000',
    height: '100%',
    width: '100%',
    addClass: '',
    startClass: 'lg-start-zoom',
    backdropDuration: 300,
    container: '',
    startAnimationDuration: 400,
    zoomFromOrigin: true,
    hideBarsDelay: 0,
    showBarsAfter: 10000,
    slideDelay: 0,
    supportLegacyBrowser: true,
    allowMediaOverlap: false,
    videoMaxSize: '1280-720',
    loadYouTubePoster: true,
    defaultCaptionHeight: 0,
    ariaLabelledby: '',
    ariaDescribedby: '',
    closable: true,
    swipeToClose: true,
    closeOnTap: true,
    showCloseIcon: true,
    showMaximizeIcon: false,
    loop: true,
    escKey: true,
    keyPress: true,
    controls: true,
    slideEndAnimation: true,
    hideControlOnEnd: false,
    mousewheel: false,
    getCaptionFromTitleOrAlt: true,
    appendSubHtmlTo: '.lg-sub-html',
    subHtmlSelectorRelative: false,
    preload: 2,
    numberOfSlideItemsInDom: 10,
    selector: '',
    selectWithin: '',
    nextHtml: '',
    prevHtml: '',
    index: 0,
    iframeWidth: '100%',
    iframeHeight: '100%',
    iframeMaxWidth: '100%',
    iframeMaxHeight: '100%',
    download: true,
    counter: true,
    appendCounterTo: '.lg-toolbar',
    swipeThreshold: 50,
    enableSwipe: true,
    enableDrag: true,
    dynamic: false,
    dynamicEl: [],
    extraProps: [],
    exThumbImage: '',
    isMobile: undefined,
    mobileSettings: {
      controls: false,
      showCloseIcon: false,
      download: false
    },
    plugins: [],
    strings: {
      closeGallery: 'Close gallery',
      toggleMaximize: 'Toggle maximize',
      previousSlide: 'Previous slide',
      nextSlide: 'Next slide',
      download: 'Download',
      playVideo: 'Play video'
    }
  };
  function initLgPolyfills() {
    (function () {
      if (typeof window.CustomEvent === 'function') return false;
      function CustomEvent(event, params) {
        params = params || {
          bubbles: false,
          cancelable: false,
          detail: null
        };
        var evt = document.createEvent('CustomEvent');
        evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);
        return evt;
      }
      window.CustomEvent = CustomEvent;
    })();
    (function () {
      if (!Element.prototype.matches) {
        Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;
      }
    })();
  }
  var lgQuery = /** @class */function () {
    function lgQuery(selector) {
      this.cssVenderPrefixes = ['TransitionDuration', 'TransitionTimingFunction', 'Transform', 'Transition'];
      this.selector = this._getSelector(selector);
      this.firstElement = this._getFirstEl();
      return this;
    }
    lgQuery.generateUUID = function () {
      return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
        var r = Math.random() * 16 | 0,
          v = c == 'x' ? r : r & 0x3 | 0x8;
        return v.toString(16);
      });
    };
    lgQuery.prototype._getSelector = function (selector, context) {
      if (context === void 0) {
        context = document;
      }
      if (typeof selector !== 'string') {
        return selector;
      }
      context = context || document;
      var fl = selector.substring(0, 1);
      if (fl === '#') {
        return context.querySelector(selector);
      } else {
        return context.querySelectorAll(selector);
      }
    };
    lgQuery.prototype._each = function (func) {
      if (!this.selector) {
        return this;
      }
      if (this.selector.length !== undefined) {
        [].forEach.call(this.selector, func);
      } else {
        func(this.selector, 0);
      }
      return this;
    };
    lgQuery.prototype._setCssVendorPrefix = function (el, cssProperty, value) {
      // prettier-ignore
      var property = cssProperty.replace(/-([a-z])/gi, function (s, group1) {
        return group1.toUpperCase();
      });
      if (this.cssVenderPrefixes.indexOf(property) !== -1) {
        el.style[property.charAt(0).toLowerCase() + property.slice(1)] = value;
        el.style['webkit' + property] = value;
        el.style['moz' + property] = value;
        el.style['ms' + property] = value;
        el.style['o' + property] = value;
      } else {
        el.style[property] = value;
      }
    };
    lgQuery.prototype._getFirstEl = function () {
      if (this.selector && this.selector.length !== undefined) {
        return this.selector[0];
      } else {
        return this.selector;
      }
    };
    lgQuery.prototype.isEventMatched = function (event, eventName) {
      var eventNamespace = eventName.split('.');
      return event.split('.').filter(function (e) {
        return e;
      }).every(function (e) {
        return eventNamespace.indexOf(e) !== -1;
      });
    };
    lgQuery.prototype.attr = function (attr, value) {
      if (value === undefined) {
        if (!this.firstElement) {
          return '';
        }
        return this.firstElement.getAttribute(attr);
      }
      this._each(function (el) {
        el.setAttribute(attr, value);
      });
      return this;
    };
    lgQuery.prototype.find = function (selector) {
      return $LG(this._getSelector(selector, this.selector));
    };
    lgQuery.prototype.first = function () {
      if (this.selector && this.selector.length !== undefined) {
        return $LG(this.selector[0]);
      } else {
        return $LG(this.selector);
      }
    };
    lgQuery.prototype.eq = function (index) {
      return $LG(this.selector[index]);
    };
    lgQuery.prototype.parent = function () {
      return $LG(this.selector.parentElement);
    };
    lgQuery.prototype.get = function () {
      return this._getFirstEl();
    };
    lgQuery.prototype.removeAttr = function (attributes) {
      var attrs = attributes.split(' ');
      this._each(function (el) {
        attrs.forEach(function (attr) {
          return el.removeAttribute(attr);
        });
      });
      return this;
    };
    lgQuery.prototype.wrap = function (className) {
      if (!this.firstElement) {
        return this;
      }
      var wrapper = document.createElement('div');
      wrapper.className = className;
      this.firstElement.parentNode.insertBefore(wrapper, this.firstElement);
      this.firstElement.parentNode.removeChild(this.firstElement);
      wrapper.appendChild(this.firstElement);
      return this;
    };
    lgQuery.prototype.addClass = function (classNames) {
      if (classNames === void 0) {
        classNames = '';
      }
      this._each(function (el) {
        // IE doesn't support multiple arguments
        classNames.split(' ').forEach(function (className) {
          if (className) {
            el.classList.add(className);
          }
        });
      });
      return this;
    };
    lgQuery.prototype.removeClass = function (classNames) {
      this._each(function (el) {
        // IE doesn't support multiple arguments
        classNames.split(' ').forEach(function (className) {
          if (className) {
            el.classList.remove(className);
          }
        });
      });
      return this;
    };
    lgQuery.prototype.hasClass = function (className) {
      if (!this.firstElement) {
        return false;
      }
      return this.firstElement.classList.contains(className);
    };
    lgQuery.prototype.hasAttribute = function (attribute) {
      if (!this.firstElement) {
        return false;
      }
      return this.firstElement.hasAttribute(attribute);
    };
    lgQuery.prototype.toggleClass = function (className) {
      if (!this.firstElement) {
        return this;
      }
      if (this.hasClass(className)) {
        this.removeClass(className);
      } else {
        this.addClass(className);
      }
      return this;
    };
    lgQuery.prototype.css = function (property, value) {
      var _this = this;
      this._each(function (el) {
        _this._setCssVendorPrefix(el, property, value);
      });
      return this;
    };
    // Need to pass separate namespaces for separate elements
    lgQuery.prototype.on = function (events, listener) {
      var _this = this;
      if (!this.selector) {
        return this;
      }
      events.split(' ').forEach(function (event) {
        if (!Array.isArray(lgQuery.eventListeners[event])) {
          lgQuery.eventListeners[event] = [];
        }
        lgQuery.eventListeners[event].push(listener);
        _this.selector.addEventListener(event.split('.')[0], listener);
      });
      return this;
    };
    // @todo - test this
    lgQuery.prototype.once = function (event, listener) {
      var _this = this;
      this.on(event, function () {
        _this.off(event);
        listener(event);
      });
      return this;
    };
    lgQuery.prototype.off = function (event) {
      var _this = this;
      if (!this.selector) {
        return this;
      }
      Object.keys(lgQuery.eventListeners).forEach(function (eventName) {
        if (_this.isEventMatched(event, eventName)) {
          lgQuery.eventListeners[eventName].forEach(function (listener) {
            _this.selector.removeEventListener(eventName.split('.')[0], listener);
          });
          lgQuery.eventListeners[eventName] = [];
        }
      });
      return this;
    };
    lgQuery.prototype.trigger = function (event, detail) {
      if (!this.firstElement) {
        return this;
      }
      var customEvent = new CustomEvent(event.split('.')[0], {
        detail: detail || null
      });
      this.firstElement.dispatchEvent(customEvent);
      return this;
    };
    // Does not support IE
    lgQuery.prototype.load = function (url) {
      var _this = this;
      fetch(url).then(function (res) {
        _this.selector.innerHTML = res;
      });
      return this;
    };
    lgQuery.prototype.html = function (html) {
      if (html === undefined) {
        if (!this.firstElement) {
          return '';
        }
        return this.firstElement.innerHTML;
      }
      this._each(function (el) {
        el.innerHTML = html;
      });
      return this;
    };
    lgQuery.prototype.append = function (html) {
      this._each(function (el) {
        if (typeof html === 'string') {
          el.insertAdjacentHTML('beforeend', html);
        } else {
          el.appendChild(html);
        }
      });
      return this;
    };
    lgQuery.prototype.prepend = function (html) {
      this._each(function (el) {
        el.insertAdjacentHTML('afterbegin', html);
      });
      return this;
    };
    lgQuery.prototype.remove = function () {
      this._each(function (el) {
        el.parentNode.removeChild(el);
      });
      return this;
    };
    lgQuery.prototype.empty = function () {
      this._each(function (el) {
        el.innerHTML = '';
      });
      return this;
    };
    lgQuery.prototype.scrollTop = function (scrollTop) {
      if (scrollTop !== undefined) {
        document.body.scrollTop = scrollTop;
        document.documentElement.scrollTop = scrollTop;
        return this;
      } else {
        return window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;
      }
    };
    lgQuery.prototype.scrollLeft = function (scrollLeft) {
      if (scrollLeft !== undefined) {
        document.body.scrollLeft = scrollLeft;
        document.documentElement.scrollLeft = scrollLeft;
        return this;
      } else {
        return window.pageXOffset || document.documentElement.scrollLeft || document.body.scrollLeft || 0;
      }
    };
    lgQuery.prototype.offset = function () {
      if (!this.firstElement) {
        return {
          left: 0,
          top: 0
        };
      }
      var rect = this.firstElement.getBoundingClientRect();
      var bodyMarginLeft = $LG('body').style().marginLeft;
      // Minus body margin - https://stackoverflow.com/questions/30711548/is-getboundingclientrect-left-returning-a-wrong-value
      return {
        left: rect.left - parseFloat(bodyMarginLeft) + this.scrollLeft(),
        top: rect.top + this.scrollTop()
      };
    };
    lgQuery.prototype.style = function () {
      if (!this.firstElement) {
        return {};
      }
      return this.firstElement.currentStyle || window.getComputedStyle(this.firstElement);
    };
    // Width without padding and border even if box-sizing is used.
    lgQuery.prototype.width = function () {
      var style = this.style();
      return this.firstElement.clientWidth - parseFloat(style.paddingLeft) - parseFloat(style.paddingRight);
    };
    // Height without padding and border even if box-sizing is used.
    lgQuery.prototype.height = function () {
      var style = this.style();
      return this.firstElement.clientHeight - parseFloat(style.paddingTop) - parseFloat(style.paddingBottom);
    };
    lgQuery.eventListeners = {};
    return lgQuery;
  }();
  function $LG(selector) {
    initLgPolyfills();
    return new lgQuery(selector);
  }
  var defaultDynamicOptions = ['src', 'sources', 'subHtml', 'subHtmlUrl', 'html', 'video', 'poster', 'slideName', 'responsive', 'srcset', 'sizes', 'iframe', 'downloadUrl', 'download', 'width', 'facebookShareUrl', 'tweetText', 'iframeTitle', 'twitterShareUrl', 'pinterestShareUrl', 'pinterestText', 'fbHtml', 'disqusIdentifier', 'disqusUrl'];
  // Convert html data-attribute to camalcase
  function convertToData(attr) {
    // FInd a way for lgsize
    if (attr === 'href') {
      return 'src';
    }
    attr = attr.replace('data-', '');
    attr = attr.charAt(0).toLowerCase() + attr.slice(1);
    attr = attr.replace(/-([a-z])/g, function (g) {
      return g[1].toUpperCase();
    });
    return attr;
  }
  var utils = {
    /**
     * get possible width and height from the lgSize attribute. Used for ZoomFromOrigin option
     */
    getSize: function getSize(el, container, spacing, defaultLgSize) {
      if (spacing === void 0) {
        spacing = 0;
      }
      var LGel = $LG(el);
      var lgSize = LGel.attr('data-lg-size') || defaultLgSize;
      if (!lgSize) {
        return;
      }
      var isResponsiveSizes = lgSize.split(',');
      // if at-least two viewport sizes are available
      if (isResponsiveSizes[1]) {
        var wWidth = window.innerWidth;
        for (var i = 0; i < isResponsiveSizes.length; i++) {
          var size_1 = isResponsiveSizes[i];
          var responsiveWidth = parseInt(size_1.split('-')[2], 10);
          if (responsiveWidth > wWidth) {
            lgSize = size_1;
            break;
          }
          // take last item as last option
          if (i === isResponsiveSizes.length - 1) {
            lgSize = size_1;
          }
        }
      }
      var size = lgSize.split('-');
      var width = parseInt(size[0], 10);
      var height = parseInt(size[1], 10);
      var cWidth = container.width();
      var cHeight = container.height() - spacing;
      var maxWidth = Math.min(cWidth, width);
      var maxHeight = Math.min(cHeight, height);
      var ratio = Math.min(maxWidth / width, maxHeight / height);
      return {
        width: width * ratio,
        height: height * ratio
      };
    },
    /**
     * @desc Get transform value based on the imageSize. Used for ZoomFromOrigin option
     * @param {jQuery Element}
     * @returns {String} Transform CSS string
     */
    getTransform: function getTransform(el, container, top, bottom, imageSize) {
      if (!imageSize) {
        return;
      }
      var LGel = $LG(el).find('img').first();
      if (!LGel.get()) {
        return;
      }
      var containerRect = container.get().getBoundingClientRect();
      var wWidth = containerRect.width;
      // using innerWidth to include mobile safari bottom bar
      var wHeight = container.height() - (top + bottom);
      var elWidth = LGel.width();
      var elHeight = LGel.height();
      var elStyle = LGel.style();
      var x = (wWidth - elWidth) / 2 - LGel.offset().left + (parseFloat(elStyle.paddingLeft) || 0) + (parseFloat(elStyle.borderLeft) || 0) + $LG(window).scrollLeft() + containerRect.left;
      var y = (wHeight - elHeight) / 2 - LGel.offset().top + (parseFloat(elStyle.paddingTop) || 0) + (parseFloat(elStyle.borderTop) || 0) + $LG(window).scrollTop() + top;
      var scX = elWidth / imageSize.width;
      var scY = elHeight / imageSize.height;
      var transform = 'translate3d(' + (x *= -1) + 'px, ' + (y *= -1) + 'px, 0) scale3d(' + scX + ', ' + scY + ', 1)';
      return transform;
    },
    getIframeMarkup: function getIframeMarkup(iframeWidth, iframeHeight, iframeMaxWidth, iframeMaxHeight, src, iframeTitle) {
      var title = iframeTitle ? 'title="' + iframeTitle + '"' : '';
      return "<div class=\"lg-video-cont lg-has-iframe\" style=\"width:" + iframeWidth + "; max-width:" + iframeMaxWidth + "; height: " + iframeHeight + "; max-height:" + iframeMaxHeight + "\">\n                    <iframe class=\"lg-object\" frameborder=\"0\" " + title + " src=\"" + src + "\"  allowfullscreen=\"true\"></iframe>\n                </div>";
    },
    getImgMarkup: function getImgMarkup(index, src, altAttr, srcset, sizes, sources) {
      var srcsetAttr = srcset ? "srcset=\"" + srcset + "\"" : '';
      var sizesAttr = sizes ? "sizes=\"" + sizes + "\"" : '';
      var imgMarkup = "<img " + altAttr + " " + srcsetAttr + "  " + sizesAttr + " class=\"lg-object lg-image\" data-index=\"" + index + "\" src=\"" + src + "\" />";
      var sourceTag = '';
      if (sources) {
        var sourceObj = typeof sources === 'string' ? JSON.parse(sources) : sources;
        sourceTag = sourceObj.map(function (source) {
          var attrs = '';
          Object.keys(source).forEach(function (key) {
            // Do not remove the first space as it is required to separate the attributes
            attrs += " " + key + "=\"" + source[key] + "\"";
          });
          return "<source " + attrs + "></source>";
        });
      }
      return "" + sourceTag + imgMarkup;
    },
    // Get src from responsive src
    getResponsiveSrc: function getResponsiveSrc(srcItms) {
      var rsWidth = [];
      var rsSrc = [];
      var src = '';
      for (var i = 0; i < srcItms.length; i++) {
        var _src = srcItms[i].split(' ');
        // Manage empty space
        if (_src[0] === '') {
          _src.splice(0, 1);
        }
        rsSrc.push(_src[0]);
        rsWidth.push(_src[1]);
      }
      var wWidth = window.innerWidth;
      for (var j = 0; j < rsWidth.length; j++) {
        if (parseInt(rsWidth[j], 10) > wWidth) {
          src = rsSrc[j];
          break;
        }
      }
      return src;
    },
    isImageLoaded: function isImageLoaded(img) {
      if (!img) return false;
      // During the onload event, IE correctly identifies any images that
      // weren’t downloaded as not complete. Others should too. Gecko-based
      // browsers act like NS4 in that they report this incorrectly.
      if (!img.complete) {
        return false;
      }
      // However, they do have two very useful properties: naturalWidth and
      // naturalHeight. These give the true size of the image. If it failed
      // to load, either of these should be zero.
      if (img.naturalWidth === 0) {
        return false;
      }
      // No other way of checking: assume it’s ok.
      return true;
    },
    getVideoPosterMarkup: function getVideoPosterMarkup(_poster, dummyImg, videoContStyle, playVideoString, _isVideo) {
      var videoClass = '';
      if (_isVideo && _isVideo.youtube) {
        videoClass = 'lg-has-youtube';
      } else if (_isVideo && _isVideo.vimeo) {
        videoClass = 'lg-has-vimeo';
      } else {
        videoClass = 'lg-has-html5';
      }
      return "<div class=\"lg-video-cont " + videoClass + "\" style=\"" + videoContStyle + "\">\n                <div class=\"lg-video-play-button\">\n                <svg\n                    viewBox=\"0 0 20 20\"\n                    preserveAspectRatio=\"xMidYMid\"\n                    focusable=\"false\"\n                    aria-labelledby=\"" + playVideoString + "\"\n                    role=\"img\"\n                    class=\"lg-video-play-icon\"\n                >\n                    <title>" + playVideoString + "</title>\n                    <polygon class=\"lg-video-play-icon-inner\" points=\"1,0 20,10 1,20\"></polygon>\n                </svg>\n                <svg class=\"lg-video-play-icon-bg\" viewBox=\"0 0 50 50\" focusable=\"false\">\n                    <circle cx=\"50%\" cy=\"50%\" r=\"20\"></circle></svg>\n                <svg class=\"lg-video-play-icon-circle\" viewBox=\"0 0 50 50\" focusable=\"false\">\n                    <circle cx=\"50%\" cy=\"50%\" r=\"20\"></circle>\n                </svg>\n            </div>\n            " + (dummyImg || '') + "\n            <img class=\"lg-object lg-video-poster\" src=\"" + _poster + "\" />\n        </div>";
    },
    /**
     * @desc Create dynamic elements array from gallery items when dynamic option is false
     * It helps to avoid frequent DOM interaction
     * and avoid multiple checks for dynamic elments
     *
     * @returns {Array} dynamicEl
     */
    getDynamicOptions: function getDynamicOptions(items, extraProps, getCaptionFromTitleOrAlt, exThumbImage) {
      var dynamicElements = [];
      var availableDynamicOptions = __spreadArrays(defaultDynamicOptions, extraProps);
      [].forEach.call(items, function (item) {
        var dynamicEl = {};
        for (var i = 0; i < item.attributes.length; i++) {
          var attr = item.attributes[i];
          if (attr.specified) {
            var dynamicAttr = convertToData(attr.name);
            var label = '';
            if (availableDynamicOptions.indexOf(dynamicAttr) > -1) {
              label = dynamicAttr;
            }
            if (label) {
              dynamicEl[label] = attr.value;
            }
          }
        }
        var currentItem = $LG(item);
        var alt = currentItem.find('img').first().attr('alt');
        var title = currentItem.attr('title');
        var thumb = exThumbImage ? currentItem.attr(exThumbImage) : currentItem.find('img').first().attr('src');
        dynamicEl.thumb = thumb;
        if (getCaptionFromTitleOrAlt && !dynamicEl.subHtml) {
          dynamicEl.subHtml = title || alt || '';
        }
        dynamicEl.alt = alt || title || '';
        dynamicElements.push(dynamicEl);
      });
      return dynamicElements;
    },
    isMobile: function isMobile() {
      return /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);
    },
    /**
     * @desc Check the given src is video
     * @param {String} src
     * @return {Object} video type
     * Ex:{ youtube  :  ["//www.youtube.com/watch?v=c0asJgSyxcY", "c0asJgSyxcY"] }
     *
     * @todo - this information can be moved to dynamicEl to avoid frequent calls
     */
    isVideo: function isVideo(src, isHTML5VIdeo, index) {
      if (!src) {
        if (isHTML5VIdeo) {
          return {
            html5: true
          };
        } else {
          console.error('lightGallery :- data-src is not provided on slide item ' + (index + 1) + '. Please make sure the selector property is properly configured. More info - https://www.lightgalleryjs.com/demos/html-markup/');
          return;
        }
      }
      var youtube = src.match(/\/\/(?:www\.)?youtu(?:\.be|be\.com|be-nocookie\.com)\/(?:watch\?v=|embed\/)?([a-z0-9\-\_\%]+)([\&|?][\S]*)*/i);
      var vimeo = src.match(/\/\/(?:www\.)?(?:player\.)?vimeo.com\/(?:video\/)?([0-9a-z\-_]+)(.*)?/i);
      var wistia = src.match(/https?:\/\/(.+)?(wistia\.com|wi\.st)\/(medias|embed)\/([0-9a-z\-_]+)(.*)/);
      if (youtube) {
        return {
          youtube: youtube
        };
      } else if (vimeo) {
        return {
          vimeo: vimeo
        };
      } else if (wistia) {
        return {
          wistia: wistia
        };
      }
    }
  };

  // @ref - https://stackoverflow.com/questions/3971841/how-to-resize-images-proportionally-keeping-the-aspect-ratio
  // @ref - https://2ality.com/2017/04/setting-up-multi-platform-packages.html
  // Unique id for each gallery
  var lgId = 0;
  var LightGallery = /** @class */function () {
    function LightGallery(element, options) {
      this.lgOpened = false;
      this.index = 0;
      // lightGallery modules
      this.plugins = [];
      // false when lightGallery load first slide content;
      this.lGalleryOn = false;
      // True when a slide animation is in progress
      this.lgBusy = false;
      this.currentItemsInDom = [];
      // Scroll top value before lightGallery is opened
      this.prevScrollTop = 0;
      this.isDummyImageRemoved = false;
      this.dragOrSwipeEnabled = false;
      this.mediaContainerPosition = {
        top: 0,
        bottom: 0
      };
      if (!element) {
        return this;
      }
      lgId++;
      this.lgId = lgId;
      this.el = element;
      this.LGel = $LG(element);
      this.generateSettings(options);
      this.buildModules();
      // When using dynamic mode, ensure dynamicEl is an array
      if (this.settings.dynamic && this.settings.dynamicEl !== undefined && !Array.isArray(this.settings.dynamicEl)) {
        throw 'When using dynamic mode, you must also define dynamicEl as an Array.';
      }
      this.galleryItems = this.getItems();
      this.normalizeSettings();
      // Gallery items
      this.init();
      this.validateLicense();
      return this;
    }
    LightGallery.prototype.generateSettings = function (options) {
      // lightGallery settings
      this.settings = _assign(_assign({}, lightGalleryCoreSettings), options);
      if (this.settings.isMobile && typeof this.settings.isMobile === 'function' ? this.settings.isMobile() : utils.isMobile()) {
        var mobileSettings = _assign(_assign({}, this.settings.mobileSettings), this.settings.mobileSettings);
        this.settings = _assign(_assign({}, this.settings), mobileSettings);
      }
    };
    LightGallery.prototype.normalizeSettings = function () {
      if (this.settings.slideEndAnimation) {
        this.settings.hideControlOnEnd = false;
      }
      if (!this.settings.closable) {
        this.settings.swipeToClose = false;
      }
      // And reset it on close to get the correct value next time
      this.zoomFromOrigin = this.settings.zoomFromOrigin;
      // At the moment, Zoom from image doesn't support dynamic options
      // @todo add zoomFromOrigin support for dynamic images
      if (this.settings.dynamic) {
        this.zoomFromOrigin = false;
      }
      if (!this.settings.container) {
        this.settings.container = document.body;
      }
      // settings.preload should not be grater than $item.length
      this.settings.preload = Math.min(this.settings.preload, this.galleryItems.length);
    };
    LightGallery.prototype.init = function () {
      var _this = this;
      this.addSlideVideoInfo(this.galleryItems);
      this.buildStructure();
      this.LGel.trigger(lGEvents.init, {
        instance: this
      });
      if (this.settings.keyPress) {
        this.keyPress();
      }
      setTimeout(function () {
        _this.enableDrag();
        _this.enableSwipe();
        _this.triggerPosterClick();
      }, 50);
      this.arrow();
      if (this.settings.mousewheel) {
        this.mousewheel();
      }
      if (!this.settings.dynamic) {
        this.openGalleryOnItemClick();
      }
    };
    LightGallery.prototype.openGalleryOnItemClick = function () {
      var _this = this;
      var _loop_1 = function _loop_1(index) {
        var element = this_1.items[index];
        var $element = $LG(element);
        // Using different namespace for click because click event should not unbind if selector is same object('this')
        // @todo manage all event listners - should have namespace that represent element
        var uuid = lgQuery.generateUUID();
        $element.attr('data-lg-id', uuid).on("click.lgcustom-item-" + uuid, function (e) {
          e.preventDefault();
          var currentItemIndex = _this.settings.index || index;
          _this.openGallery(currentItemIndex, element);
        });
      };
      var this_1 = this;
      // Using for loop instead of using bubbling as the items can be any html element.
      for (var index = 0; index < this.items.length; index++) {
        _loop_1(index);
      }
    };
    /**
     * Module constructor
     * Modules are build incrementally.
     * Gallery should be opened only once all the modules are initialized.
     * use moduleBuildTimeout to make sure this
     */
    LightGallery.prototype.buildModules = function () {
      var _this = this;
      this.settings.plugins.forEach(function (plugin) {
        _this.plugins.push(new plugin(_this, $LG));
      });
    };
    LightGallery.prototype.validateLicense = function () {
      if (!this.settings.licenseKey) {
        console.error('Please provide a valid license key');
      } else if (this.settings.licenseKey === '0000-0000-000-0000') {
        console.warn("lightGallery: " + this.settings.licenseKey + " license key is not valid for production use");
      }
    };
    LightGallery.prototype.getSlideItem = function (index) {
      return $LG(this.getSlideItemId(index));
    };
    LightGallery.prototype.getSlideItemId = function (index) {
      return "#lg-item-" + this.lgId + "-" + index;
    };
    LightGallery.prototype.getIdName = function (id) {
      return id + "-" + this.lgId;
    };
    LightGallery.prototype.getElementById = function (id) {
      return $LG("#" + this.getIdName(id));
    };
    LightGallery.prototype.manageSingleSlideClassName = function () {
      if (this.galleryItems.length < 2) {
        this.outer.addClass('lg-single-item');
      } else {
        this.outer.removeClass('lg-single-item');
      }
    };
    LightGallery.prototype.buildStructure = function () {
      var _this = this;
      var container = this.$container && this.$container.get();
      if (container) {
        return;
      }
      var controls = '';
      var subHtmlCont = '';
      // Create controls
      if (this.settings.controls) {
        controls = "<button type=\"button\" id=\"" + this.getIdName('lg-prev') + "\" aria-label=\"" + this.settings.strings['previousSlide'] + "\" class=\"lg-prev lg-icon\"> " + this.settings.prevHtml + " </button>\n                <button type=\"button\" id=\"" + this.getIdName('lg-next') + "\" aria-label=\"" + this.settings.strings['nextSlide'] + "\" class=\"lg-next lg-icon\"> " + this.settings.nextHtml + " </button>";
      }
      if (this.settings.appendSubHtmlTo !== '.lg-item') {
        subHtmlCont = '<div class="lg-sub-html" role="status" aria-live="polite"></div>';
      }
      var addClasses = '';
      if (this.settings.allowMediaOverlap) {
        // Do not remove space before last single quote
        addClasses += 'lg-media-overlap ';
      }
      var ariaLabelledby = this.settings.ariaLabelledby ? 'aria-labelledby="' + this.settings.ariaLabelledby + '"' : '';
      var ariaDescribedby = this.settings.ariaDescribedby ? 'aria-describedby="' + this.settings.ariaDescribedby + '"' : '';
      var containerClassName = "lg-container " + this.settings.addClass + " " + (document.body !== this.settings.container ? 'lg-inline' : '');
      var closeIcon = this.settings.closable && this.settings.showCloseIcon ? "<button type=\"button\" aria-label=\"" + this.settings.strings['closeGallery'] + "\" id=\"" + this.getIdName('lg-close') + "\" class=\"lg-close lg-icon\"></button>" : '';
      var maximizeIcon = this.settings.showMaximizeIcon ? "<button type=\"button\" aria-label=\"" + this.settings.strings['toggleMaximize'] + "\" id=\"" + this.getIdName('lg-maximize') + "\" class=\"lg-maximize lg-icon\"></button>" : '';
      var template = "\n        <div class=\"" + containerClassName + "\" id=\"" + this.getIdName('lg-container') + "\" tabindex=\"-1\" aria-modal=\"true\" " + ariaLabelledby + " " + ariaDescribedby + " role=\"dialog\"\n        >\n            <div id=\"" + this.getIdName('lg-backdrop') + "\" class=\"lg-backdrop\"></div>\n\n            <div id=\"" + this.getIdName('lg-outer') + "\" class=\"lg-outer lg-use-css3 lg-css3 lg-hide-items " + addClasses + " \">\n\n              <div id=\"" + this.getIdName('lg-content') + "\" class=\"lg-content\">\n                <div id=\"" + this.getIdName('lg-inner') + "\" class=\"lg-inner\">\n                </div>\n                " + controls + "\n              </div>\n                <div id=\"" + this.getIdName('lg-toolbar') + "\" class=\"lg-toolbar lg-group\">\n                    " + maximizeIcon + "\n                    " + closeIcon + "\n                    </div>\n                    " + (this.settings.appendSubHtmlTo === '.lg-outer' ? subHtmlCont : '') + "\n                <div id=\"" + this.getIdName('lg-components') + "\" class=\"lg-components\">\n                    " + (this.settings.appendSubHtmlTo === '.lg-sub-html' ? subHtmlCont : '') + "\n                </div>\n            </div>\n        </div>\n        ";
      $LG(this.settings.container).append(template);
      if (document.body !== this.settings.container) {
        $LG(this.settings.container).css('position', 'relative');
      }
      this.outer = this.getElementById('lg-outer');
      this.$lgComponents = this.getElementById('lg-components');
      this.$backdrop = this.getElementById('lg-backdrop');
      this.$container = this.getElementById('lg-container');
      this.$inner = this.getElementById('lg-inner');
      this.$content = this.getElementById('lg-content');
      this.$toolbar = this.getElementById('lg-toolbar');
      this.$backdrop.css('transition-duration', this.settings.backdropDuration + 'ms');
      var outerClassNames = this.settings.mode + " ";
      this.manageSingleSlideClassName();
      if (this.settings.enableDrag) {
        outerClassNames += 'lg-grab ';
      }
      this.outer.addClass(outerClassNames);
      this.$inner.css('transition-timing-function', this.settings.easing);
      this.$inner.css('transition-duration', this.settings.speed + 'ms');
      if (this.settings.download) {
        this.$toolbar.append("<a id=\"" + this.getIdName('lg-download') + "\" target=\"_blank\" rel=\"noopener\" aria-label=\"" + this.settings.strings['download'] + "\" download class=\"lg-download lg-icon\"></a>");
      }
      this.counter();
      $LG(window).on("resize.lg.global" + this.lgId + " orientationchange.lg.global" + this.lgId, function () {
        _this.refreshOnResize();
      });
      this.hideBars();
      this.manageCloseGallery();
      this.toggleMaximize();
      this.initModules();
    };
    LightGallery.prototype.refreshOnResize = function () {
      if (this.lgOpened) {
        var currentGalleryItem = this.galleryItems[this.index];
        var __slideVideoInfo = currentGalleryItem.__slideVideoInfo;
        this.mediaContainerPosition = this.getMediaContainerPosition();
        var _a = this.mediaContainerPosition,
          top_1 = _a.top,
          bottom = _a.bottom;
        this.currentImageSize = utils.getSize(this.items[this.index], this.outer, top_1 + bottom, __slideVideoInfo && this.settings.videoMaxSize);
        if (__slideVideoInfo) {
          this.resizeVideoSlide(this.index, this.currentImageSize);
        }
        if (this.zoomFromOrigin && !this.isDummyImageRemoved) {
          var imgStyle = this.getDummyImgStyles(this.currentImageSize);
          this.outer.find('.lg-current .lg-dummy-img').first().attr('style', imgStyle);
        }
        this.LGel.trigger(lGEvents.containerResize);
      }
    };
    LightGallery.prototype.resizeVideoSlide = function (index, imageSize) {
      var lgVideoStyle = this.getVideoContStyle(imageSize);
      var currentSlide = this.getSlideItem(index);
      currentSlide.find('.lg-video-cont').attr('style', lgVideoStyle);
    };
    /**
     * Update slides dynamically.
     * Add, edit or delete slides dynamically when lightGallery is opened.
     * Modify the current gallery items and pass it via updateSlides method
     * @note
     * - Do not mutate existing lightGallery items directly.
     * - Always pass new list of gallery items
     * - You need to take care of thumbnails outside the gallery if any
     * - user this method only if you want to update slides when the gallery is opened. Otherwise, use `refresh()` method.
     * @param items Gallery items
     * @param index After the update operation, which slide gallery should navigate to
     * @category lGPublicMethods
     * @example
     * const plugin = lightGallery();
     *
     * // Adding slides dynamically
     * let galleryItems = [
     * // Access existing lightGallery items
     * // galleryItems are automatically generated internally from the gallery HTML markup
     * // or directly from galleryItems when dynamic gallery is used
     *   ...plugin.galleryItems,
     *     ...[
     *       {
     *         src: 'img/img-1.png',
     *           thumb: 'img/thumb1.png',
     *         },
     *     ],
     *   ];
     *   plugin.updateSlides(
     *     galleryItems,
     *     plugin.index,
     *   );
     *
     *
     * // Remove slides dynamically
     * galleryItems = JSON.parse(
     *   JSON.stringify(updateSlideInstance.galleryItems),
     * );
     * galleryItems.shift();
     * updateSlideInstance.updateSlides(galleryItems, 1);
     * @see <a href="/demos/update-slides/">Demo</a>
     */
    LightGallery.prototype.updateSlides = function (items, index) {
      if (this.index > items.length - 1) {
        this.index = items.length - 1;
      }
      if (items.length === 1) {
        this.index = 0;
      }
      if (!items.length) {
        this.closeGallery();
        return;
      }
      var currentSrc = this.galleryItems[index].src;
      this.galleryItems = items;
      this.updateControls();
      this.$inner.empty();
      this.currentItemsInDom = [];
      var _index = 0;
      // Find the current index based on source value of the slide
      this.galleryItems.some(function (galleryItem, itemIndex) {
        if (galleryItem.src === currentSrc) {
          _index = itemIndex;
          return true;
        }
        return false;
      });
      this.currentItemsInDom = this.organizeSlideItems(_index, -1);
      this.loadContent(_index, true);
      this.getSlideItem(_index).addClass('lg-current');
      this.index = _index;
      this.updateCurrentCounter(_index);
      this.LGel.trigger(lGEvents.updateSlides);
    };
    // Get gallery items based on multiple conditions
    LightGallery.prototype.getItems = function () {
      // Gallery items
      this.items = [];
      if (!this.settings.dynamic) {
        if (this.settings.selector === 'this') {
          this.items.push(this.el);
        } else if (this.settings.selector) {
          if (typeof this.settings.selector === 'string') {
            if (this.settings.selectWithin) {
              var selectWithin = $LG(this.settings.selectWithin);
              this.items = selectWithin.find(this.settings.selector).get();
            } else {
              this.items = this.el.querySelectorAll(this.settings.selector);
            }
          } else {
            this.items = this.settings.selector;
          }
        } else {
          this.items = this.el.children;
        }
        return utils.getDynamicOptions(this.items, this.settings.extraProps, this.settings.getCaptionFromTitleOrAlt, this.settings.exThumbImage);
      } else {
        return this.settings.dynamicEl || [];
      }
    };
    /**
     * Open lightGallery.
     * Open gallery with specific slide by passing index of the slide as parameter.
     * @category lGPublicMethods
     * @param {Number} index  - index of the slide
     * @param {HTMLElement} element - Which image lightGallery should zoom from
     *
     * @example
     * const $dynamicGallery = document.getElementById('dynamic-gallery-demo');
     * const dynamicGallery = lightGallery($dynamicGallery, {
     *     dynamic: true,
     *     dynamicEl: [
     *         {
     *              src: 'img/1.jpg',
     *              thumb: 'img/thumb-1.jpg',
     *              subHtml: '<h4>Image 1 title</h4><p>Image 1 descriptions.</p>',
     *         },
     *         ...
     *     ],
     * });
     * $dynamicGallery.addEventListener('click', function () {
     *     // Starts with third item.(Optional).
     *     // This is useful if you want use dynamic mode with
     *     // custom thumbnails (thumbnails outside gallery),
     *     dynamicGallery.openGallery(2);
     * });
     *
     */
    LightGallery.prototype.openGallery = function (index, element) {
      var _this = this;
      if (index === void 0) {
        index = this.settings.index;
      }
      // prevent accidental double execution
      if (this.lgOpened) return;
      this.lgOpened = true;
      this.outer.get().focus();
      this.outer.removeClass('lg-hide-items');
      // Add display block, but still has opacity 0
      this.$container.addClass('lg-show');
      var itemsToBeInsertedToDom = this.getItemsToBeInsertedToDom(index, index);
      this.currentItemsInDom = itemsToBeInsertedToDom;
      var items = '';
      itemsToBeInsertedToDom.forEach(function (item) {
        items = items + ("<div id=\"" + item + "\" class=\"lg-item\"></div>");
      });
      this.$inner.append(items);
      this.addHtml(index);
      var transform = '';
      this.mediaContainerPosition = this.getMediaContainerPosition();
      var _a = this.mediaContainerPosition,
        top = _a.top,
        bottom = _a.bottom;
      if (!this.settings.allowMediaOverlap) {
        this.setMediaContainerPosition(top, bottom);
      }
      var __slideVideoInfo = this.galleryItems[index].__slideVideoInfo;
      if (this.zoomFromOrigin && element) {
        this.currentImageSize = utils.getSize(element, this.outer, top + bottom, __slideVideoInfo && this.settings.videoMaxSize);
        transform = utils.getTransform(element, this.outer, top, bottom, this.currentImageSize);
      }
      if (!this.zoomFromOrigin || !transform) {
        this.outer.addClass(this.settings.startClass);
        this.getSlideItem(index).removeClass('lg-complete');
      }
      var timeout = this.settings.zoomFromOrigin ? 100 : this.settings.backdropDuration;
      setTimeout(function () {
        _this.outer.addClass('lg-components-open');
      }, timeout);
      this.index = index;
      this.LGel.trigger(lGEvents.beforeOpen);
      // add class lg-current to remove initial transition
      this.getSlideItem(index).addClass('lg-current');
      this.lGalleryOn = false;
      // Store the current scroll top value to scroll back after closing the gallery..
      this.prevScrollTop = $LG(window).scrollTop();
      setTimeout(function () {
        // Need to check both zoomFromOrigin and transform values as we need to set set the
        // default opening animation if user missed to add the lg-size attribute
        if (_this.zoomFromOrigin && transform) {
          var currentSlide_1 = _this.getSlideItem(index);
          currentSlide_1.css('transform', transform);
          setTimeout(function () {
            currentSlide_1.addClass('lg-start-progress lg-start-end-progress').css('transition-duration', _this.settings.startAnimationDuration + 'ms');
            _this.outer.addClass('lg-zoom-from-image');
          });
          setTimeout(function () {
            currentSlide_1.css('transform', 'translate3d(0, 0, 0)');
          }, 100);
        }
        setTimeout(function () {
          _this.$backdrop.addClass('in');
          _this.$container.addClass('lg-show-in');
        }, 10);
        // lg-visible class resets gallery opacity to 1
        if (!_this.zoomFromOrigin || !transform) {
          setTimeout(function () {
            _this.outer.addClass('lg-visible');
          }, _this.settings.backdropDuration);
        }
        // initiate slide function
        _this.slide(index, false, false, false);
        _this.LGel.trigger(lGEvents.afterOpen);
      });
      if (document.body === this.settings.container) {
        $LG('html').addClass('lg-on');
      }
    };
    /**
     * Note - Changing the position of the media on every slide transition creates a flickering effect.
     * Therefore, The height of the caption is calculated dynamically, only once based on the first slide caption.
     * if you have dynamic captions for each media,
     * you can provide an appropriate height for the captions via allowMediaOverlap option
     */
    LightGallery.prototype.getMediaContainerPosition = function () {
      if (this.settings.allowMediaOverlap) {
        return {
          top: 0,
          bottom: 0
        };
      }
      var top = this.$toolbar.get().clientHeight || 0;
      var subHtml = this.outer.find('.lg-components .lg-sub-html').get();
      var captionHeight = this.settings.defaultCaptionHeight || subHtml && subHtml.clientHeight || 0;
      var thumbContainer = this.outer.find('.lg-thumb-outer').get();
      var thumbHeight = thumbContainer ? thumbContainer.clientHeight : 0;
      var bottom = thumbHeight + captionHeight;
      return {
        top: top,
        bottom: bottom
      };
    };
    LightGallery.prototype.setMediaContainerPosition = function (top, bottom) {
      if (top === void 0) {
        top = 0;
      }
      if (bottom === void 0) {
        bottom = 0;
      }
      this.$content.css('top', top + 'px').css('bottom', bottom + 'px');
    };
    LightGallery.prototype.hideBars = function () {
      var _this = this;
      // Hide controllers if mouse doesn't move for some period
      setTimeout(function () {
        _this.outer.removeClass('lg-hide-items');
        if (_this.settings.hideBarsDelay > 0) {
          _this.outer.on('mousemove.lg click.lg touchstart.lg', function () {
            _this.outer.removeClass('lg-hide-items');
            clearTimeout(_this.hideBarTimeout);
            // Timeout will be cleared on each slide movement also
            _this.hideBarTimeout = setTimeout(function () {
              _this.outer.addClass('lg-hide-items');
            }, _this.settings.hideBarsDelay);
          });
          _this.outer.trigger('mousemove.lg');
        }
      }, this.settings.showBarsAfter);
    };
    LightGallery.prototype.initPictureFill = function ($img) {
      if (this.settings.supportLegacyBrowser) {
        try {
          picturefill({
            elements: [$img.get()]
          });
        } catch (e) {
          console.warn('lightGallery :- If you want srcset or picture tag to be supported for older browser please include picturefil javascript library in your document.');
        }
      }
    };
    /**
     *  @desc Create image counter
     *  Ex: 1/10
     */
    LightGallery.prototype.counter = function () {
      if (this.settings.counter) {
        var counterHtml = "<div class=\"lg-counter\" role=\"status\" aria-live=\"polite\">\n                <span id=\"" + this.getIdName('lg-counter-current') + "\" class=\"lg-counter-current\">" + (this.index + 1) + " </span> /\n                <span id=\"" + this.getIdName('lg-counter-all') + "\" class=\"lg-counter-all\">" + this.galleryItems.length + " </span></div>";
        this.outer.find(this.settings.appendCounterTo).append(counterHtml);
      }
    };
    /**
     *  @desc add sub-html into the slide
     *  @param {Number} index - index of the slide
     */
    LightGallery.prototype.addHtml = function (index) {
      var subHtml;
      var subHtmlUrl;
      if (this.galleryItems[index].subHtmlUrl) {
        subHtmlUrl = this.galleryItems[index].subHtmlUrl;
      } else {
        subHtml = this.galleryItems[index].subHtml;
      }
      if (!subHtmlUrl) {
        if (subHtml) {
          // get first letter of sub-html
          // if first letter starts with . or # get the html form the jQuery object
          var fL = subHtml.substring(0, 1);
          if (fL === '.' || fL === '#') {
            if (this.settings.subHtmlSelectorRelative && !this.settings.dynamic) {
              subHtml = $LG(this.items).eq(index).find(subHtml).first().html();
            } else {
              subHtml = $LG(subHtml).first().html();
            }
          }
        } else {
          subHtml = '';
        }
      }
      if (this.settings.appendSubHtmlTo !== '.lg-item') {
        if (subHtmlUrl) {
          this.outer.find('.lg-sub-html').load(subHtmlUrl);
        } else {
          this.outer.find('.lg-sub-html').html(subHtml);
        }
      } else {
        var currentSlide = $LG(this.getSlideItemId(index));
        if (subHtmlUrl) {
          currentSlide.load(subHtmlUrl);
        } else {
          currentSlide.append("<div class=\"lg-sub-html\">" + subHtml + "</div>");
        }
      }
      // Add lg-empty-html class if title doesn't exist
      if (typeof subHtml !== 'undefined' && subHtml !== null) {
        if (subHtml === '') {
          this.outer.find(this.settings.appendSubHtmlTo).addClass('lg-empty-html');
        } else {
          this.outer.find(this.settings.appendSubHtmlTo).removeClass('lg-empty-html');
        }
      }
      this.LGel.trigger(lGEvents.afterAppendSubHtml, {
        index: index
      });
    };
    /**
     *  @desc Preload slides
     *  @param {Number} index - index of the slide
     * @todo preload not working for the first slide, Also, should work for the first and last slide as well
     */
    LightGallery.prototype.preload = function (index) {
      for (var i = 1; i <= this.settings.preload; i++) {
        if (i >= this.galleryItems.length - index) {
          break;
        }
        this.loadContent(index + i, false);
      }
      for (var j = 1; j <= this.settings.preload; j++) {
        if (index - j < 0) {
          break;
        }
        this.loadContent(index - j, false);
      }
    };
    LightGallery.prototype.getDummyImgStyles = function (imageSize) {
      if (!imageSize) return '';
      return "width:" + imageSize.width + "px;\n                margin-left: -" + imageSize.width / 2 + "px;\n                margin-top: -" + imageSize.height / 2 + "px;\n                height:" + imageSize.height + "px";
    };
    LightGallery.prototype.getVideoContStyle = function (imageSize) {
      if (!imageSize) return '';
      return "width:" + imageSize.width + "px;\n                height:" + imageSize.height + "px";
    };
    LightGallery.prototype.getDummyImageContent = function ($currentSlide, index, alt) {
      var $currentItem;
      if (!this.settings.dynamic) {
        $currentItem = $LG(this.items).eq(index);
      }
      if ($currentItem) {
        var _dummyImgSrc = void 0;
        if (!this.settings.exThumbImage) {
          _dummyImgSrc = $currentItem.find('img').first().attr('src');
        } else {
          _dummyImgSrc = $currentItem.attr(this.settings.exThumbImage);
        }
        if (!_dummyImgSrc) return '';
        var imgStyle = this.getDummyImgStyles(this.currentImageSize);
        var dummyImgContent = "<img " + alt + " style=\"" + imgStyle + "\" class=\"lg-dummy-img\" src=\"" + _dummyImgSrc + "\" />";
        $currentSlide.addClass('lg-first-slide');
        this.outer.addClass('lg-first-slide-loading');
        return dummyImgContent;
      }
      return '';
    };
    LightGallery.prototype.setImgMarkup = function (src, $currentSlide, index) {
      var currentGalleryItem = this.galleryItems[index];
      var alt = currentGalleryItem.alt,
        srcset = currentGalleryItem.srcset,
        sizes = currentGalleryItem.sizes,
        sources = currentGalleryItem.sources;
      // Use the thumbnail as dummy image which will be resized to actual image size and
      // displayed on top of actual image
      var imgContent = '';
      var altAttr = alt ? 'alt="' + alt + '"' : '';
      if (this.isFirstSlideWithZoomAnimation()) {
        imgContent = this.getDummyImageContent($currentSlide, index, altAttr);
      } else {
        imgContent = utils.getImgMarkup(index, src, altAttr, srcset, sizes, sources);
      }
      var imgMarkup = "<picture class=\"lg-img-wrap\"> " + imgContent + "</picture>";
      $currentSlide.prepend(imgMarkup);
    };
    LightGallery.prototype.onSlideObjectLoad = function ($slide, isHTML5VideoWithoutPoster, onLoad, onError) {
      var mediaObject = $slide.find('.lg-object').first();
      if (utils.isImageLoaded(mediaObject.get()) || isHTML5VideoWithoutPoster) {
        onLoad();
      } else {
        mediaObject.on('load.lg error.lg', function () {
          onLoad && onLoad();
        });
        mediaObject.on('error.lg', function () {
          onError && onError();
        });
      }
    };
    /**
     *
     * @param $el Current slide item
     * @param index
     * @param delay Delay is 0 except first time
     * @param speed Speed is same as delay, except it is 0 if gallery is opened via hash plugin
     * @param isFirstSlide
     */
    LightGallery.prototype.onLgObjectLoad = function (currentSlide, index, delay, speed, isFirstSlide, isHTML5VideoWithoutPoster) {
      var _this = this;
      this.onSlideObjectLoad(currentSlide, isHTML5VideoWithoutPoster, function () {
        _this.triggerSlideItemLoad(currentSlide, index, delay, speed, isFirstSlide);
      }, function () {
        currentSlide.addClass('lg-complete lg-complete_');
        currentSlide.html('<span class="lg-error-msg">Oops... Failed to load content...</span>');
      });
    };
    LightGallery.prototype.triggerSlideItemLoad = function ($currentSlide, index, delay, speed, isFirstSlide) {
      var _this = this;
      var currentGalleryItem = this.galleryItems[index];
      // Adding delay for video slides without poster for better performance and user experience
      // Videos should start playing once once the gallery is completely loaded
      var _speed = isFirstSlide && this.getSlideType(currentGalleryItem) === 'video' && !currentGalleryItem.poster ? speed : 0;
      setTimeout(function () {
        $currentSlide.addClass('lg-complete lg-complete_');
        _this.LGel.trigger(lGEvents.slideItemLoad, {
          index: index,
          delay: delay || 0,
          isFirstSlide: isFirstSlide
        });
      }, _speed);
    };
    LightGallery.prototype.isFirstSlideWithZoomAnimation = function () {
      return !!(!this.lGalleryOn && this.zoomFromOrigin && this.currentImageSize);
    };
    // Add video slideInfo
    LightGallery.prototype.addSlideVideoInfo = function (items) {
      var _this = this;
      items.forEach(function (element, index) {
        element.__slideVideoInfo = utils.isVideo(element.src, !!element.video, index);
        if (element.__slideVideoInfo && _this.settings.loadYouTubePoster && !element.poster && element.__slideVideoInfo.youtube) {
          element.poster = "//img.youtube.com/vi/" + element.__slideVideoInfo.youtube[1] + "/maxresdefault.jpg";
        }
      });
    };
    /**
     *  Load slide content into slide.
     *  This is used to load content into slides that is not visible too
     *  @param {Number} index - index of the slide.
     *  @param {Boolean} rec - if true call loadcontent() function again.
     */
    LightGallery.prototype.loadContent = function (index, rec) {
      var _this = this;
      var currentGalleryItem = this.galleryItems[index];
      var $currentSlide = $LG(this.getSlideItemId(index));
      var poster = currentGalleryItem.poster,
        srcset = currentGalleryItem.srcset,
        sizes = currentGalleryItem.sizes,
        sources = currentGalleryItem.sources;
      var src = currentGalleryItem.src;
      var video = currentGalleryItem.video;
      var _html5Video = video && typeof video === 'string' ? JSON.parse(video) : video;
      if (currentGalleryItem.responsive) {
        var srcDyItms = currentGalleryItem.responsive.split(',');
        src = utils.getResponsiveSrc(srcDyItms) || src;
      }
      var videoInfo = currentGalleryItem.__slideVideoInfo;
      var lgVideoStyle = '';
      var iframe = !!currentGalleryItem.iframe;
      var isFirstSlide = !this.lGalleryOn;
      // delay for adding complete class. it is 0 except first time.
      var delay = 0;
      if (isFirstSlide) {
        if (this.zoomFromOrigin && this.currentImageSize) {
          delay = this.settings.startAnimationDuration + 10;
        } else {
          delay = this.settings.backdropDuration + 10;
        }
      }
      if (!$currentSlide.hasClass('lg-loaded')) {
        if (videoInfo) {
          var _a = this.mediaContainerPosition,
            top_2 = _a.top,
            bottom = _a.bottom;
          var videoSize = utils.getSize(this.items[index], this.outer, top_2 + bottom, videoInfo && this.settings.videoMaxSize);
          lgVideoStyle = this.getVideoContStyle(videoSize);
        }
        if (iframe) {
          var markup = utils.getIframeMarkup(this.settings.iframeWidth, this.settings.iframeHeight, this.settings.iframeMaxWidth, this.settings.iframeMaxHeight, src, currentGalleryItem.iframeTitle);
          $currentSlide.prepend(markup);
        } else if (poster) {
          var dummyImg = '';
          var hasStartAnimation = isFirstSlide && this.zoomFromOrigin && this.currentImageSize;
          if (hasStartAnimation) {
            dummyImg = this.getDummyImageContent($currentSlide, index, '');
          }
          var markup = utils.getVideoPosterMarkup(poster, dummyImg || '', lgVideoStyle, this.settings.strings['playVideo'], videoInfo);
          $currentSlide.prepend(markup);
        } else if (videoInfo) {
          var markup = "<div class=\"lg-video-cont \" style=\"" + lgVideoStyle + "\"></div>";
          $currentSlide.prepend(markup);
        } else {
          this.setImgMarkup(src, $currentSlide, index);
          if (srcset || sources) {
            var $img = $currentSlide.find('.lg-object');
            this.initPictureFill($img);
          }
        }
        if (poster || videoInfo) {
          this.LGel.trigger(lGEvents.hasVideo, {
            index: index,
            src: src,
            html5Video: _html5Video,
            hasPoster: !!poster
          });
        }
        this.LGel.trigger(lGEvents.afterAppendSlide, {
          index: index
        });
        if (this.lGalleryOn && this.settings.appendSubHtmlTo === '.lg-item') {
          this.addHtml(index);
        }
      }
      // For first time add some delay for displaying the start animation.
      var _speed = 0;
      // Do not change the delay value because it is required for zoom plugin.
      // If gallery opened from direct url (hash) speed value should be 0
      if (delay && !$LG(document.body).hasClass('lg-from-hash')) {
        _speed = delay;
      }
      // Only for first slide and zoomFromOrigin is enabled
      if (this.isFirstSlideWithZoomAnimation()) {
        setTimeout(function () {
          $currentSlide.removeClass('lg-start-end-progress lg-start-progress').removeAttr('style');
        }, this.settings.startAnimationDuration + 100);
        if (!$currentSlide.hasClass('lg-loaded')) {
          setTimeout(function () {
            if (_this.getSlideType(currentGalleryItem) === 'image') {
              $currentSlide.find('.lg-img-wrap').append(utils.getImgMarkup(index, src, '', srcset, sizes, currentGalleryItem.sources));
              if (srcset || sources) {
                var $img = $currentSlide.find('.lg-object');
                _this.initPictureFill($img);
              }
            }
            if (_this.getSlideType(currentGalleryItem) === 'image' || _this.getSlideType(currentGalleryItem) === 'video' && poster) {
              _this.onLgObjectLoad($currentSlide, index, delay, _speed, true, false);
              // load remaining slides once the slide is completely loaded
              _this.onSlideObjectLoad($currentSlide, !!(videoInfo && videoInfo.html5 && !poster), function () {
                _this.loadContentOnFirstSlideLoad(index, $currentSlide, _speed);
              }, function () {
                _this.loadContentOnFirstSlideLoad(index, $currentSlide, _speed);
              });
            }
          }, this.settings.startAnimationDuration + 100);
        }
      }
      // SLide content has been added to dom
      $currentSlide.addClass('lg-loaded');
      if (!this.isFirstSlideWithZoomAnimation() || this.getSlideType(currentGalleryItem) === 'video' && !poster) {
        this.onLgObjectLoad($currentSlide, index, delay, _speed, isFirstSlide, !!(videoInfo && videoInfo.html5 && !poster));
      }
      // When gallery is opened once content is loaded (second time) need to add lg-complete class for css styling
      if ((!this.zoomFromOrigin || !this.currentImageSize) && $currentSlide.hasClass('lg-complete_') && !this.lGalleryOn) {
        setTimeout(function () {
          $currentSlide.addClass('lg-complete');
        }, this.settings.backdropDuration);
      }
      // Content loaded
      // Need to set lGalleryOn before calling preload function
      this.lGalleryOn = true;
      if (rec === true) {
        if (!$currentSlide.hasClass('lg-complete_')) {
          $currentSlide.find('.lg-object').first().on('load.lg error.lg', function () {
            _this.preload(index);
          });
        } else {
          this.preload(index);
        }
      }
    };
    /**
     * @desc Remove dummy image content and load next slides
     * Called only for the first time if zoomFromOrigin animation is enabled
     * @param index
     * @param $currentSlide
     * @param speed
     */
    LightGallery.prototype.loadContentOnFirstSlideLoad = function (index, $currentSlide, speed) {
      var _this = this;
      setTimeout(function () {
        $currentSlide.find('.lg-dummy-img').remove();
        $currentSlide.removeClass('lg-first-slide');
        _this.outer.removeClass('lg-first-slide-loading');
        _this.isDummyImageRemoved = true;
        _this.preload(index);
      }, speed + 300);
    };
    LightGallery.prototype.getItemsToBeInsertedToDom = function (index, prevIndex, numberOfItems) {
      var _this = this;
      if (numberOfItems === void 0) {
        numberOfItems = 0;
      }
      var itemsToBeInsertedToDom = [];
      // Minimum 2 items should be there
      var possibleNumberOfItems = Math.max(numberOfItems, 3);
      possibleNumberOfItems = Math.min(possibleNumberOfItems, this.galleryItems.length);
      var prevIndexItem = "lg-item-" + this.lgId + "-" + prevIndex;
      if (this.galleryItems.length <= 3) {
        this.galleryItems.forEach(function (_element, index) {
          itemsToBeInsertedToDom.push("lg-item-" + _this.lgId + "-" + index);
        });
        return itemsToBeInsertedToDom;
      }
      if (index < (this.galleryItems.length - 1) / 2) {
        for (var idx = index; idx > index - possibleNumberOfItems / 2 && idx >= 0; idx--) {
          itemsToBeInsertedToDom.push("lg-item-" + this.lgId + "-" + idx);
        }
        var numberOfExistingItems = itemsToBeInsertedToDom.length;
        for (var idx = 0; idx < possibleNumberOfItems - numberOfExistingItems; idx++) {
          itemsToBeInsertedToDom.push("lg-item-" + this.lgId + "-" + (index + idx + 1));
        }
      } else {
        for (var idx = index; idx <= this.galleryItems.length - 1 && idx < index + possibleNumberOfItems / 2; idx++) {
          itemsToBeInsertedToDom.push("lg-item-" + this.lgId + "-" + idx);
        }
        var numberOfExistingItems = itemsToBeInsertedToDom.length;
        for (var idx = 0; idx < possibleNumberOfItems - numberOfExistingItems; idx++) {
          itemsToBeInsertedToDom.push("lg-item-" + this.lgId + "-" + (index - idx - 1));
        }
      }
      if (this.settings.loop) {
        if (index === this.galleryItems.length - 1) {
          itemsToBeInsertedToDom.push("lg-item-" + this.lgId + "-" + 0);
        } else if (index === 0) {
          itemsToBeInsertedToDom.push("lg-item-" + this.lgId + "-" + (this.galleryItems.length - 1));
        }
      }
      if (itemsToBeInsertedToDom.indexOf(prevIndexItem) === -1) {
        itemsToBeInsertedToDom.push("lg-item-" + this.lgId + "-" + prevIndex);
      }
      return itemsToBeInsertedToDom;
    };
    LightGallery.prototype.organizeSlideItems = function (index, prevIndex) {
      var _this = this;
      var itemsToBeInsertedToDom = this.getItemsToBeInsertedToDom(index, prevIndex, this.settings.numberOfSlideItemsInDom);
      itemsToBeInsertedToDom.forEach(function (item) {
        if (_this.currentItemsInDom.indexOf(item) === -1) {
          _this.$inner.append("<div id=\"" + item + "\" class=\"lg-item\"></div>");
        }
      });
      this.currentItemsInDom.forEach(function (item) {
        if (itemsToBeInsertedToDom.indexOf(item) === -1) {
          $LG("#" + item).remove();
        }
      });
      return itemsToBeInsertedToDom;
    };
    /**
     * Get previous index of the slide
     */
    LightGallery.prototype.getPreviousSlideIndex = function () {
      var prevIndex = 0;
      try {
        var currentItemId = this.outer.find('.lg-current').first().attr('id');
        prevIndex = parseInt(currentItemId.split('-')[3]) || 0;
      } catch (error) {
        prevIndex = 0;
      }
      return prevIndex;
    };
    LightGallery.prototype.setDownloadValue = function (index) {
      if (this.settings.download) {
        var currentGalleryItem = this.galleryItems[index];
        var hideDownloadBtn = currentGalleryItem.downloadUrl === false || currentGalleryItem.downloadUrl === 'false';
        if (hideDownloadBtn) {
          this.outer.addClass('lg-hide-download');
        } else {
          var $download = this.getElementById('lg-download');
          this.outer.removeClass('lg-hide-download');
          $download.attr('href', currentGalleryItem.downloadUrl || currentGalleryItem.src);
          if (currentGalleryItem.download) {
            $download.attr('download', currentGalleryItem.download);
          }
        }
      }
    };
    LightGallery.prototype.makeSlideAnimation = function (direction, currentSlideItem, previousSlideItem) {
      var _this = this;
      if (this.lGalleryOn) {
        previousSlideItem.addClass('lg-slide-progress');
      }
      setTimeout(function () {
        // remove all transitions
        _this.outer.addClass('lg-no-trans');
        _this.outer.find('.lg-item').removeClass('lg-prev-slide lg-next-slide');
        if (direction === 'prev') {
          //prevslide
          currentSlideItem.addClass('lg-prev-slide');
          previousSlideItem.addClass('lg-next-slide');
        } else {
          // next slide
          currentSlideItem.addClass('lg-next-slide');
          previousSlideItem.addClass('lg-prev-slide');
        }
        // give 50 ms for browser to add/remove class
        setTimeout(function () {
          _this.outer.find('.lg-item').removeClass('lg-current');
          currentSlideItem.addClass('lg-current');
          // reset all transitions
          _this.outer.removeClass('lg-no-trans');
        }, 50);
      }, this.lGalleryOn ? this.settings.slideDelay : 0);
    };
    /**
     * Goto a specific slide.
     * @param {Number} index - index of the slide
     * @param {Boolean} fromTouch - true if slide function called via touch event or mouse drag
     * @param {Boolean} fromThumb - true if slide function called via thumbnail click
     * @param {String} direction - Direction of the slide(next/prev)
     * @category lGPublicMethods
     * @example
     *  const plugin = lightGallery();
     *  // to go to 3rd slide
     *  plugin.slide(2);
     *
     */
    LightGallery.prototype.slide = function (index, fromTouch, fromThumb, direction) {
      var _this = this;
      var prevIndex = this.getPreviousSlideIndex();
      this.currentItemsInDom = this.organizeSlideItems(index, prevIndex);
      // Prevent multiple call, Required for hsh plugin
      if (this.lGalleryOn && prevIndex === index) {
        return;
      }
      var numberOfGalleryItems = this.galleryItems.length;
      if (!this.lgBusy) {
        if (this.settings.counter) {
          this.updateCurrentCounter(index);
        }
        var currentSlideItem = this.getSlideItem(index);
        var previousSlideItem_1 = this.getSlideItem(prevIndex);
        var currentGalleryItem = this.galleryItems[index];
        var videoInfo = currentGalleryItem.__slideVideoInfo;
        this.outer.attr('data-lg-slide-type', this.getSlideType(currentGalleryItem));
        this.setDownloadValue(index);
        if (videoInfo) {
          var _a = this.mediaContainerPosition,
            top_3 = _a.top,
            bottom = _a.bottom;
          var videoSize = utils.getSize(this.items[index], this.outer, top_3 + bottom, videoInfo && this.settings.videoMaxSize);
          this.resizeVideoSlide(index, videoSize);
        }
        this.LGel.trigger(lGEvents.beforeSlide, {
          prevIndex: prevIndex,
          index: index,
          fromTouch: !!fromTouch,
          fromThumb: !!fromThumb
        });
        this.lgBusy = true;
        clearTimeout(this.hideBarTimeout);
        this.arrowDisable(index);
        if (!direction) {
          if (index < prevIndex) {
            direction = 'prev';
          } else if (index > prevIndex) {
            direction = 'next';
          }
        }
        if (!fromTouch) {
          this.makeSlideAnimation(direction, currentSlideItem, previousSlideItem_1);
        } else {
          this.outer.find('.lg-item').removeClass('lg-prev-slide lg-current lg-next-slide');
          var touchPrev = void 0;
          var touchNext = void 0;
          if (numberOfGalleryItems > 2) {
            touchPrev = index - 1;
            touchNext = index + 1;
            if (index === 0 && prevIndex === numberOfGalleryItems - 1) {
              // next slide
              touchNext = 0;
              touchPrev = numberOfGalleryItems - 1;
            } else if (index === numberOfGalleryItems - 1 && prevIndex === 0) {
              // prev slide
              touchNext = 0;
              touchPrev = numberOfGalleryItems - 1;
            }
          } else {
            touchPrev = 0;
            touchNext = 1;
          }
          if (direction === 'prev') {
            this.getSlideItem(touchNext).addClass('lg-next-slide');
          } else {
            this.getSlideItem(touchPrev).addClass('lg-prev-slide');
          }
          currentSlideItem.addClass('lg-current');
        }
        // Do not put load content in set timeout as it needs to load immediately when the gallery is opened
        if (!this.lGalleryOn) {
          this.loadContent(index, true);
        } else {
          setTimeout(function () {
            _this.loadContent(index, true);
            // Add title if this.settings.appendSubHtmlTo === lg-sub-html
            if (_this.settings.appendSubHtmlTo !== '.lg-item') {
              _this.addHtml(index);
            }
          }, this.settings.speed + 50 + (fromTouch ? 0 : this.settings.slideDelay));
        }
        setTimeout(function () {
          _this.lgBusy = false;
          previousSlideItem_1.removeClass('lg-slide-progress');
          _this.LGel.trigger(lGEvents.afterSlide, {
            prevIndex: prevIndex,
            index: index,
            fromTouch: fromTouch,
            fromThumb: fromThumb
          });
        }, (this.lGalleryOn ? this.settings.speed + 100 : 100) + (fromTouch ? 0 : this.settings.slideDelay));
      }
      this.index = index;
    };
    LightGallery.prototype.updateCurrentCounter = function (index) {
      this.getElementById('lg-counter-current').html(index + 1 + '');
    };
    LightGallery.prototype.updateCounterTotal = function () {
      this.getElementById('lg-counter-all').html(this.galleryItems.length + '');
    };
    LightGallery.prototype.getSlideType = function (item) {
      if (item.__slideVideoInfo) {
        return 'video';
      } else if (item.iframe) {
        return 'iframe';
      } else {
        return 'image';
      }
    };
    LightGallery.prototype.touchMove = function (startCoords, endCoords, e) {
      var distanceX = endCoords.pageX - startCoords.pageX;
      var distanceY = endCoords.pageY - startCoords.pageY;
      var allowSwipe = false;
      if (this.swipeDirection) {
        allowSwipe = true;
      } else {
        if (Math.abs(distanceX) > 15) {
          this.swipeDirection = 'horizontal';
          allowSwipe = true;
        } else if (Math.abs(distanceY) > 15) {
          this.swipeDirection = 'vertical';
          allowSwipe = true;
        }
      }
      if (!allowSwipe) {
        return;
      }
      var $currentSlide = this.getSlideItem(this.index);
      if (this.swipeDirection === 'horizontal') {
        e === null || e === void 0 ? void 0 : e.preventDefault();
        // reset opacity and transition duration
        this.outer.addClass('lg-dragging');
        // move current slide
        this.setTranslate($currentSlide, distanceX, 0);
        // move next and prev slide with current slide
        var width = $currentSlide.get().offsetWidth;
        var slideWidthAmount = width * 15 / 100;
        var gutter = slideWidthAmount - Math.abs(distanceX * 10 / 100);
        this.setTranslate(this.outer.find('.lg-prev-slide').first(), -width + distanceX - gutter, 0);
        this.setTranslate(this.outer.find('.lg-next-slide').first(), width + distanceX + gutter, 0);
      } else if (this.swipeDirection === 'vertical') {
        if (this.settings.swipeToClose) {
          e === null || e === void 0 ? void 0 : e.preventDefault();
          this.$container.addClass('lg-dragging-vertical');
          var opacity = 1 - Math.abs(distanceY) / window.innerHeight;
          this.$backdrop.css('opacity', opacity);
          var scale = 1 - Math.abs(distanceY) / (window.innerWidth * 2);
          this.setTranslate($currentSlide, 0, distanceY, scale, scale);
          if (Math.abs(distanceY) > 100) {
            this.outer.addClass('lg-hide-items').removeClass('lg-components-open');
          }
        }
      }
    };
    LightGallery.prototype.touchEnd = function (endCoords, startCoords, event) {
      var _this = this;
      var distance;
      // keep slide animation for any mode while dragg/swipe
      if (this.settings.mode !== 'lg-slide') {
        this.outer.addClass('lg-slide');
      }
      // set transition duration
      setTimeout(function () {
        _this.$container.removeClass('lg-dragging-vertical');
        _this.outer.removeClass('lg-dragging lg-hide-items').addClass('lg-components-open');
        var triggerClick = true;
        if (_this.swipeDirection === 'horizontal') {
          distance = endCoords.pageX - startCoords.pageX;
          var distanceAbs = Math.abs(endCoords.pageX - startCoords.pageX);
          if (distance < 0 && distanceAbs > _this.settings.swipeThreshold) {
            _this.goToNextSlide(true);
            triggerClick = false;
          } else if (distance > 0 && distanceAbs > _this.settings.swipeThreshold) {
            _this.goToPrevSlide(true);
            triggerClick = false;
          }
        } else if (_this.swipeDirection === 'vertical') {
          distance = Math.abs(endCoords.pageY - startCoords.pageY);
          if (_this.settings.closable && _this.settings.swipeToClose && distance > 100) {
            _this.closeGallery();
            return;
          } else {
            _this.$backdrop.css('opacity', 1);
          }
        }
        _this.outer.find('.lg-item').removeAttr('style');
        if (triggerClick && Math.abs(endCoords.pageX - startCoords.pageX) < 5) {
          // Trigger click if distance is less than 5 pix
          var target = $LG(event.target);
          if (_this.isPosterElement(target)) {
            _this.LGel.trigger(lGEvents.posterClick);
          }
        }
        _this.swipeDirection = undefined;
      });
      // remove slide class once drag/swipe is completed if mode is not slide
      setTimeout(function () {
        if (!_this.outer.hasClass('lg-dragging') && _this.settings.mode !== 'lg-slide') {
          _this.outer.removeClass('lg-slide');
        }
      }, this.settings.speed + 100);
    };
    LightGallery.prototype.enableSwipe = function () {
      var _this = this;
      var startCoords = {};
      var endCoords = {};
      var isMoved = false;
      var isSwiping = false;
      if (this.settings.enableSwipe) {
        this.$inner.on('touchstart.lg', function (e) {
          _this.dragOrSwipeEnabled = true;
          var $item = _this.getSlideItem(_this.index);
          if (($LG(e.target).hasClass('lg-item') || $item.get().contains(e.target)) && !_this.outer.hasClass('lg-zoomed') && !_this.lgBusy && e.targetTouches.length === 1) {
            isSwiping = true;
            _this.touchAction = 'swipe';
            _this.manageSwipeClass();
            startCoords = {
              pageX: e.targetTouches[0].pageX,
              pageY: e.targetTouches[0].pageY
            };
          }
        });
        this.$inner.on('touchmove.lg', function (e) {
          if (isSwiping && _this.touchAction === 'swipe' && e.targetTouches.length === 1) {
            endCoords = {
              pageX: e.targetTouches[0].pageX,
              pageY: e.targetTouches[0].pageY
            };
            _this.touchMove(startCoords, endCoords, e);
            isMoved = true;
          }
        });
        this.$inner.on('touchend.lg', function (event) {
          if (_this.touchAction === 'swipe') {
            if (isMoved) {
              isMoved = false;
              _this.touchEnd(endCoords, startCoords, event);
            } else if (isSwiping) {
              var target = $LG(event.target);
              if (_this.isPosterElement(target)) {
                _this.LGel.trigger(lGEvents.posterClick);
              }
            }
            _this.touchAction = undefined;
            isSwiping = false;
          }
        });
      }
    };
    LightGallery.prototype.enableDrag = function () {
      var _this = this;
      var startCoords = {};
      var endCoords = {};
      var isDraging = false;
      var isMoved = false;
      if (this.settings.enableDrag) {
        this.outer.on('mousedown.lg', function (e) {
          _this.dragOrSwipeEnabled = true;
          var $item = _this.getSlideItem(_this.index);
          if ($LG(e.target).hasClass('lg-item') || $item.get().contains(e.target)) {
            if (!_this.outer.hasClass('lg-zoomed') && !_this.lgBusy) {
              e.preventDefault();
              if (!_this.lgBusy) {
                _this.manageSwipeClass();
                startCoords = {
                  pageX: e.pageX,
                  pageY: e.pageY
                };
                isDraging = true;
                // ** Fix for webkit cursor issue https://code.google.com/p/chromium/issues/detail?id=26723
                _this.outer.get().scrollLeft += 1;
                _this.outer.get().scrollLeft -= 1;
                // *
                _this.outer.removeClass('lg-grab').addClass('lg-grabbing');
                _this.LGel.trigger(lGEvents.dragStart);
              }
            }
          }
        });
        $LG(window).on("mousemove.lg.global" + this.lgId, function (e) {
          if (isDraging && _this.lgOpened) {
            isMoved = true;
            endCoords = {
              pageX: e.pageX,
              pageY: e.pageY
            };
            _this.touchMove(startCoords, endCoords);
            _this.LGel.trigger(lGEvents.dragMove);
          }
        });
        $LG(window).on("mouseup.lg.global" + this.lgId, function (event) {
          if (!_this.lgOpened) {
            return;
          }
          var target = $LG(event.target);
          if (isMoved) {
            isMoved = false;
            _this.touchEnd(endCoords, startCoords, event);
            _this.LGel.trigger(lGEvents.dragEnd);
          } else if (_this.isPosterElement(target)) {
            _this.LGel.trigger(lGEvents.posterClick);
          }
          // Prevent execution on click
          if (isDraging) {
            isDraging = false;
            _this.outer.removeClass('lg-grabbing').addClass('lg-grab');
          }
        });
      }
    };
    LightGallery.prototype.triggerPosterClick = function () {
      var _this = this;
      this.$inner.on('click.lg', function (event) {
        if (!_this.dragOrSwipeEnabled && _this.isPosterElement($LG(event.target))) {
          _this.LGel.trigger(lGEvents.posterClick);
        }
      });
    };
    LightGallery.prototype.manageSwipeClass = function () {
      var _touchNext = this.index + 1;
      var _touchPrev = this.index - 1;
      if (this.settings.loop && this.galleryItems.length > 2) {
        if (this.index === 0) {
          _touchPrev = this.galleryItems.length - 1;
        } else if (this.index === this.galleryItems.length - 1) {
          _touchNext = 0;
        }
      }
      this.outer.find('.lg-item').removeClass('lg-next-slide lg-prev-slide');
      if (_touchPrev > -1) {
        this.getSlideItem(_touchPrev).addClass('lg-prev-slide');
      }
      this.getSlideItem(_touchNext).addClass('lg-next-slide');
    };
    /**
     * Go to next slide
     * @param {Boolean} fromTouch - true if slide function called via touch event
     * @category lGPublicMethods
     * @example
     *  const plugin = lightGallery();
     *  plugin.goToNextSlide();
     * @see <a href="/demos/methods/">Demo</a>
     */
    LightGallery.prototype.goToNextSlide = function (fromTouch) {
      var _this = this;
      var _loop = this.settings.loop;
      if (fromTouch && this.galleryItems.length < 3) {
        _loop = false;
      }
      if (!this.lgBusy) {
        if (this.index + 1 < this.galleryItems.length) {
          this.index++;
          this.LGel.trigger(lGEvents.beforeNextSlide, {
            index: this.index
          });
          this.slide(this.index, !!fromTouch, false, 'next');
        } else {
          if (_loop) {
            this.index = 0;
            this.LGel.trigger(lGEvents.beforeNextSlide, {
              index: this.index
            });
            this.slide(this.index, !!fromTouch, false, 'next');
          } else if (this.settings.slideEndAnimation && !fromTouch) {
            this.outer.addClass('lg-right-end');
            setTimeout(function () {
              _this.outer.removeClass('lg-right-end');
            }, 400);
          }
        }
      }
    };
    /**
     * Go to previous slides
     * @param {Boolean} fromTouch - true if slide function called via touch event
     * @category lGPublicMethods
     * @example
     *  const plugin = lightGallery({});
     *  plugin.goToPrevSlide();
     * @see <a href="/demos/methods/">Demo</a>
     *
     */
    LightGallery.prototype.goToPrevSlide = function (fromTouch) {
      var _this = this;
      var _loop = this.settings.loop;
      if (fromTouch && this.galleryItems.length < 3) {
        _loop = false;
      }
      if (!this.lgBusy) {
        if (this.index > 0) {
          this.index--;
          this.LGel.trigger(lGEvents.beforePrevSlide, {
            index: this.index,
            fromTouch: fromTouch
          });
          this.slide(this.index, !!fromTouch, false, 'prev');
        } else {
          if (_loop) {
            this.index = this.galleryItems.length - 1;
            this.LGel.trigger(lGEvents.beforePrevSlide, {
              index: this.index,
              fromTouch: fromTouch
            });
            this.slide(this.index, !!fromTouch, false, 'prev');
          } else if (this.settings.slideEndAnimation && !fromTouch) {
            this.outer.addClass('lg-left-end');
            setTimeout(function () {
              _this.outer.removeClass('lg-left-end');
            }, 400);
          }
        }
      }
    };
    LightGallery.prototype.keyPress = function () {
      var _this = this;
      $LG(window).on("keydown.lg.global" + this.lgId, function (e) {
        if (_this.lgOpened && _this.settings.escKey === true && e.keyCode === 27) {
          e.preventDefault();
          if (_this.settings.allowMediaOverlap && _this.outer.hasClass('lg-can-toggle') && _this.outer.hasClass('lg-components-open')) {
            _this.outer.removeClass('lg-components-open');
          } else {
            _this.closeGallery();
          }
        }
        if (_this.lgOpened && _this.galleryItems.length > 1) {
          if (e.keyCode === 37) {
            e.preventDefault();
            _this.goToPrevSlide();
          }
          if (e.keyCode === 39) {
            e.preventDefault();
            _this.goToNextSlide();
          }
        }
      });
    };
    LightGallery.prototype.arrow = function () {
      var _this = this;
      this.getElementById('lg-prev').on('click.lg', function () {
        _this.goToPrevSlide();
      });
      this.getElementById('lg-next').on('click.lg', function () {
        _this.goToNextSlide();
      });
    };
    LightGallery.prototype.arrowDisable = function (index) {
      // Disable arrows if settings.hideControlOnEnd is true
      if (!this.settings.loop && this.settings.hideControlOnEnd) {
        var $prev = this.getElementById('lg-prev');
        var $next = this.getElementById('lg-next');
        if (index + 1 === this.galleryItems.length) {
          $next.attr('disabled', 'disabled').addClass('disabled');
        } else {
          $next.removeAttr('disabled').removeClass('disabled');
        }
        if (index === 0) {
          $prev.attr('disabled', 'disabled').addClass('disabled');
        } else {
          $prev.removeAttr('disabled').removeClass('disabled');
        }
      }
    };
    LightGallery.prototype.setTranslate = function ($el, xValue, yValue, scaleX, scaleY) {
      if (scaleX === void 0) {
        scaleX = 1;
      }
      if (scaleY === void 0) {
        scaleY = 1;
      }
      $el.css('transform', 'translate3d(' + xValue + 'px, ' + yValue + 'px, 0px) scale3d(' + scaleX + ', ' + scaleY + ', 1)');
    };
    LightGallery.prototype.mousewheel = function () {
      var _this = this;
      var lastCall = 0;
      this.outer.on('wheel.lg', function (e) {
        if (!e.deltaY || _this.galleryItems.length < 2) {
          return;
        }
        e.preventDefault();
        var now = new Date().getTime();
        if (now - lastCall < 1000) {
          return;
        }
        lastCall = now;
        if (e.deltaY > 0) {
          _this.goToNextSlide();
        } else if (e.deltaY < 0) {
          _this.goToPrevSlide();
        }
      });
    };
    LightGallery.prototype.isSlideElement = function (target) {
      return target.hasClass('lg-outer') || target.hasClass('lg-item') || target.hasClass('lg-img-wrap');
    };
    LightGallery.prototype.isPosterElement = function (target) {
      var playButton = this.getSlideItem(this.index).find('.lg-video-play-button').get();
      return target.hasClass('lg-video-poster') || target.hasClass('lg-video-play-button') || playButton && playButton.contains(target.get());
    };
    /**
     * Maximize minimize inline gallery.
     * @category lGPublicMethods
     */
    LightGallery.prototype.toggleMaximize = function () {
      var _this = this;
      this.getElementById('lg-maximize').on('click.lg', function () {
        _this.$container.toggleClass('lg-inline');
        _this.refreshOnResize();
      });
    };
    LightGallery.prototype.invalidateItems = function () {
      for (var index = 0; index < this.items.length; index++) {
        var element = this.items[index];
        var $element = $LG(element);
        $element.off("click.lgcustom-item-" + $element.attr('data-lg-id'));
      }
    };
    LightGallery.prototype.manageCloseGallery = function () {
      var _this = this;
      if (!this.settings.closable) return;
      var mousedown = false;
      this.getElementById('lg-close').on('click.lg', function () {
        _this.closeGallery();
      });
      if (this.settings.closeOnTap) {
        // If you drag the slide and release outside gallery gets close on chrome
        // for preventing this check mousedown and mouseup happened on .lg-item or lg-outer
        this.outer.on('mousedown.lg', function (e) {
          var target = $LG(e.target);
          if (_this.isSlideElement(target)) {
            mousedown = true;
          } else {
            mousedown = false;
          }
        });
        this.outer.on('mousemove.lg', function () {
          mousedown = false;
        });
        this.outer.on('mouseup.lg', function (e) {
          var target = $LG(e.target);
          if (_this.isSlideElement(target) && mousedown) {
            if (!_this.outer.hasClass('lg-dragging')) {
              _this.closeGallery();
            }
          }
        });
      }
    };
    /**
     * Close lightGallery if it is opened.
     *
     * @description If closable is false in the settings, you need to pass true via closeGallery method to force close gallery
     * @return returns the estimated time to close gallery completely including the close animation duration
     * @category lGPublicMethods
     * @example
     *  const plugin = lightGallery();
     *  plugin.closeGallery();
     *
     */
    LightGallery.prototype.closeGallery = function (force) {
      var _this = this;
      if (!this.lgOpened || !this.settings.closable && !force) {
        return 0;
      }
      this.LGel.trigger(lGEvents.beforeClose);
      $LG(window).scrollTop(this.prevScrollTop);
      var currentItem = this.items[this.index];
      var transform;
      if (this.zoomFromOrigin && currentItem) {
        var _a = this.mediaContainerPosition,
          top_4 = _a.top,
          bottom = _a.bottom;
        var _b = this.galleryItems[this.index],
          __slideVideoInfo = _b.__slideVideoInfo,
          poster = _b.poster;
        var imageSize = utils.getSize(currentItem, this.outer, top_4 + bottom, __slideVideoInfo && poster && this.settings.videoMaxSize);
        transform = utils.getTransform(currentItem, this.outer, top_4, bottom, imageSize);
      }
      if (this.zoomFromOrigin && transform) {
        this.outer.addClass('lg-closing lg-zoom-from-image');
        this.getSlideItem(this.index).addClass('lg-start-end-progress').css('transition-duration', this.settings.startAnimationDuration + 'ms').css('transform', transform);
      } else {
        this.outer.addClass('lg-hide-items');
        // lg-zoom-from-image is used for setting the opacity to 1 if zoomFromOrigin is true
        // If the closing item doesn't have the lg-size attribute, remove this class to avoid the closing css conflicts
        this.outer.removeClass('lg-zoom-from-image');
      }
      // Unbind all events added by lightGallery
      // @todo
      //this.$el.off('.lg.tm');
      this.destroyModules();
      this.lGalleryOn = false;
      this.isDummyImageRemoved = false;
      this.zoomFromOrigin = this.settings.zoomFromOrigin;
      clearTimeout(this.hideBarTimeout);
      this.hideBarTimeout = false;
      $LG('html').removeClass('lg-on');
      this.outer.removeClass('lg-visible lg-components-open');
      // Resetting opacity to 0 isd required as  vertical swipe to close function adds inline opacity.
      this.$backdrop.removeClass('in').css('opacity', 0);
      var removeTimeout = this.zoomFromOrigin && transform ? Math.max(this.settings.startAnimationDuration, this.settings.backdropDuration) : this.settings.backdropDuration;
      this.$container.removeClass('lg-show-in');
      // Once the closign animation is completed and gallery is invisible
      setTimeout(function () {
        if (_this.zoomFromOrigin && transform) {
          _this.outer.removeClass('lg-zoom-from-image');
        }
        _this.$container.removeClass('lg-show');
        // Need to remove inline opacity as it is used in the stylesheet as well
        _this.$backdrop.removeAttr('style').css('transition-duration', _this.settings.backdropDuration + 'ms');
        _this.outer.removeClass("lg-closing " + _this.settings.startClass);
        _this.getSlideItem(_this.index).removeClass('lg-start-end-progress');
        _this.$inner.empty();
        if (_this.lgOpened) {
          _this.LGel.trigger(lGEvents.afterClose, {
            instance: _this
          });
        }
        if (_this.outer.get()) {
          _this.outer.get().blur();
        }
        _this.lgOpened = false;
      }, removeTimeout + 100);
      return removeTimeout + 100;
    };
    LightGallery.prototype.initModules = function () {
      this.plugins.forEach(function (module) {
        try {
          module.init();
        } catch (err) {
          console.warn("lightGallery:- make sure lightGallery module is properly initiated");
        }
      });
    };
    LightGallery.prototype.destroyModules = function (destroy) {
      this.plugins.forEach(function (module) {
        try {
          if (destroy) {
            module.destroy();
          } else {
            module.closeGallery && module.closeGallery();
          }
        } catch (err) {
          console.warn("lightGallery:- make sure lightGallery module is properly destroyed");
        }
      });
    };
    /**
     * Refresh lightGallery with new set of children.
     *
     * @description This is useful to update the gallery when the child elements are changed without calling destroy method.
     *
     * If you are using dynamic mode, you can pass the modified array of dynamicEl as the first parameter to refresh the dynamic gallery
     * @see <a href="/demos/dynamic-mode/">Demo</a>
     * @category lGPublicMethods
     * @example
     *  const plugin = lightGallery();
     *  // Delete or add children, then call
     *  plugin.refresh();
     *
     */
    LightGallery.prototype.refresh = function (galleryItems) {
      if (!this.settings.dynamic) {
        this.invalidateItems();
      }
      if (galleryItems) {
        this.galleryItems = galleryItems;
      } else {
        this.galleryItems = this.getItems();
      }
      this.updateControls();
      this.openGalleryOnItemClick();
      this.LGel.trigger(lGEvents.updateSlides);
    };
    LightGallery.prototype.updateControls = function () {
      this.addSlideVideoInfo(this.galleryItems);
      this.updateCounterTotal();
      this.manageSingleSlideClassName();
    };
    /**
     * Destroy lightGallery.
     * Destroy lightGallery and its plugin instances completely
     *
     * @description This method also calls CloseGallery function internally. Returns the time takes to completely close and destroy the instance.
     * In case if you want to re-initialize lightGallery right after destroying it, initialize it only once the destroy process is completed.
     * You can use refresh method most of the times.
     * @category lGPublicMethods
     * @example
     *  const plugin = lightGallery();
     *  plugin.destroy();
     *
     */
    LightGallery.prototype.destroy = function () {
      var _this = this;
      var closeTimeout = this.closeGallery(true);
      setTimeout(function () {
        _this.destroyModules(true);
        if (!_this.settings.dynamic) {
          _this.invalidateItems();
        }
        $LG(window).off(".lg.global" + _this.lgId);
        _this.LGel.off('.lg');
        _this.$container.remove();
      }, closeTimeout);
      return closeTimeout;
    };
    return LightGallery;
  }();
  function lightGallery(el, options) {
    return new LightGallery(el, options);
  }
  return lightGallery;
});

/*!
 * lightgallery | 2.4.0-beta.0 | December 12th 2021
 * http://www.lightgalleryjs.com/
 * Copyright (c) 2020 Sachin Neravath;
 * @license GPLv3
 */

(function (global, factory) {
  (typeof exports === "undefined" ? "undefined" : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.lgThumbnail = factory());
})(void 0, function () {
  'use strict';

  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
    Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */
  var _assign2 = function __assign() {
    _assign2 = Object.assign || function __assign(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
      return t;
    };
    return _assign2.apply(this, arguments);
  };
  var thumbnailsSettings = {
    thumbnail: true,
    animateThumb: true,
    currentPagerPosition: 'middle',
    alignThumbnails: 'middle',
    thumbWidth: 100,
    thumbHeight: '80px',
    thumbMargin: 5,
    appendThumbnailsTo: '.lg-components',
    toggleThumb: false,
    enableThumbDrag: true,
    enableThumbSwipe: true,
    thumbnailSwipeThreshold: 10,
    loadYouTubeThumbnail: true,
    youTubeThumbSize: 1,
    thumbnailPluginStrings: {
      toggleThumbnails: 'Toggle thumbnails'
    }
  };

  /**
   * List of lightGallery events
   * All events should be documented here
   * Below interfaces are used to build the website documentations
   * */
  var lGEvents = {
    afterAppendSlide: 'lgAfterAppendSlide',
    init: 'lgInit',
    hasVideo: 'lgHasVideo',
    containerResize: 'lgContainerResize',
    updateSlides: 'lgUpdateSlides',
    afterAppendSubHtml: 'lgAfterAppendSubHtml',
    beforeOpen: 'lgBeforeOpen',
    afterOpen: 'lgAfterOpen',
    slideItemLoad: 'lgSlideItemLoad',
    beforeSlide: 'lgBeforeSlide',
    afterSlide: 'lgAfterSlide',
    posterClick: 'lgPosterClick',
    dragStart: 'lgDragStart',
    dragMove: 'lgDragMove',
    dragEnd: 'lgDragEnd',
    beforeNextSlide: 'lgBeforeNextSlide',
    beforePrevSlide: 'lgBeforePrevSlide',
    beforeClose: 'lgBeforeClose',
    afterClose: 'lgAfterClose',
    rotateLeft: 'lgRotateLeft',
    rotateRight: 'lgRotateRight',
    flipHorizontal: 'lgFlipHorizontal',
    flipVertical: 'lgFlipVertical',
    autoplay: 'lgAutoplay',
    autoplayStart: 'lgAutoplayStart',
    autoplayStop: 'lgAutoplayStop'
  };
  var Thumbnail = /** @class */function () {
    function Thumbnail(instance, $LG) {
      this.thumbOuterWidth = 0;
      this.thumbTotalWidth = 0;
      this.translateX = 0;
      this.thumbClickable = false;
      // get lightGallery core plugin instance
      this.core = instance;
      this.$LG = $LG;
      return this;
    }
    Thumbnail.prototype.init = function () {
      // extend module default settings with lightGallery core settings
      this.settings = _assign2(_assign2({}, thumbnailsSettings), this.core.settings);
      this.thumbOuterWidth = 0;
      this.thumbTotalWidth = this.core.galleryItems.length * (this.settings.thumbWidth + this.settings.thumbMargin);
      // Thumbnail animation value
      this.translateX = 0;
      this.setAnimateThumbStyles();
      if (!this.core.settings.allowMediaOverlap) {
        this.settings.toggleThumb = false;
      }
      if (this.settings.thumbnail) {
        this.build();
        if (this.settings.animateThumb) {
          if (this.settings.enableThumbDrag) {
            this.enableThumbDrag();
          }
          if (this.settings.enableThumbSwipe) {
            this.enableThumbSwipe();
          }
          this.thumbClickable = false;
        } else {
          this.thumbClickable = true;
        }
        this.toggleThumbBar();
        this.thumbKeyPress();
      }
    };
    Thumbnail.prototype.build = function () {
      var _this = this;
      this.setThumbMarkup();
      this.manageActiveClassOnSlideChange();
      this.$lgThumb.first().on('click.lg touchend.lg', function (e) {
        var $target = _this.$LG(e.target);
        if (!$target.hasAttribute('data-lg-item-id')) {
          return;
        }
        setTimeout(function () {
          // In IE9 and bellow touch does not support
          // Go to slide if browser does not support css transitions
          if (_this.thumbClickable && !_this.core.lgBusy) {
            var index = parseInt($target.attr('data-lg-item-id'));
            _this.core.slide(index, false, true, false);
          }
        }, 50);
      });
      this.core.LGel.on(lGEvents.beforeSlide + ".thumb", function (event) {
        var index = event.detail.index;
        _this.animateThumb(index);
      });
      this.core.LGel.on(lGEvents.beforeOpen + ".thumb", function () {
        _this.thumbOuterWidth = _this.core.outer.get().offsetWidth;
      });
      this.core.LGel.on(lGEvents.updateSlides + ".thumb", function () {
        _this.rebuildThumbnails();
      });
      this.core.LGel.on(lGEvents.containerResize + ".thumb", function () {
        if (!_this.core.lgOpened) return;
        setTimeout(function () {
          _this.thumbOuterWidth = _this.core.outer.get().offsetWidth;
          _this.animateThumb(_this.core.index);
          _this.thumbOuterWidth = _this.core.outer.get().offsetWidth;
        }, 50);
      });
    };
    Thumbnail.prototype.setThumbMarkup = function () {
      var thumbOuterClassNames = 'lg-thumb-outer ';
      if (this.settings.alignThumbnails) {
        thumbOuterClassNames += "lg-thumb-align-" + this.settings.alignThumbnails;
      }
      var html = "<div class=\"" + thumbOuterClassNames + "\">\n        <div class=\"lg-thumb lg-group\">\n        </div>\n        </div>";
      this.core.outer.addClass('lg-has-thumb');
      if (this.settings.appendThumbnailsTo === '.lg-components') {
        this.core.$lgComponents.append(html);
      } else {
        this.core.outer.append(html);
      }
      this.$thumbOuter = this.core.outer.find('.lg-thumb-outer').first();
      this.$lgThumb = this.core.outer.find('.lg-thumb').first();
      if (this.settings.animateThumb) {
        this.core.outer.find('.lg-thumb').css('transition-duration', this.core.settings.speed + 'ms').css('width', this.thumbTotalWidth + 'px').css('position', 'relative');
      }
      this.setThumbItemHtml(this.core.galleryItems);
    };
    Thumbnail.prototype.enableThumbDrag = function () {
      var _this = this;
      var thumbDragUtils = {
        cords: {
          startX: 0,
          endX: 0
        },
        isMoved: false,
        newTranslateX: 0,
        startTime: new Date(),
        endTime: new Date(),
        touchMoveTime: 0
      };
      var isDragging = false;
      this.$thumbOuter.addClass('lg-grab');
      this.core.outer.find('.lg-thumb').first().on('mousedown.lg.thumb', function (e) {
        if (_this.thumbTotalWidth > _this.thumbOuterWidth) {
          // execute only on .lg-object
          e.preventDefault();
          thumbDragUtils.cords.startX = e.pageX;
          thumbDragUtils.startTime = new Date();
          _this.thumbClickable = false;
          isDragging = true;
          // ** Fix for webkit cursor issue https://code.google.com/p/chromium/issues/detail?id=26723
          _this.core.outer.get().scrollLeft += 1;
          _this.core.outer.get().scrollLeft -= 1;
          // *
          _this.$thumbOuter.removeClass('lg-grab').addClass('lg-grabbing');
        }
      });
      this.$LG(window).on("mousemove.lg.thumb.global" + this.core.lgId, function (e) {
        if (!_this.core.lgOpened) return;
        if (isDragging) {
          thumbDragUtils.cords.endX = e.pageX;
          thumbDragUtils = _this.onThumbTouchMove(thumbDragUtils);
        }
      });
      this.$LG(window).on("mouseup.lg.thumb.global" + this.core.lgId, function () {
        if (!_this.core.lgOpened) return;
        if (thumbDragUtils.isMoved) {
          thumbDragUtils = _this.onThumbTouchEnd(thumbDragUtils);
        } else {
          _this.thumbClickable = true;
        }
        if (isDragging) {
          isDragging = false;
          _this.$thumbOuter.removeClass('lg-grabbing').addClass('lg-grab');
        }
      });
    };
    Thumbnail.prototype.enableThumbSwipe = function () {
      var _this = this;
      var thumbDragUtils = {
        cords: {
          startX: 0,
          endX: 0
        },
        isMoved: false,
        newTranslateX: 0,
        startTime: new Date(),
        endTime: new Date(),
        touchMoveTime: 0
      };
      this.$lgThumb.on('touchstart.lg', function (e) {
        if (_this.thumbTotalWidth > _this.thumbOuterWidth) {
          e.preventDefault();
          thumbDragUtils.cords.startX = e.targetTouches[0].pageX;
          _this.thumbClickable = false;
          thumbDragUtils.startTime = new Date();
        }
      });
      this.$lgThumb.on('touchmove.lg', function (e) {
        if (_this.thumbTotalWidth > _this.thumbOuterWidth) {
          e.preventDefault();
          thumbDragUtils.cords.endX = e.targetTouches[0].pageX;
          thumbDragUtils = _this.onThumbTouchMove(thumbDragUtils);
        }
      });
      this.$lgThumb.on('touchend.lg', function () {
        if (thumbDragUtils.isMoved) {
          thumbDragUtils = _this.onThumbTouchEnd(thumbDragUtils);
        } else {
          _this.thumbClickable = true;
        }
      });
    };
    // Rebuild thumbnails
    Thumbnail.prototype.rebuildThumbnails = function () {
      var _this = this;
      // Remove transitions
      this.$thumbOuter.addClass('lg-rebuilding-thumbnails');
      setTimeout(function () {
        _this.thumbTotalWidth = _this.core.galleryItems.length * (_this.settings.thumbWidth + _this.settings.thumbMargin);
        _this.$lgThumb.css('width', _this.thumbTotalWidth + 'px');
        _this.$lgThumb.empty();
        _this.setThumbItemHtml(_this.core.galleryItems);
        _this.animateThumb(_this.core.index);
      }, 50);
      setTimeout(function () {
        _this.$thumbOuter.removeClass('lg-rebuilding-thumbnails');
      }, 200);
    };
    // @ts-check
    Thumbnail.prototype.setTranslate = function (value) {
      this.$lgThumb.css('transform', 'translate3d(-' + value + 'px, 0px, 0px)');
    };
    Thumbnail.prototype.getPossibleTransformX = function (left) {
      if (left > this.thumbTotalWidth - this.thumbOuterWidth) {
        left = this.thumbTotalWidth - this.thumbOuterWidth;
      }
      if (left < 0) {
        left = 0;
      }
      return left;
    };
    Thumbnail.prototype.animateThumb = function (index) {
      this.$lgThumb.css('transition-duration', this.core.settings.speed + 'ms');
      if (this.settings.animateThumb) {
        var position = 0;
        switch (this.settings.currentPagerPosition) {
          case 'left':
            position = 0;
            break;
          case 'middle':
            position = this.thumbOuterWidth / 2 - this.settings.thumbWidth / 2;
            break;
          case 'right':
            position = this.thumbOuterWidth - this.settings.thumbWidth;
        }
        this.translateX = (this.settings.thumbWidth + this.settings.thumbMargin) * index - 1 - position;
        if (this.translateX > this.thumbTotalWidth - this.thumbOuterWidth) {
          this.translateX = this.thumbTotalWidth - this.thumbOuterWidth;
        }
        if (this.translateX < 0) {
          this.translateX = 0;
        }
        this.setTranslate(this.translateX);
      }
    };
    Thumbnail.prototype.onThumbTouchMove = function (thumbDragUtils) {
      thumbDragUtils.newTranslateX = this.translateX;
      thumbDragUtils.isMoved = true;
      thumbDragUtils.touchMoveTime = new Date().valueOf();
      thumbDragUtils.newTranslateX -= thumbDragUtils.cords.endX - thumbDragUtils.cords.startX;
      thumbDragUtils.newTranslateX = this.getPossibleTransformX(thumbDragUtils.newTranslateX);
      // move current slide
      this.setTranslate(thumbDragUtils.newTranslateX);
      this.$thumbOuter.addClass('lg-dragging');
      return thumbDragUtils;
    };
    Thumbnail.prototype.onThumbTouchEnd = function (thumbDragUtils) {
      thumbDragUtils.isMoved = false;
      thumbDragUtils.endTime = new Date();
      this.$thumbOuter.removeClass('lg-dragging');
      var touchDuration = thumbDragUtils.endTime.valueOf() - thumbDragUtils.startTime.valueOf();
      var distanceXnew = thumbDragUtils.cords.endX - thumbDragUtils.cords.startX;
      var speedX = Math.abs(distanceXnew) / touchDuration;
      // Some magical numbers
      // Can be improved
      if (speedX > 0.15 && thumbDragUtils.endTime.valueOf() - thumbDragUtils.touchMoveTime < 30) {
        speedX += 1;
        if (speedX > 2) {
          speedX += 1;
        }
        speedX = speedX + speedX * (Math.abs(distanceXnew) / this.thumbOuterWidth);
        this.$lgThumb.css('transition-duration', Math.min(speedX - 1, 2) + 'settings');
        distanceXnew = distanceXnew * speedX;
        this.translateX = this.getPossibleTransformX(this.translateX - distanceXnew);
        this.setTranslate(this.translateX);
      } else {
        this.translateX = thumbDragUtils.newTranslateX;
      }
      if (Math.abs(thumbDragUtils.cords.endX - thumbDragUtils.cords.startX) < this.settings.thumbnailSwipeThreshold) {
        this.thumbClickable = true;
      }
      return thumbDragUtils;
    };
    Thumbnail.prototype.getThumbHtml = function (thumb, index) {
      var slideVideoInfo = this.core.galleryItems[index].__slideVideoInfo || {};
      var thumbImg;
      if (slideVideoInfo.youtube) {
        if (this.settings.loadYouTubeThumbnail) {
          thumbImg = '//img.youtube.com/vi/' + slideVideoInfo.youtube[1] + '/' + this.settings.youTubeThumbSize + '.jpg';
        } else {
          thumbImg = thumb;
        }
      } else {
        thumbImg = thumb;
      }
      return "<div data-lg-item-id=\"" + index + "\" class=\"lg-thumb-item " + (index === this.core.index ? ' active' : '') + "\" \n        style=\"width:" + this.settings.thumbWidth + "px; height: " + this.settings.thumbHeight + ";\n            margin-right: " + this.settings.thumbMargin + "px;\">\n            <img data-lg-item-id=\"" + index + "\" src=\"" + thumbImg + "\" />\n        </div>";
    };
    Thumbnail.prototype.getThumbItemHtml = function (items) {
      var thumbList = '';
      for (var i = 0; i < items.length; i++) {
        thumbList += this.getThumbHtml(items[i].thumb, i);
      }
      return thumbList;
    };
    Thumbnail.prototype.setThumbItemHtml = function (items) {
      var thumbList = this.getThumbItemHtml(items);
      this.$lgThumb.html(thumbList);
    };
    Thumbnail.prototype.setAnimateThumbStyles = function () {
      if (this.settings.animateThumb) {
        this.core.outer.addClass('lg-animate-thumb');
      }
    };
    // Manage thumbnail active calss
    Thumbnail.prototype.manageActiveClassOnSlideChange = function () {
      var _this = this;
      // manage active class for thumbnail
      this.core.LGel.on(lGEvents.beforeSlide + ".thumb", function (event) {
        var $thumb = _this.core.outer.find('.lg-thumb-item');
        var index = event.detail.index;
        $thumb.removeClass('active');
        $thumb.eq(index).addClass('active');
      });
    };
    // Toggle thumbnail bar
    Thumbnail.prototype.toggleThumbBar = function () {
      var _this = this;
      if (this.settings.toggleThumb) {
        this.core.outer.addClass('lg-can-toggle');
        this.core.$toolbar.append('<button type="button" aria-label="' + this.settings.thumbnailPluginStrings['toggleThumbnails'] + '" class="lg-toggle-thumb lg-icon"></button>');
        this.core.outer.find('.lg-toggle-thumb').first().on('click.lg', function () {
          _this.core.outer.toggleClass('lg-components-open');
        });
      }
    };
    Thumbnail.prototype.thumbKeyPress = function () {
      var _this = this;
      this.$LG(window).on("keydown.lg.thumb.global" + this.core.lgId, function (e) {
        if (!_this.core.lgOpened || !_this.settings.toggleThumb) return;
        if (e.keyCode === 38) {
          e.preventDefault();
          _this.core.outer.addClass('lg-components-open');
        } else if (e.keyCode === 40) {
          e.preventDefault();
          _this.core.outer.removeClass('lg-components-open');
        }
      });
    };
    Thumbnail.prototype.destroy = function () {
      if (this.settings.thumbnail) {
        this.$LG(window).off(".lg.thumb.global" + this.core.lgId);
        this.core.LGel.off('.lg.thumb');
        this.core.LGel.off('.thumb');
        this.$thumbOuter.remove();
        this.core.outer.removeClass('lg-has-thumb');
      }
    };
    return Thumbnail;
  }();
  return Thumbnail;
});

/*!
 * lightgallery | 2.4.0-beta.0 | December 12th 2021
 * http://www.lightgalleryjs.com/
 * Copyright (c) 2020 Sachin Neravath;
 * @license GPLv3
 */

(function (global, factory) {
  (typeof exports === "undefined" ? "undefined" : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.lgZoom = factory());
})(void 0, function () {
  'use strict';

  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
    Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */
  var _assign3 = function __assign() {
    _assign3 = Object.assign || function __assign(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
      return t;
    };
    return _assign3.apply(this, arguments);
  };
  var zoomSettings = {
    scale: 1,
    zoom: true,
    actualSize: true,
    showZoomInOutIcons: false,
    actualSizeIcons: {
      zoomIn: 'lg-zoom-in',
      zoomOut: 'lg-zoom-out'
    },
    enableZoomAfter: 300,
    zoomPluginStrings: {
      zoomIn: 'Zoom in',
      zoomOut: 'Zoom out',
      viewActualSize: 'View actual size'
    }
  };

  /**
   * List of lightGallery events
   * All events should be documented here
   * Below interfaces are used to build the website documentations
   * */
  var lGEvents = {
    afterAppendSlide: 'lgAfterAppendSlide',
    init: 'lgInit',
    hasVideo: 'lgHasVideo',
    containerResize: 'lgContainerResize',
    updateSlides: 'lgUpdateSlides',
    afterAppendSubHtml: 'lgAfterAppendSubHtml',
    beforeOpen: 'lgBeforeOpen',
    afterOpen: 'lgAfterOpen',
    slideItemLoad: 'lgSlideItemLoad',
    beforeSlide: 'lgBeforeSlide',
    afterSlide: 'lgAfterSlide',
    posterClick: 'lgPosterClick',
    dragStart: 'lgDragStart',
    dragMove: 'lgDragMove',
    dragEnd: 'lgDragEnd',
    beforeNextSlide: 'lgBeforeNextSlide',
    beforePrevSlide: 'lgBeforePrevSlide',
    beforeClose: 'lgBeforeClose',
    afterClose: 'lgAfterClose',
    rotateLeft: 'lgRotateLeft',
    rotateRight: 'lgRotateRight',
    flipHorizontal: 'lgFlipHorizontal',
    flipVertical: 'lgFlipVertical',
    autoplay: 'lgAutoplay',
    autoplayStart: 'lgAutoplayStart',
    autoplayStop: 'lgAutoplayStop'
  };
  var Zoom = /** @class */function () {
    function Zoom(instance, $LG) {
      // get lightGallery core plugin instance
      this.core = instance;
      this.$LG = $LG;
      this.settings = _assign3(_assign3({}, zoomSettings), this.core.settings);
      return this;
    }
    // Append Zoom controls. Actual size, Zoom-in, Zoom-out
    Zoom.prototype.buildTemplates = function () {
      var zoomIcons = this.settings.showZoomInOutIcons ? "<button id=\"" + this.core.getIdName('lg-zoom-in') + "\" type=\"button\" aria-label=\"" + this.settings.zoomPluginStrings['zoomIn'] + "\" class=\"lg-zoom-in lg-icon\"></button><button id=\"" + this.core.getIdName('lg-zoom-out') + "\" type=\"button\" aria-label=\"" + this.settings.zoomPluginStrings['zoomIn'] + "\" class=\"lg-zoom-out lg-icon\"></button>" : '';
      if (this.settings.actualSize) {
        zoomIcons += "<button id=\"" + this.core.getIdName('lg-actual-size') + "\" type=\"button\" aria-label=\"" + this.settings.zoomPluginStrings['viewActualSize'] + "\" class=\"" + this.settings.actualSizeIcons.zoomIn + " lg-icon\"></button>";
      }
      this.core.outer.addClass('lg-use-transition-for-zoom');
      this.core.$toolbar.first().append(zoomIcons);
    };
    /**
     * @desc Enable zoom option only once the image is completely loaded
     * If zoomFromOrigin is true, Zoom is enabled once the dummy image has been inserted
     *
     * Zoom styles are defined under lg-zoomable CSS class.
     */
    Zoom.prototype.enableZoom = function (event) {
      var _this = this;
      // delay will be 0 except first time
      var _speed = this.settings.enableZoomAfter + event.detail.delay;
      // set _speed value 0 if gallery opened from direct url and if it is first slide
      if (this.$LG('body').first().hasClass('lg-from-hash') && event.detail.delay) {
        // will execute only once
        _speed = 0;
      } else {
        // Remove lg-from-hash to enable starting animation.
        this.$LG('body').first().removeClass('lg-from-hash');
      }
      this.zoomableTimeout = setTimeout(function () {
        if (!_this.isImageSlide()) {
          return;
        }
        _this.core.getSlideItem(event.detail.index).addClass('lg-zoomable');
        if (event.detail.index === _this.core.index) {
          _this.setZoomEssentials();
        }
      }, _speed + 30);
    };
    Zoom.prototype.enableZoomOnSlideItemLoad = function () {
      // Add zoomable class
      this.core.LGel.on(lGEvents.slideItemLoad + ".zoom", this.enableZoom.bind(this));
    };
    Zoom.prototype.getModifier = function (rotateValue, axis, el) {
      var originalRotate = rotateValue;
      rotateValue = Math.abs(rotateValue);
      var transformValues = this.getCurrentTransform(el);
      if (!transformValues) {
        return 1;
      }
      var modifier = 1;
      if (axis === 'X') {
        var flipHorizontalValue = Math.sign(parseFloat(transformValues[0]));
        if (rotateValue === 0 || rotateValue === 180) {
          modifier = 1;
        } else if (rotateValue === 90) {
          if (originalRotate === -90 && flipHorizontalValue === 1 || originalRotate === 90 && flipHorizontalValue === -1) {
            modifier = -1;
          } else {
            modifier = 1;
          }
        }
        modifier = modifier * flipHorizontalValue;
      } else {
        var flipVerticalValue = Math.sign(parseFloat(transformValues[3]));
        if (rotateValue === 0 || rotateValue === 180) {
          modifier = 1;
        } else if (rotateValue === 90) {
          var sinX = parseFloat(transformValues[1]);
          var sinMinusX = parseFloat(transformValues[2]);
          modifier = Math.sign(sinX * sinMinusX * originalRotate * flipVerticalValue);
        }
        modifier = modifier * flipVerticalValue;
      }
      return modifier;
    };
    Zoom.prototype.getImageSize = function ($image, rotateValue, axis) {
      var imageSizes = {
        y: 'offsetHeight',
        x: 'offsetWidth'
      };
      if (Math.abs(rotateValue) === 90) {
        // Swap axis
        if (axis === 'x') {
          axis = 'y';
        } else {
          axis = 'x';
        }
      }
      return $image[imageSizes[axis]];
    };
    Zoom.prototype.getDragCords = function (e, rotateValue) {
      if (rotateValue === 90) {
        return {
          x: e.pageY,
          y: e.pageX
        };
      } else {
        return {
          x: e.pageX,
          y: e.pageY
        };
      }
    };
    Zoom.prototype.getSwipeCords = function (e, rotateValue) {
      var x = e.targetTouches[0].pageX;
      var y = e.targetTouches[0].pageY;
      if (rotateValue === 90) {
        return {
          x: y,
          y: x
        };
      } else {
        return {
          x: x,
          y: y
        };
      }
    };
    Zoom.prototype.getDragAllowedAxises = function (rotateValue, scale) {
      scale = scale || this.scale || 1;
      var allowY = this.imageYSize * scale > this.containerRect.height;
      var allowX = this.imageXSize * scale > this.containerRect.width;
      if (rotateValue === 90) {
        return {
          allowX: allowY,
          allowY: allowX
        };
      } else {
        return {
          allowX: allowX,
          allowY: allowY
        };
      }
    };
    /**
     *
     * @param {Element} el
     * @return matrix(cos(X), sin(X), -sin(X), cos(X), 0, 0);
     * Get the current transform value
     */
    Zoom.prototype.getCurrentTransform = function (el) {
      if (!el) {
        return;
      }
      var st = window.getComputedStyle(el, null);
      var tm = st.getPropertyValue('-webkit-transform') || st.getPropertyValue('-moz-transform') || st.getPropertyValue('-ms-transform') || st.getPropertyValue('-o-transform') || st.getPropertyValue('transform') || 'none';
      if (tm !== 'none') {
        return tm.split('(')[1].split(')')[0].split(',');
      }
      return;
    };
    Zoom.prototype.getCurrentRotation = function (el) {
      if (!el) {
        return 0;
      }
      var values = this.getCurrentTransform(el);
      if (values) {
        return Math.round(Math.atan2(parseFloat(values[1]), parseFloat(values[0])) * (180 / Math.PI));
        // If you want rotate in 360
        //return (angle < 0 ? angle + 360 : angle);
      }

      return 0;
    };
    Zoom.prototype.setZoomEssentials = function () {
      var $image = this.core.getSlideItem(this.core.index).find('.lg-image').first();
      var rotateEl = this.core.getSlideItem(this.core.index).find('.lg-img-rotate').first().get();
      this.rotateValue = this.getCurrentRotation(rotateEl);
      this.imageYSize = this.getImageSize($image.get(), this.rotateValue, 'y');
      this.imageXSize = this.getImageSize($image.get(), this.rotateValue, 'x');
      this.containerRect = this.core.outer.get().getBoundingClientRect();
      this.modifierX = this.getModifier(this.rotateValue, 'X', rotateEl);
      this.modifierY = this.getModifier(this.rotateValue, 'Y', rotateEl);
    };
    /**
     * @desc Image zoom
     * Translate the wrap and scale the image to get better user experience
     *
     * @param {String} scale - Zoom decrement/increment value
     */
    Zoom.prototype.zoomImage = function (scale) {
      // Find offset manually to avoid issue after zoom
      var offsetX = (this.containerRect.width - this.imageXSize) / 2 + this.containerRect.left;
      var _a = this.core.mediaContainerPosition,
        top = _a.top,
        bottom = _a.bottom;
      var topBottomSpacing = Math.abs(top - bottom) / 2;
      var offsetY = (this.containerRect.height - this.imageYSize - topBottomSpacing * this.modifierX) / 2 + this.scrollTop + this.containerRect.top;
      var originalX;
      var originalY;
      if (scale === 1) {
        this.positionChanged = false;
      }
      var dragAllowedAxises = this.getDragAllowedAxises(Math.abs(this.rotateValue), scale);
      var allowY = dragAllowedAxises.allowY,
        allowX = dragAllowedAxises.allowX;
      if (this.positionChanged) {
        originalX = this.left / (this.scale - 1);
        originalY = this.top / (this.scale - 1);
        this.pageX = Math.abs(originalX) + offsetX;
        this.pageY = Math.abs(originalY) + offsetY;
        this.positionChanged = false;
      }
      var possibleSwipeCords = this.getPossibleSwipeDragCords(this.rotateValue, scale);
      var _x = offsetX - this.pageX;
      var _y = offsetY - this.pageY;
      var x = (scale - 1) * _x;
      var y = (scale - 1) * _y;
      if (allowX) {
        if (this.isBeyondPossibleLeft(x, possibleSwipeCords.minX)) {
          x = possibleSwipeCords.minX;
        } else if (this.isBeyondPossibleRight(x, possibleSwipeCords.maxX)) {
          x = possibleSwipeCords.maxX;
        }
      } else {
        if (scale > 1) {
          if (x < possibleSwipeCords.minX) {
            x = possibleSwipeCords.minX;
          } else if (x > possibleSwipeCords.maxX) {
            x = possibleSwipeCords.maxX;
          }
        }
      }
      if (allowY) {
        if (this.isBeyondPossibleTop(y, possibleSwipeCords.minY)) {
          y = possibleSwipeCords.minY;
        } else if (this.isBeyondPossibleBottom(y, possibleSwipeCords.maxY)) {
          y = possibleSwipeCords.maxY;
        }
      } else {
        // If the translate value based on index of beyond the viewport, utilize the available space to prevent image being cut out
        if (scale > 1) {
          //If image goes beyond viewport top, use the minim possible translate value
          if (y < possibleSwipeCords.minY) {
            y = possibleSwipeCords.minY;
          } else if (y > possibleSwipeCords.maxY) {
            y = possibleSwipeCords.maxY;
          }
        }
      }
      this.setZoomStyles({
        x: x,
        y: y,
        scale: scale
      });
    };
    /**
     * @desc apply scale3d to image and translate to image wrap
     * @param {style} X,Y and scale
     */
    Zoom.prototype.setZoomStyles = function (style) {
      var $image = this.core.getSlideItem(this.core.index).find('.lg-image').first();
      var $dummyImage = this.core.outer.find('.lg-current .lg-dummy-img').first();
      var $imageWrap = $image.parent();
      this.scale = style.scale;
      $image.css('transform', 'scale3d(' + style.scale + ', ' + style.scale + ', 1)');
      $dummyImage.css('transform', 'scale3d(' + style.scale + ', ' + style.scale + ', 1)');
      var transform = 'translate3d(' + style.x + 'px, ' + style.y + 'px, 0)';
      $imageWrap.css('transform', transform);
      this.left = style.x;
      this.top = style.y;
    };
    /**
     * @param index - Index of the current slide
     * @param event - event will be available only if the function is called on clicking/taping the imags
     */
    Zoom.prototype.setActualSize = function (index, event) {
      var _this = this;
      // Allow zoom only on image
      if (!this.isImageSlide() || this.core.outer.hasClass('lg-first-slide-loading')) {
        return;
      }
      var scale = this.getCurrentImageActualSizeScale();
      if (this.core.outer.hasClass('lg-zoomed')) {
        this.scale = 1;
      } else {
        this.scale = this.getScale(scale);
      }
      this.setPageCords(event);
      this.beginZoom(this.scale);
      this.zoomImage(this.scale);
      setTimeout(function () {
        _this.core.outer.removeClass('lg-grabbing').addClass('lg-grab');
      }, 10);
    };
    Zoom.prototype.getNaturalWidth = function (index) {
      var $image = this.core.getSlideItem(index).find('.lg-image').first();
      var naturalWidth = this.core.galleryItems[index].width;
      return naturalWidth ? parseFloat(naturalWidth) : $image.get().naturalWidth;
    };
    Zoom.prototype.getActualSizeScale = function (naturalWidth, width) {
      var _scale;
      var scale;
      if (naturalWidth > width) {
        _scale = naturalWidth / width;
        scale = _scale || 2;
      } else {
        scale = 1;
      }
      return scale;
    };
    Zoom.prototype.getCurrentImageActualSizeScale = function () {
      var $image = this.core.getSlideItem(this.core.index).find('.lg-image').first();
      var width = $image.get().offsetWidth;
      var naturalWidth = this.getNaturalWidth(this.core.index) || width;
      return this.getActualSizeScale(naturalWidth, width);
    };
    Zoom.prototype.getPageCords = function (event) {
      var cords = {};
      if (event) {
        cords.x = event.pageX || event.targetTouches[0].pageX;
        cords.y = event.pageY || event.targetTouches[0].pageY;
      } else {
        var containerRect = this.core.outer.get().getBoundingClientRect();
        cords.x = containerRect.width / 2 + containerRect.left;
        cords.y = containerRect.height / 2 + this.scrollTop + containerRect.top;
      }
      return cords;
    };
    Zoom.prototype.setPageCords = function (event) {
      var pageCords = this.getPageCords(event);
      this.pageX = pageCords.x;
      this.pageY = pageCords.y;
    };
    // If true, zoomed - in else zoomed out
    Zoom.prototype.beginZoom = function (scale) {
      this.core.outer.removeClass('lg-zoom-drag-transition lg-zoom-dragging');
      if (scale > 1) {
        this.core.outer.addClass('lg-zoomed');
        var $actualSize = this.core.getElementById('lg-actual-size');
        $actualSize.removeClass(this.settings.actualSizeIcons.zoomIn).addClass(this.settings.actualSizeIcons.zoomOut);
      } else {
        this.resetZoom();
      }
      return scale > 1;
    };
    Zoom.prototype.getScale = function (scale) {
      var actualSizeScale = this.getCurrentImageActualSizeScale();
      if (scale < 1) {
        scale = 1;
      } else if (scale > actualSizeScale) {
        scale = actualSizeScale;
      }
      return scale;
    };
    Zoom.prototype.init = function () {
      var _this = this;
      if (!this.settings.zoom) {
        return;
      }
      this.buildTemplates();
      this.enableZoomOnSlideItemLoad();
      var tapped = null;
      this.core.outer.on('dblclick.lg', function (event) {
        if (!_this.$LG(event.target).hasClass('lg-image')) {
          return;
        }
        _this.setActualSize(_this.core.index, event);
      });
      this.core.outer.on('touchstart.lg', function (event) {
        var $target = _this.$LG(event.target);
        if (event.targetTouches.length === 1 && $target.hasClass('lg-image')) {
          if (!tapped) {
            tapped = setTimeout(function () {
              tapped = null;
            }, 300);
          } else {
            clearTimeout(tapped);
            tapped = null;
            event.preventDefault();
            _this.setActualSize(_this.core.index, event);
          }
        }
      });
      // Update zoom on resize and orientationchange
      this.core.LGel.on(lGEvents.containerResize + ".zoom " + lGEvents.rotateRight + ".zoom " + lGEvents.rotateLeft + ".zoom " + lGEvents.flipHorizontal + ".zoom " + lGEvents.flipVertical + ".zoom", function () {
        if (!_this.core.lgOpened || !_this.isImageSlide()) return;
        _this.setPageCords();
        _this.setZoomEssentials();
        _this.zoomImage(_this.scale);
      });
      // Update zoom on resize and orientationchange
      this.$LG(window).on("scroll.lg.zoom.global" + this.core.lgId, function () {
        if (!_this.core.lgOpened) return;
        _this.scrollTop = _this.$LG(window).scrollTop();
      });
      this.core.getElementById('lg-zoom-out').on('click.lg', function () {
        if (_this.core.outer.find('.lg-current .lg-image').get()) {
          _this.scale -= _this.settings.scale;
          _this.scale = _this.getScale(_this.scale);
          _this.beginZoom(_this.scale);
          _this.zoomImage(_this.scale);
        }
      });
      this.core.getElementById('lg-zoom-in').on('click.lg', function () {
        _this.zoomIn();
      });
      this.core.getElementById('lg-actual-size').on('click.lg', function () {
        _this.setActualSize(_this.core.index);
      });
      this.core.LGel.on(lGEvents.beforeOpen + ".zoom", function () {
        _this.core.outer.find('.lg-item').removeClass('lg-zoomable');
      });
      this.core.LGel.on(lGEvents.afterOpen + ".zoom", function () {
        _this.scrollTop = _this.$LG(window).scrollTop();
        // Set the initial value center
        _this.pageX = _this.core.outer.width() / 2;
        _this.pageY = _this.core.outer.height() / 2 + _this.scrollTop;
        _this.scale = 1;
      });
      // Reset zoom on slide change
      this.core.LGel.on(lGEvents.afterSlide + ".zoom", function (event) {
        var prevIndex = event.detail.prevIndex;
        _this.scale = 1;
        _this.positionChanged = false;
        _this.resetZoom(prevIndex);
        if (_this.isImageSlide()) {
          _this.setZoomEssentials();
        }
      });
      // Drag option after zoom
      this.zoomDrag();
      this.pinchZoom();
      this.zoomSwipe();
      // Store the zoomable timeout value just to clear it while closing
      this.zoomableTimeout = false;
      this.positionChanged = false;
    };
    Zoom.prototype.zoomIn = function (scale) {
      // Allow zoom only on image
      if (!this.isImageSlide()) {
        return;
      }
      if (scale) {
        this.scale = scale;
      } else {
        this.scale += this.settings.scale;
      }
      this.scale = this.getScale(this.scale);
      this.beginZoom(this.scale);
      this.zoomImage(this.scale);
    };
    // Reset zoom effect
    Zoom.prototype.resetZoom = function (index) {
      this.core.outer.removeClass('lg-zoomed lg-zoom-drag-transition');
      var $actualSize = this.core.getElementById('lg-actual-size');
      var $item = this.core.getSlideItem(index !== undefined ? index : this.core.index);
      $actualSize.removeClass(this.settings.actualSizeIcons.zoomOut).addClass(this.settings.actualSizeIcons.zoomIn);
      $item.find('.lg-img-wrap').first().removeAttr('style');
      $item.find('.lg-image').first().removeAttr('style');
      this.scale = 1;
      this.left = 0;
      this.top = 0;
      // Reset pagx pagy values to center
      this.setPageCords();
    };
    Zoom.prototype.getTouchDistance = function (e) {
      return Math.sqrt((e.targetTouches[0].pageX - e.targetTouches[1].pageX) * (e.targetTouches[0].pageX - e.targetTouches[1].pageX) + (e.targetTouches[0].pageY - e.targetTouches[1].pageY) * (e.targetTouches[0].pageY - e.targetTouches[1].pageY));
    };
    Zoom.prototype.pinchZoom = function () {
      var _this = this;
      var startDist = 0;
      var pinchStarted = false;
      var initScale = 1;
      var $item = this.core.getSlideItem(this.core.index);
      this.core.$inner.on('touchstart.lg', function (e) {
        $item = _this.core.getSlideItem(_this.core.index);
        if (!_this.isImageSlide()) {
          return;
        }
        if (e.targetTouches.length === 2 && !_this.core.outer.hasClass('lg-first-slide-loading') && (_this.$LG(e.target).hasClass('lg-item') || $item.get().contains(e.target))) {
          initScale = _this.scale || 1;
          _this.core.outer.removeClass('lg-zoom-drag-transition lg-zoom-dragging');
          _this.core.touchAction = 'pinch';
          startDist = _this.getTouchDistance(e);
        }
      });
      this.core.$inner.on('touchmove.lg', function (e) {
        if (e.targetTouches.length === 2 && _this.core.touchAction === 'pinch' && (_this.$LG(e.target).hasClass('lg-item') || $item.get().contains(e.target))) {
          e.preventDefault();
          var endDist = _this.getTouchDistance(e);
          var distance = startDist - endDist;
          if (!pinchStarted && Math.abs(distance) > 5) {
            pinchStarted = true;
          }
          if (pinchStarted) {
            _this.scale = Math.max(1, initScale + -distance * 0.008);
            _this.zoomImage(_this.scale);
          }
        }
      });
      this.core.$inner.on('touchend.lg', function (e) {
        if (_this.core.touchAction === 'pinch' && (_this.$LG(e.target).hasClass('lg-item') || $item.get().contains(e.target))) {
          pinchStarted = false;
          startDist = 0;
          if (_this.scale <= 1) {
            _this.resetZoom();
          } else {
            _this.scale = _this.getScale(_this.scale);
            _this.zoomImage(_this.scale);
            _this.core.outer.addClass('lg-zoomed');
          }
          _this.core.touchAction = undefined;
        }
      });
    };
    Zoom.prototype.touchendZoom = function (startCoords, endCoords, allowX, allowY, touchDuration, rotateValue) {
      var distanceXnew = endCoords.x - startCoords.x;
      var distanceYnew = endCoords.y - startCoords.y;
      var speedX = Math.abs(distanceXnew) / touchDuration + 1;
      var speedY = Math.abs(distanceYnew) / touchDuration + 1;
      if (speedX > 2) {
        speedX += 1;
      }
      if (speedY > 2) {
        speedY += 1;
      }
      distanceXnew = distanceXnew * speedX;
      distanceYnew = distanceYnew * speedY;
      var _LGel = this.core.getSlideItem(this.core.index).find('.lg-img-wrap').first();
      var distance = {};
      distance.x = this.left + distanceXnew * this.modifierX;
      distance.y = this.top + distanceYnew * this.modifierY;
      var possibleSwipeCords = this.getPossibleSwipeDragCords(rotateValue);
      if (Math.abs(distanceXnew) > 15 || Math.abs(distanceYnew) > 15) {
        if (allowY) {
          if (this.isBeyondPossibleTop(distance.y, possibleSwipeCords.minY)) {
            distance.y = possibleSwipeCords.minY;
          } else if (this.isBeyondPossibleBottom(distance.y, possibleSwipeCords.maxY)) {
            distance.y = possibleSwipeCords.maxY;
          }
        }
        if (allowX) {
          if (this.isBeyondPossibleLeft(distance.x, possibleSwipeCords.minX)) {
            distance.x = possibleSwipeCords.minX;
          } else if (this.isBeyondPossibleRight(distance.x, possibleSwipeCords.maxX)) {
            distance.x = possibleSwipeCords.maxX;
          }
        }
        if (allowY) {
          this.top = distance.y;
        } else {
          distance.y = this.top;
        }
        if (allowX) {
          this.left = distance.x;
        } else {
          distance.x = this.left;
        }
        this.setZoomSwipeStyles(_LGel, distance);
        this.positionChanged = true;
      }
    };
    Zoom.prototype.getZoomSwipeCords = function (startCoords, endCoords, allowX, allowY, possibleSwipeCords) {
      var distance = {};
      if (allowY) {
        distance.y = this.top + (endCoords.y - startCoords.y) * this.modifierY;
        if (this.isBeyondPossibleTop(distance.y, possibleSwipeCords.minY)) {
          var diffMinY = possibleSwipeCords.minY - distance.y;
          distance.y = possibleSwipeCords.minY - diffMinY / 6;
        } else if (this.isBeyondPossibleBottom(distance.y, possibleSwipeCords.maxY)) {
          var diffMaxY = distance.y - possibleSwipeCords.maxY;
          distance.y = possibleSwipeCords.maxY + diffMaxY / 6;
        }
      } else {
        distance.y = this.top;
      }
      if (allowX) {
        distance.x = this.left + (endCoords.x - startCoords.x) * this.modifierX;
        if (this.isBeyondPossibleLeft(distance.x, possibleSwipeCords.minX)) {
          var diffMinX = possibleSwipeCords.minX - distance.x;
          distance.x = possibleSwipeCords.minX - diffMinX / 6;
        } else if (this.isBeyondPossibleRight(distance.x, possibleSwipeCords.maxX)) {
          var difMaxX = distance.x - possibleSwipeCords.maxX;
          distance.x = possibleSwipeCords.maxX + difMaxX / 6;
        }
      } else {
        distance.x = this.left;
      }
      return distance;
    };
    Zoom.prototype.isBeyondPossibleLeft = function (x, minX) {
      return x >= minX;
    };
    Zoom.prototype.isBeyondPossibleRight = function (x, maxX) {
      return x <= maxX;
    };
    Zoom.prototype.isBeyondPossibleTop = function (y, minY) {
      return y >= minY;
    };
    Zoom.prototype.isBeyondPossibleBottom = function (y, maxY) {
      return y <= maxY;
    };
    Zoom.prototype.isImageSlide = function () {
      var currentItem = this.core.galleryItems[this.core.index];
      return this.core.getSlideType(currentItem) === 'image';
    };
    Zoom.prototype.getPossibleSwipeDragCords = function (rotateValue, scale) {
      var dataScale = scale || this.scale || 1;
      var elDataScale = Math.abs(dataScale);
      var _a = this.core.mediaContainerPosition,
        top = _a.top,
        bottom = _a.bottom;
      var topBottomSpacing = Math.abs(top - bottom) / 2;
      var minY = (this.imageYSize - this.containerRect.height) / 2 + topBottomSpacing * this.modifierX;
      var maxY = this.containerRect.height - this.imageYSize * elDataScale + minY;
      var minX = (this.imageXSize - this.containerRect.width) / 2;
      var maxX = this.containerRect.width - this.imageXSize * elDataScale + minX;
      var possibleSwipeCords = {
        minY: minY,
        maxY: maxY,
        minX: minX,
        maxX: maxX
      };
      if (Math.abs(rotateValue) === 90) {
        possibleSwipeCords = {
          minY: minX,
          maxY: maxX,
          minX: minY,
          maxX: maxY
        };
      }
      return possibleSwipeCords;
    };
    Zoom.prototype.setZoomSwipeStyles = function (LGel, distance) {
      LGel.css('transform', 'translate3d(' + distance.x + 'px, ' + distance.y + 'px, 0)');
    };
    Zoom.prototype.zoomSwipe = function () {
      var _this = this;
      var startCoords = {};
      var endCoords = {};
      var isMoved = false;
      // Allow x direction drag
      var allowX = false;
      // Allow Y direction drag
      var allowY = false;
      var startTime = new Date();
      var endTime = new Date();
      var possibleSwipeCords;
      var _LGel;
      var $item = this.core.getSlideItem(this.core.index);
      this.core.$inner.on('touchstart.lg', function (e) {
        // Allow zoom only on image
        if (!_this.isImageSlide()) {
          return;
        }
        $item = _this.core.getSlideItem(_this.core.index);
        if ((_this.$LG(e.target).hasClass('lg-item') || $item.get().contains(e.target)) && e.targetTouches.length === 1 && _this.core.outer.hasClass('lg-zoomed')) {
          e.preventDefault();
          startTime = new Date();
          _this.core.touchAction = 'zoomSwipe';
          _LGel = _this.core.getSlideItem(_this.core.index).find('.lg-img-wrap').first();
          var dragAllowedAxises = _this.getDragAllowedAxises(Math.abs(_this.rotateValue));
          allowY = dragAllowedAxises.allowY;
          allowX = dragAllowedAxises.allowX;
          if (allowX || allowY) {
            startCoords = _this.getSwipeCords(e, Math.abs(_this.rotateValue));
          }
          possibleSwipeCords = _this.getPossibleSwipeDragCords(_this.rotateValue);
          // reset opacity and transition duration
          _this.core.outer.addClass('lg-zoom-dragging lg-zoom-drag-transition');
        }
      });
      this.core.$inner.on('touchmove.lg', function (e) {
        if (e.targetTouches.length === 1 && _this.core.touchAction === 'zoomSwipe' && (_this.$LG(e.target).hasClass('lg-item') || $item.get().contains(e.target))) {
          e.preventDefault();
          _this.core.touchAction = 'zoomSwipe';
          endCoords = _this.getSwipeCords(e, Math.abs(_this.rotateValue));
          var distance = _this.getZoomSwipeCords(startCoords, endCoords, allowX, allowY, possibleSwipeCords);
          if (Math.abs(endCoords.x - startCoords.x) > 15 || Math.abs(endCoords.y - startCoords.y) > 15) {
            isMoved = true;
            _this.setZoomSwipeStyles(_LGel, distance);
          }
        }
      });
      this.core.$inner.on('touchend.lg', function (e) {
        if (_this.core.touchAction === 'zoomSwipe' && (_this.$LG(e.target).hasClass('lg-item') || $item.get().contains(e.target))) {
          _this.core.touchAction = undefined;
          _this.core.outer.removeClass('lg-zoom-dragging');
          if (!isMoved) {
            return;
          }
          isMoved = false;
          endTime = new Date();
          var touchDuration = endTime.valueOf() - startTime.valueOf();
          _this.touchendZoom(startCoords, endCoords, allowX, allowY, touchDuration, _this.rotateValue);
        }
      });
    };
    Zoom.prototype.zoomDrag = function () {
      var _this = this;
      var startCoords = {};
      var endCoords = {};
      var isDragging = false;
      var isMoved = false;
      // Allow x direction drag
      var allowX = false;
      // Allow Y direction drag
      var allowY = false;
      var startTime;
      var endTime;
      var possibleSwipeCords;
      var _LGel;
      this.core.outer.on('mousedown.lg.zoom', function (e) {
        // Allow zoom only on image
        if (!_this.isImageSlide()) {
          return;
        }
        var $item = _this.core.getSlideItem(_this.core.index);
        if (_this.$LG(e.target).hasClass('lg-item') || $item.get().contains(e.target)) {
          startTime = new Date();
          _LGel = _this.core.getSlideItem(_this.core.index).find('.lg-img-wrap').first();
          var dragAllowedAxises = _this.getDragAllowedAxises(Math.abs(_this.rotateValue));
          allowY = dragAllowedAxises.allowY;
          allowX = dragAllowedAxises.allowX;
          if (_this.core.outer.hasClass('lg-zoomed')) {
            if (_this.$LG(e.target).hasClass('lg-object') && (allowX || allowY)) {
              e.preventDefault();
              startCoords = _this.getDragCords(e, Math.abs(_this.rotateValue));
              possibleSwipeCords = _this.getPossibleSwipeDragCords(_this.rotateValue);
              isDragging = true;
              // ** Fix for webkit cursor issue https://code.google.com/p/chromium/issues/detail?id=26723
              _this.core.outer.get().scrollLeft += 1;
              _this.core.outer.get().scrollLeft -= 1;
              _this.core.outer.removeClass('lg-grab').addClass('lg-grabbing lg-zoom-drag-transition lg-zoom-dragging');
              // reset opacity and transition duration
            }
          }
        }
      });

      this.$LG(window).on("mousemove.lg.zoom.global" + this.core.lgId, function (e) {
        if (isDragging) {
          isMoved = true;
          endCoords = _this.getDragCords(e, Math.abs(_this.rotateValue));
          var distance = _this.getZoomSwipeCords(startCoords, endCoords, allowX, allowY, possibleSwipeCords);
          _this.setZoomSwipeStyles(_LGel, distance);
        }
      });
      this.$LG(window).on("mouseup.lg.zoom.global" + this.core.lgId, function (e) {
        if (isDragging) {
          endTime = new Date();
          isDragging = false;
          _this.core.outer.removeClass('lg-zoom-dragging');
          // Fix for chrome mouse move on click
          if (isMoved && (startCoords.x !== endCoords.x || startCoords.y !== endCoords.y)) {
            endCoords = _this.getDragCords(e, Math.abs(_this.rotateValue));
            var touchDuration = endTime.valueOf() - startTime.valueOf();
            _this.touchendZoom(startCoords, endCoords, allowX, allowY, touchDuration, _this.rotateValue);
          }
          isMoved = false;
        }
        _this.core.outer.removeClass('lg-grabbing').addClass('lg-grab');
      });
    };
    Zoom.prototype.closeGallery = function () {
      this.resetZoom();
    };
    Zoom.prototype.destroy = function () {
      // Unbind all events added by lightGallery zoom plugin
      this.$LG(window).off(".lg.zoom.global" + this.core.lgId);
      this.core.LGel.off('.lg.zoom');
      this.core.LGel.off('.zoom');
      clearTimeout(this.zoomableTimeout);
      this.zoomableTimeout = false;
    };
    return Zoom;
  }();
  return Zoom;
});

/*!
 * lightgallery | 2.4.0-beta.0 | December 12th 2021
 * http://www.lightgalleryjs.com/
 * Copyright (c) 2020 Sachin Neravath;
 * @license GPLv3
 */

(function (global, factory) {
  (typeof exports === "undefined" ? "undefined" : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.lgVideo = factory());
})(void 0, function () {
  'use strict';

  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
    Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */
  var _assign4 = function __assign() {
    _assign4 = Object.assign || function __assign(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
      return t;
    };
    return _assign4.apply(this, arguments);
  };
  var videoSettings = {
    autoplayFirstVideo: true,
    youTubePlayerParams: false,
    vimeoPlayerParams: false,
    wistiaPlayerParams: false,
    gotoNextSlideOnVideoEnd: true,
    autoplayVideoOnSlide: false,
    videojs: false,
    videojsOptions: {}
  };

  /**
   * List of lightGallery events
   * All events should be documented here
   * Below interfaces are used to build the website documentations
   * */
  var lGEvents = {
    afterAppendSlide: 'lgAfterAppendSlide',
    init: 'lgInit',
    hasVideo: 'lgHasVideo',
    containerResize: 'lgContainerResize',
    updateSlides: 'lgUpdateSlides',
    afterAppendSubHtml: 'lgAfterAppendSubHtml',
    beforeOpen: 'lgBeforeOpen',
    afterOpen: 'lgAfterOpen',
    slideItemLoad: 'lgSlideItemLoad',
    beforeSlide: 'lgBeforeSlide',
    afterSlide: 'lgAfterSlide',
    posterClick: 'lgPosterClick',
    dragStart: 'lgDragStart',
    dragMove: 'lgDragMove',
    dragEnd: 'lgDragEnd',
    beforeNextSlide: 'lgBeforeNextSlide',
    beforePrevSlide: 'lgBeforePrevSlide',
    beforeClose: 'lgBeforeClose',
    afterClose: 'lgAfterClose',
    rotateLeft: 'lgRotateLeft',
    rotateRight: 'lgRotateRight',
    flipHorizontal: 'lgFlipHorizontal',
    flipVertical: 'lgFlipVertical',
    autoplay: 'lgAutoplay',
    autoplayStart: 'lgAutoplayStart',
    autoplayStop: 'lgAutoplayStop'
  };
  var param = function param(obj) {
    return Object.keys(obj).map(function (k) {
      return encodeURIComponent(k) + '=' + encodeURIComponent(obj[k]);
    }).join('&');
  };
  var getVimeoURLParams = function getVimeoURLParams(defaultParams, videoInfo) {
    if (!videoInfo || !videoInfo.vimeo) return '';
    var urlParams = videoInfo.vimeo[2] || '';
    urlParams = urlParams[0] == '?' ? '&' + urlParams.slice(1) : urlParams || '';
    var defaultPlayerParams = defaultParams ? '&' + param(defaultParams) : '';
    // For vimeo last parms gets priority if duplicates found
    var vimeoPlayerParams = "?autoplay=0&muted=1" + defaultPlayerParams + urlParams;
    return vimeoPlayerParams;
  };

  /**
   * Video module for lightGallery
   * Supports HTML5, YouTube, Vimeo, wistia videos
   *
   *
   * @ref Wistia
   * https://wistia.com/support/integrations/wordpress(How to get url)
   * https://wistia.com/support/developers/embed-options#using-embed-options
   * https://wistia.com/support/developers/player-api
   * https://wistia.com/support/developers/construct-an-embed-code
   * http://jsfiddle.net/xvnm7xLm/
   * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video
   * https://wistia.com/support/embed-and-share/sharing-videos
   * https://private-sharing.wistia.com/medias/mwhrulrucj
   *
   * @ref Youtube
   * https://developers.google.com/youtube/player_parameters#enablejsapi
   * https://developers.google.com/youtube/iframe_api_reference
   * https://developer.chrome.com/blog/autoplay/#iframe-delegation
   *
   * @ref Vimeo
   * https://stackoverflow.com/questions/10488943/easy-way-to-get-vimeo-id-from-a-vimeo-url
   * https://vimeo.zendesk.com/hc/en-us/articles/360000121668-Starting-playback-at-a-specific-timecode
   * https://vimeo.zendesk.com/hc/en-us/articles/360001494447-Using-Player-Parameters
   */
  var Video = /** @class */function () {
    function Video(instance) {
      // get lightGallery core plugin instance
      this.core = instance;
      this.settings = _assign4(_assign4({}, videoSettings), this.core.settings);
      return this;
    }
    Video.prototype.init = function () {
      var _this = this;
      /**
       * Event triggered when video url found without poster
       * Append video HTML
       * Play if autoplayFirstVideo is true
       */
      this.core.LGel.on(lGEvents.hasVideo + ".video", this.onHasVideo.bind(this));
      this.core.LGel.on(lGEvents.posterClick + ".video", function () {
        var $el = _this.core.getSlideItem(_this.core.index);
        _this.loadVideoOnPosterClick($el);
      });
      this.core.LGel.on(lGEvents.slideItemLoad + ".video", this.onSlideItemLoad.bind(this));
      // @desc fired immediately before each slide transition.
      this.core.LGel.on(lGEvents.beforeSlide + ".video", this.onBeforeSlide.bind(this));
      // @desc fired immediately after each slide transition.
      this.core.LGel.on(lGEvents.afterSlide + ".video", this.onAfterSlide.bind(this));
    };
    /**
     * @desc Event triggered when a slide is completely loaded
     *
     * @param {Event} event - lightGalley custom event
     */
    Video.prototype.onSlideItemLoad = function (event) {
      var _this = this;
      var _a = event.detail,
        isFirstSlide = _a.isFirstSlide,
        index = _a.index;
      // Should check the active slide as well as user may have moved to different slide before the first slide is loaded
      if (this.settings.autoplayFirstVideo && isFirstSlide && index === this.core.index) {
        // Delay is just for the transition effect on video load
        setTimeout(function () {
          _this.loadAndPlayVideo(index);
        }, 200);
      }
      // Should not call on first slide. should check only if the slide is active
      if (!isFirstSlide && this.settings.autoplayVideoOnSlide && index === this.core.index) {
        this.loadAndPlayVideo(index);
      }
    };
    /**
     * @desc Event triggered when video url or poster found
     * Append video HTML is poster is not given
     * Play if autoplayFirstVideo is true
     *
     * @param {Event} event - Javascript Event object.
     */
    Video.prototype.onHasVideo = function (event) {
      var _a = event.detail,
        index = _a.index,
        src = _a.src,
        html5Video = _a.html5Video,
        hasPoster = _a.hasPoster;
      if (!hasPoster) {
        // All functions are called separately if poster exist in loadVideoOnPosterClick function
        this.appendVideos(this.core.getSlideItem(index), {
          src: src,
          addClass: 'lg-object',
          index: index,
          html5Video: html5Video
        });
        // Automatically navigate to next slide once video reaches the end.
        this.gotoNextSlideOnVideoEnd(src, index);
      }
    };
    /**
     * @desc fired immediately before each slide transition.
     * Pause the previous video
     * Hide the download button if the slide contains YouTube, Vimeo, or Wistia videos.
     *
     * @param {Event} event - Javascript Event object.
     * @param {number} prevIndex - Previous index of the slide.
     * @param {number} index - Current index of the slide
     */
    Video.prototype.onBeforeSlide = function (event) {
      if (this.core.lGalleryOn) {
        var prevIndex = event.detail.prevIndex;
        this.pauseVideo(prevIndex);
      }
    };
    /**
     * @desc fired immediately after each slide transition.
     * Play video if autoplayVideoOnSlide option is enabled.
     *
     * @param {Event} event - Javascript Event object.
     * @param {number} prevIndex - Previous index of the slide.
     * @param {number} index - Current index of the slide
     * @todo should check on onSlideLoad as well if video is not loaded on after slide
     */
    Video.prototype.onAfterSlide = function (event) {
      var _this = this;
      var _a = event.detail,
        index = _a.index,
        prevIndex = _a.prevIndex;
      // Do not call on first slide
      var $slide = this.core.getSlideItem(index);
      if (this.settings.autoplayVideoOnSlide && index !== prevIndex) {
        if ($slide.hasClass('lg-complete')) {
          setTimeout(function () {
            _this.loadAndPlayVideo(index);
          }, 100);
        }
      }
    };
    Video.prototype.loadAndPlayVideo = function (index) {
      var $slide = this.core.getSlideItem(index);
      var currentGalleryItem = this.core.galleryItems[index];
      if (currentGalleryItem.poster) {
        this.loadVideoOnPosterClick($slide, true);
      } else {
        this.playVideo(index);
      }
    };
    /**
     * Play HTML5, Youtube, Vimeo or Wistia videos in a particular slide.
     * @param {number} index - Index of the slide
     */
    Video.prototype.playVideo = function (index) {
      this.controlVideo(index, 'play');
    };
    /**
     * Pause HTML5, Youtube, Vimeo or Wistia videos in a particular slide.
     * @param {number} index - Index of the slide
     */
    Video.prototype.pauseVideo = function (index) {
      this.controlVideo(index, 'pause');
    };
    Video.prototype.getVideoHtml = function (src, addClass, index, html5Video) {
      var video = '';
      var videoInfo = this.core.galleryItems[index].__slideVideoInfo || {};
      var currentGalleryItem = this.core.galleryItems[index];
      var videoTitle = currentGalleryItem.title || currentGalleryItem.alt;
      videoTitle = videoTitle ? 'title="' + videoTitle + '"' : '';
      var commonIframeProps = "allowtransparency=\"true\"\n            frameborder=\"0\"\n            scrolling=\"no\"\n            allowfullscreen\n            mozallowfullscreen\n            webkitallowfullscreen\n            oallowfullscreen\n            msallowfullscreen";
      if (videoInfo.youtube) {
        var videoId = 'lg-youtube' + index;
        var slideUrlParams = videoInfo.youtube[2] ? videoInfo.youtube[2] + '&' : '';
        // For youtube first parms gets priority if duplicates found
        var youTubePlayerParams = "?" + slideUrlParams + "wmode=opaque&autoplay=0&mute=1&enablejsapi=1";
        var playerParams = youTubePlayerParams + (this.settings.youTubePlayerParams ? '&' + param(this.settings.youTubePlayerParams) : '');
        video = "<iframe allow=\"autoplay\" id=" + videoId + " class=\"lg-video-object lg-youtube " + addClass + "\" " + videoTitle + " src=\"//www.youtube.com/embed/" + (videoInfo.youtube[1] + playerParams) + "\" " + commonIframeProps + "></iframe>";
      } else if (videoInfo.vimeo) {
        var videoId = 'lg-vimeo' + index;
        var playerParams = getVimeoURLParams(this.settings.vimeoPlayerParams, videoInfo);
        video = "<iframe allow=\"autoplay\" id=" + videoId + " class=\"lg-video-object lg-vimeo " + addClass + "\" " + videoTitle + " src=\"//player.vimeo.com/video/" + (videoInfo.vimeo[1] + playerParams) + "\" " + commonIframeProps + "></iframe>";
      } else if (videoInfo.wistia) {
        var wistiaId = 'lg-wistia' + index;
        var playerParams = param(this.settings.wistiaPlayerParams);
        playerParams = playerParams ? '?' + playerParams : '';
        video = "<iframe allow=\"autoplay\" id=\"" + wistiaId + "\" src=\"//fast.wistia.net/embed/iframe/" + (videoInfo.wistia[4] + playerParams) + "\" " + videoTitle + " class=\"wistia_embed lg-video-object lg-wistia " + addClass + "\" name=\"wistia_embed\" " + commonIframeProps + "></iframe>";
      } else if (videoInfo.html5) {
        var html5VideoMarkup = '';
        for (var i = 0; i < html5Video.source.length; i++) {
          html5VideoMarkup += "<source src=\"" + html5Video.source[i].src + "\" type=\"" + html5Video.source[i].type + "\">";
        }
        if (html5Video.tracks) {
          var _loop_1 = function _loop_1(i) {
            var trackAttributes = '';
            var track = html5Video.tracks[i];
            Object.keys(track || {}).forEach(function (key) {
              trackAttributes += key + "=\"" + track[key] + "\" ";
            });
            html5VideoMarkup += "<track " + trackAttributes + ">";
          };
          for (var i = 0; i < html5Video.tracks.length; i++) {
            _loop_1(i);
          }
        }
        var html5VideoAttrs_1 = '';
        var videoAttributes_1 = html5Video.attributes || {};
        Object.keys(videoAttributes_1 || {}).forEach(function (key) {
          html5VideoAttrs_1 += key + "=\"" + videoAttributes_1[key] + "\" ";
        });
        video = "<video class=\"lg-video-object lg-html5 " + (this.settings.videojs ? 'video-js' : '') + "\" " + html5VideoAttrs_1 + ">\n                " + html5VideoMarkup + "\n                Your browser does not support HTML5 video.\n            </video>";
      }
      return video;
    };
    /**
     * @desc - Append videos to the slide
     *
     * @param {HTMLElement} el - slide element
     * @param {Object} videoParams - Video parameters, Contains src, class, index, htmlVideo
     */
    Video.prototype.appendVideos = function (el, videoParams) {
      var _a;
      var videoHtml = this.getVideoHtml(videoParams.src, videoParams.addClass, videoParams.index, videoParams.html5Video);
      el.find('.lg-video-cont').append(videoHtml);
      var $videoElement = el.find('.lg-video-object').first();
      if (videoParams.html5Video) {
        $videoElement.on('mousedown.lg.video', function (e) {
          e.stopPropagation();
        });
      }
      if (this.settings.videojs && ((_a = this.core.galleryItems[videoParams.index].__slideVideoInfo) === null || _a === void 0 ? void 0 : _a.html5)) {
        try {
          return videojs($videoElement.get(), this.settings.videojsOptions);
        } catch (e) {
          console.error('lightGallery:- Make sure you have included videojs');
        }
      }
    };
    Video.prototype.gotoNextSlideOnVideoEnd = function (src, index) {
      var _this = this;
      var $videoElement = this.core.getSlideItem(index).find('.lg-video-object').first();
      var videoInfo = this.core.galleryItems[index].__slideVideoInfo || {};
      if (this.settings.gotoNextSlideOnVideoEnd) {
        if (videoInfo.html5) {
          $videoElement.on('ended', function () {
            _this.core.goToNextSlide();
          });
        } else if (videoInfo.vimeo) {
          try {
            // https://github.com/vimeo/player.js/#ended
            new Vimeo.Player($videoElement.get()).on('ended', function () {
              _this.core.goToNextSlide();
            });
          } catch (e) {
            console.error('lightGallery:- Make sure you have included //github.com/vimeo/player.js');
          }
        } else if (videoInfo.wistia) {
          try {
            window._wq = window._wq || [];
            // @todo Event is gettign triggered multiple times
            window._wq.push({
              id: $videoElement.attr('id'),
              onReady: function onReady(video) {
                video.bind('end', function () {
                  _this.core.goToNextSlide();
                });
              }
            });
          } catch (e) {
            console.error('lightGallery:- Make sure you have included //fast.wistia.com/assets/external/E-v1.js');
          }
        }
      }
    };
    Video.prototype.controlVideo = function (index, action) {
      var $videoElement = this.core.getSlideItem(index).find('.lg-video-object').first();
      var videoInfo = this.core.galleryItems[index].__slideVideoInfo || {};
      if (!$videoElement.get()) return;
      if (videoInfo.youtube) {
        try {
          $videoElement.get().contentWindow.postMessage("{\"event\":\"command\",\"func\":\"" + action + "Video\",\"args\":\"\"}", '*');
        } catch (e) {
          console.error("lightGallery:- " + e);
        }
      } else if (videoInfo.vimeo) {
        try {
          new Vimeo.Player($videoElement.get())[action]();
        } catch (e) {
          console.error('lightGallery:- Make sure you have included //github.com/vimeo/player.js');
        }
      } else if (videoInfo.html5) {
        if (this.settings.videojs) {
          try {
            videojs($videoElement.get())[action]();
          } catch (e) {
            console.error('lightGallery:- Make sure you have included videojs');
          }
        } else {
          $videoElement.get()[action]();
        }
      } else if (videoInfo.wistia) {
        try {
          window._wq = window._wq || [];
          // @todo Find a way to destroy wistia player instance
          window._wq.push({
            id: $videoElement.attr('id'),
            onReady: function onReady(video) {
              video[action]();
            }
          });
        } catch (e) {
          console.error('lightGallery:- Make sure you have included //fast.wistia.com/assets/external/E-v1.js');
        }
      }
    };
    Video.prototype.loadVideoOnPosterClick = function ($el, forcePlay) {
      var _this = this;
      // check slide has poster
      if (!$el.hasClass('lg-video-loaded')) {
        // check already video element present
        if (!$el.hasClass('lg-has-video')) {
          $el.addClass('lg-has-video');
          var _html = void 0;
          var _src = this.core.galleryItems[this.core.index].src;
          var video = this.core.galleryItems[this.core.index].video;
          if (video) {
            _html = typeof video === 'string' ? JSON.parse(video) : video;
          }
          var videoJsPlayer_1 = this.appendVideos($el, {
            src: _src,
            addClass: '',
            index: this.core.index,
            html5Video: _html
          });
          this.gotoNextSlideOnVideoEnd(_src, this.core.index);
          var $tempImg = $el.find('.lg-object').first().get();
          // @todo make sure it is working
          $el.find('.lg-video-cont').first().append($tempImg);
          $el.addClass('lg-video-loading');
          videoJsPlayer_1 && videoJsPlayer_1.ready(function () {
            videoJsPlayer_1.on('loadedmetadata', function () {
              _this.onVideoLoadAfterPosterClick($el, _this.core.index);
            });
          });
          $el.find('.lg-video-object').first().on('load.lg error.lg loadedmetadata.lg', function () {
            setTimeout(function () {
              _this.onVideoLoadAfterPosterClick($el, _this.core.index);
            }, 50);
          });
        } else {
          this.playVideo(this.core.index);
        }
      } else if (forcePlay) {
        this.playVideo(this.core.index);
      }
    };
    Video.prototype.onVideoLoadAfterPosterClick = function ($el, index) {
      $el.addClass('lg-video-loaded');
      this.playVideo(index);
    };
    Video.prototype.destroy = function () {
      this.core.LGel.off('.lg.video');
      this.core.LGel.off('.video');
    };
    return Video;
  }();
  return Video;
});

/*!
 * lightgallery | 2.4.0-beta.0 | December 12th 2021
 * http://www.lightgalleryjs.com/
 * Copyright (c) 2020 Sachin Neravath;
 * @license GPLv3
 */

(function (global, factory) {
  (typeof exports === "undefined" ? "undefined" : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.lgRotate = factory());
})(void 0, function () {
  'use strict';

  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
    Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */
  var _assign5 = function __assign() {
    _assign5 = Object.assign || function __assign(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
      return t;
    };
    return _assign5.apply(this, arguments);
  };

  /**
   * List of lightGallery events
   * All events should be documented here
   * Below interfaces are used to build the website documentations
   * */
  var lGEvents = {
    afterAppendSlide: 'lgAfterAppendSlide',
    init: 'lgInit',
    hasVideo: 'lgHasVideo',
    containerResize: 'lgContainerResize',
    updateSlides: 'lgUpdateSlides',
    afterAppendSubHtml: 'lgAfterAppendSubHtml',
    beforeOpen: 'lgBeforeOpen',
    afterOpen: 'lgAfterOpen',
    slideItemLoad: 'lgSlideItemLoad',
    beforeSlide: 'lgBeforeSlide',
    afterSlide: 'lgAfterSlide',
    posterClick: 'lgPosterClick',
    dragStart: 'lgDragStart',
    dragMove: 'lgDragMove',
    dragEnd: 'lgDragEnd',
    beforeNextSlide: 'lgBeforeNextSlide',
    beforePrevSlide: 'lgBeforePrevSlide',
    beforeClose: 'lgBeforeClose',
    afterClose: 'lgAfterClose',
    rotateLeft: 'lgRotateLeft',
    rotateRight: 'lgRotateRight',
    flipHorizontal: 'lgFlipHorizontal',
    flipVertical: 'lgFlipVertical',
    autoplay: 'lgAutoplay',
    autoplayStart: 'lgAutoplayStart',
    autoplayStop: 'lgAutoplayStop'
  };
  var rotateSettings = {
    rotate: true,
    rotateSpeed: 400,
    rotateLeft: true,
    rotateRight: true,
    flipHorizontal: true,
    flipVertical: true,
    rotatePluginStrings: {
      flipVertical: 'Flip vertical',
      flipHorizontal: 'Flip horizontal',
      rotateLeft: 'Rotate left',
      rotateRight: 'Rotate right'
    }
  };
  var Rotate = /** @class */function () {
    function Rotate(instance, $LG) {
      // get lightGallery core plugin instance
      this.core = instance;
      this.$LG = $LG;
      // extend module default settings with lightGallery core settings
      this.settings = _assign5(_assign5({}, rotateSettings), this.core.settings);
      return this;
    }
    Rotate.prototype.buildTemplates = function () {
      var rotateIcons = '';
      if (this.settings.flipVertical) {
        rotateIcons += "<button type=\"button\" id=\"lg-flip-ver\" aria-label=\"" + this.settings.rotatePluginStrings['flipVertical'] + "\" class=\"lg-flip-ver lg-icon\"></button>";
      }
      if (this.settings.flipHorizontal) {
        rotateIcons += "<button type=\"button\" id=\"lg-flip-hor\" aria-label=\"" + this.settings.rotatePluginStrings['flipHorizontal'] + "\" class=\"lg-flip-hor lg-icon\"></button>";
      }
      if (this.settings.rotateLeft) {
        rotateIcons += "<button type=\"button\" id=\"lg-rotate-left\" aria-label=\"" + this.settings.rotatePluginStrings['rotateLeft'] + "\" class=\"lg-rotate-left lg-icon\"></button>";
      }
      if (this.settings.rotateRight) {
        rotateIcons += "<button type=\"button\" id=\"lg-rotate-right\" aria-label=\"" + this.settings.rotatePluginStrings['rotateRight'] + "\" class=\"lg-rotate-right lg-icon\"></button>";
      }
      this.core.$toolbar.append(rotateIcons);
    };
    Rotate.prototype.init = function () {
      var _this = this;
      if (!this.settings.rotate) {
        return;
      }
      this.buildTemplates();
      // Save rotate config for each item to persist its rotate, flip values
      // even after navigating to diferent slides
      this.rotateValuesList = {};
      // event triggered after appending slide content
      this.core.LGel.on(lGEvents.afterAppendSlide + ".rotate", function (event) {
        var index = event.detail.index;
        var imageWrap = _this.core.getSlideItem(index).find('.lg-img-wrap').first();
        imageWrap.wrap('lg-img-rotate');
        _this.core.getSlideItem(_this.core.index).find('.lg-img-rotate').css('transition-duration', _this.settings.rotateSpeed + 'ms');
      });
      this.core.outer.find('#lg-rotate-left').first().on('click.lg', this.rotateLeft.bind(this));
      this.core.outer.find('#lg-rotate-right').first().on('click.lg', this.rotateRight.bind(this));
      this.core.outer.find('#lg-flip-hor').first().on('click.lg', this.flipHorizontal.bind(this));
      this.core.outer.find('#lg-flip-ver').first().on('click.lg', this.flipVertical.bind(this));
      // Reset rotate on slide change
      this.core.LGel.on(lGEvents.beforeSlide + ".rotate", function (event) {
        if (!_this.rotateValuesList[event.detail.index]) {
          _this.rotateValuesList[event.detail.index] = {
            rotate: 0,
            flipHorizontal: 1,
            flipVertical: 1
          };
        }
      });
    };
    Rotate.prototype.applyStyles = function () {
      var $image = this.core.getSlideItem(this.core.index).find('.lg-img-rotate').first();
      $image.css('transform', 'rotate(' + this.rotateValuesList[this.core.index].rotate + 'deg)' + ' scale3d(' + this.rotateValuesList[this.core.index].flipHorizontal + ', ' + this.rotateValuesList[this.core.index].flipVertical + ', 1)');
    };
    Rotate.prototype.rotateLeft = function () {
      this.rotateValuesList[this.core.index].rotate -= 90;
      this.applyStyles();
      this.triggerEvents(lGEvents.rotateLeft, {
        rotate: this.rotateValuesList[this.core.index].rotate
      });
    };
    Rotate.prototype.rotateRight = function () {
      this.rotateValuesList[this.core.index].rotate += 90;
      this.applyStyles();
      this.triggerEvents(lGEvents.rotateRight, {
        rotate: this.rotateValuesList[this.core.index].rotate
      });
    };
    Rotate.prototype.getCurrentRotation = function (el) {
      if (!el) {
        return 0;
      }
      var st = this.$LG(el).style();
      var tm = st.getPropertyValue('-webkit-transform') || st.getPropertyValue('-moz-transform') || st.getPropertyValue('-ms-transform') || st.getPropertyValue('-o-transform') || st.getPropertyValue('transform') || 'none';
      if (tm !== 'none') {
        var values = tm.split('(')[1].split(')')[0].split(',');
        if (values) {
          var angle = Math.round(Math.atan2(values[1], values[0]) * (180 / Math.PI));
          return angle < 0 ? angle + 360 : angle;
        }
      }
      return 0;
    };
    Rotate.prototype.flipHorizontal = function () {
      var rotateEl = this.core.getSlideItem(this.core.index).find('.lg-img-rotate').first().get();
      var currentRotation = this.getCurrentRotation(rotateEl);
      var rotateAxis = 'flipHorizontal';
      if (currentRotation === 90 || currentRotation === 270) {
        rotateAxis = 'flipVertical';
      }
      this.rotateValuesList[this.core.index][rotateAxis] *= -1;
      this.applyStyles();
      this.triggerEvents(lGEvents.flipHorizontal, {
        flipHorizontal: this.rotateValuesList[this.core.index][rotateAxis]
      });
    };
    Rotate.prototype.flipVertical = function () {
      var rotateEl = this.core.getSlideItem(this.core.index).find('.lg-img-rotate').first().get();
      var currentRotation = this.getCurrentRotation(rotateEl);
      var rotateAxis = 'flipVertical';
      if (currentRotation === 90 || currentRotation === 270) {
        rotateAxis = 'flipHorizontal';
      }
      this.rotateValuesList[this.core.index][rotateAxis] *= -1;
      this.applyStyles();
      this.triggerEvents(lGEvents.flipVertical, {
        flipVertical: this.rotateValuesList[this.core.index][rotateAxis]
      });
    };
    Rotate.prototype.triggerEvents = function (event, detail) {
      var _this = this;
      setTimeout(function () {
        _this.core.LGel.trigger(event, detail);
      }, this.settings.rotateSpeed + 10);
    };
    Rotate.prototype.isImageOrientationChanged = function () {
      var rotateValue = this.rotateValuesList[this.core.index];
      var isRotated = Math.abs(rotateValue.rotate) % 360 !== 0;
      var ifFlippedHor = rotateValue.flipHorizontal < 0;
      var ifFlippedVer = rotateValue.flipVertical < 0;
      return isRotated || ifFlippedHor || ifFlippedVer;
    };
    Rotate.prototype.closeGallery = function () {
      if (this.isImageOrientationChanged()) {
        this.core.getSlideItem(this.core.index).css('opacity', 0);
      }
      this.rotateValuesList = {};
    };
    Rotate.prototype.destroy = function () {
      // Unbind all events added by lightGallery rotate plugin
      this.core.LGel.off('.lg.rotate');
      this.core.LGel.off('.rotate');
    };
    return Rotate;
  }();
  return Rotate;
});

/*!
 * Flickity PACKAGED v2.3.0
 * Touch, responsive, flickable carousels
 *
 * Licensed GPLv3 for open source use
 * or Flickity Commercial License for commercial use
 *
 * https://flickity.metafizzy.co
 * Copyright 2015-2021 Metafizzy
 */
(function (e, i) {
  if (typeof define == "function" && define.amd) {
    define("jquery-bridget/jquery-bridget", ["jquery"], function (t) {
      return i(e, t);
    });
  } else if ((typeof module === "undefined" ? "undefined" : _typeof(module)) == "object" && module.exports) {
    module.exports = i(e, require("jquery"));
  } else {
    e.jQueryBridget = i(e, e.jQuery);
  }
})(window, function t(e, r) {
  "use strict";

  var o = Array.prototype.slice;
  var i = e.console;
  var u = typeof i == "undefined" ? function () {} : function (t) {
    i.error(t);
  };
  function n(h, s, c) {
    c = c || r || e.jQuery;
    if (!c) {
      return;
    }
    if (!s.prototype.option) {
      s.prototype.option = function (t) {
        if (!c.isPlainObject(t)) {
          return;
        }
        this.options = c.extend(true, this.options, t);
      };
    }
    c.fn[h] = function (t) {
      if (typeof t == "string") {
        var e = o.call(arguments, 1);
        return i(this, t, e);
      }
      n(this, t);
      return this;
    };
    function i(t, r, o) {
      var a;
      var l = "$()." + h + '("' + r + '")';
      t.each(function (t, e) {
        var i = c.data(e, h);
        if (!i) {
          u(h + " not initialized. Cannot call methods, i.e. " + l);
          return;
        }
        var n = i[r];
        if (!n || r.charAt(0) == "_") {
          u(l + " is not a valid method");
          return;
        }
        var s = n.apply(i, o);
        a = a === undefined ? s : a;
      });
      return a !== undefined ? a : t;
    }
    function n(t, n) {
      t.each(function (t, e) {
        var i = c.data(e, h);
        if (i) {
          i.option(n);
          i._init();
        } else {
          i = new s(e, n);
          c.data(e, h, i);
        }
      });
    }
    a(c);
  }
  function a(t) {
    if (!t || t && t.bridget) {
      return;
    }
    t.bridget = n;
  }
  a(r || e.jQuery);
  return n;
});
(function (t, e) {
  if (typeof define == "function" && define.amd) {
    define("ev-emitter/ev-emitter", e);
  } else if ((typeof module === "undefined" ? "undefined" : _typeof(module)) == "object" && module.exports) {
    module.exports = e();
  } else {
    t.EvEmitter = e();
  }
})(typeof window != "undefined" ? window : void 0, function () {
  function t() {}
  var e = t.prototype;
  e.on = function (t, e) {
    if (!t || !e) {
      return;
    }
    var i = this._events = this._events || {};
    var n = i[t] = i[t] || [];
    if (n.indexOf(e) == -1) {
      n.push(e);
    }
    return this;
  };
  e.once = function (t, e) {
    if (!t || !e) {
      return;
    }
    this.on(t, e);
    var i = this._onceEvents = this._onceEvents || {};
    var n = i[t] = i[t] || {};
    n[e] = true;
    return this;
  };
  e.off = function (t, e) {
    var i = this._events && this._events[t];
    if (!i || !i.length) {
      return;
    }
    var n = i.indexOf(e);
    if (n != -1) {
      i.splice(n, 1);
    }
    return this;
  };
  e.emitEvent = function (t, e) {
    var i = this._events && this._events[t];
    if (!i || !i.length) {
      return;
    }
    i = i.slice(0);
    e = e || [];
    var n = this._onceEvents && this._onceEvents[t];
    for (var s = 0; s < i.length; s++) {
      var r = i[s];
      var o = n && n[r];
      if (o) {
        this.off(t, r);
        delete n[r];
      }
      r.apply(this, e);
    }
    return this;
  };
  e.allOff = function () {
    delete this._events;
    delete this._onceEvents;
  };
  return t;
});
/*!
 * getSize v2.0.3
 * measure size of elements
 * MIT license
 */
(function (t, e) {
  if (typeof define == "function" && define.amd) {
    define("get-size/get-size", e);
  } else if ((typeof module === "undefined" ? "undefined" : _typeof(module)) == "object" && module.exports) {
    module.exports = e();
  } else {
    t.getSize = e();
  }
})(window, function t() {
  "use strict";

  function m(t) {
    var e = parseFloat(t);
    var i = t.indexOf("%") == -1 && !isNaN(e);
    return i && e;
  }
  function e() {}
  var i = typeof console == "undefined" ? e : function (t) {
    console.error(t);
  };
  var y = ["paddingLeft", "paddingRight", "paddingTop", "paddingBottom", "marginLeft", "marginRight", "marginTop", "marginBottom", "borderLeftWidth", "borderRightWidth", "borderTopWidth", "borderBottomWidth"];
  var b = y.length;
  function E() {
    var t = {
      width: 0,
      height: 0,
      innerWidth: 0,
      innerHeight: 0,
      outerWidth: 0,
      outerHeight: 0
    };
    for (var e = 0; e < b; e++) {
      var i = y[e];
      t[i] = 0;
    }
    return t;
  }
  function S(t) {
    var e = getComputedStyle(t);
    if (!e) {
      i("Style returned " + e + ". Are you running this code in a hidden iframe on Firefox? " + "See https://bit.ly/getsizebug1");
    }
    return e;
  }
  var n = false;
  var C;
  function x() {
    if (n) {
      return;
    }
    n = true;
    var t = document.createElement("div");
    t.style.width = "200px";
    t.style.padding = "1px 2px 3px 4px";
    t.style.borderStyle = "solid";
    t.style.borderWidth = "1px 2px 3px 4px";
    t.style.boxSizing = "border-box";
    var e = document.body || document.documentElement;
    e.appendChild(t);
    var i = S(t);
    C = Math.round(m(i.width)) == 200;
    s.isBoxSizeOuter = C;
    e.removeChild(t);
  }
  function s(t) {
    x();
    if (typeof t == "string") {
      t = document.querySelector(t);
    }
    if (!t || _typeof(t) != "object" || !t.nodeType) {
      return;
    }
    var e = S(t);
    if (e.display == "none") {
      return E();
    }
    var i = {};
    i.width = t.offsetWidth;
    i.height = t.offsetHeight;
    var n = i.isBorderBox = e.boxSizing == "border-box";
    for (var s = 0; s < b; s++) {
      var r = y[s];
      var o = e[r];
      var a = parseFloat(o);
      i[r] = !isNaN(a) ? a : 0;
    }
    var l = i.paddingLeft + i.paddingRight;
    var h = i.paddingTop + i.paddingBottom;
    var c = i.marginLeft + i.marginRight;
    var u = i.marginTop + i.marginBottom;
    var d = i.borderLeftWidth + i.borderRightWidth;
    var f = i.borderTopWidth + i.borderBottomWidth;
    var p = n && C;
    var v = m(e.width);
    if (v !== false) {
      i.width = v + (p ? 0 : l + d);
    }
    var g = m(e.height);
    if (g !== false) {
      i.height = g + (p ? 0 : h + f);
    }
    i.innerWidth = i.width - (l + d);
    i.innerHeight = i.height - (h + f);
    i.outerWidth = i.width + c;
    i.outerHeight = i.height + u;
    return i;
  }
  return s;
});
(function (t, e) {
  "use strict";

  if (typeof define == "function" && define.amd) {
    define("desandro-matches-selector/matches-selector", e);
  } else if ((typeof module === "undefined" ? "undefined" : _typeof(module)) == "object" && module.exports) {
    module.exports = e();
  } else {
    t.matchesSelector = e();
  }
})(window, function t() {
  "use strict";

  var n = function () {
    var t = window.Element.prototype;
    if (t.matches) {
      return "matches";
    }
    if (t.matchesSelector) {
      return "matchesSelector";
    }
    var e = ["webkit", "moz", "ms", "o"];
    for (var i = 0; i < e.length; i++) {
      var n = e[i];
      var s = n + "MatchesSelector";
      if (t[s]) {
        return s;
      }
    }
  }();
  return function t(e, i) {
    return e[n](i);
  };
});
(function (e, i) {
  if (typeof define == "function" && define.amd) {
    define("fizzy-ui-utils/utils", ["desandro-matches-selector/matches-selector"], function (t) {
      return i(e, t);
    });
  } else if ((typeof module === "undefined" ? "undefined" : _typeof(module)) == "object" && module.exports) {
    module.exports = i(e, require("desandro-matches-selector"));
  } else {
    e.fizzyUIUtils = i(e, e.matchesSelector);
  }
})(window, function t(h, r) {
  var c = {};
  c.extend = function (t, e) {
    for (var i in e) {
      t[i] = e[i];
    }
    return t;
  };
  c.modulo = function (t, e) {
    return (t % e + e) % e;
  };
  var i = Array.prototype.slice;
  c.makeArray = function (t) {
    if (Array.isArray(t)) {
      return t;
    }
    if (t === null || t === undefined) {
      return [];
    }
    var e = _typeof(t) == "object" && typeof t.length == "number";
    if (e) {
      return i.call(t);
    }
    return [t];
  };
  c.removeFrom = function (t, e) {
    var i = t.indexOf(e);
    if (i != -1) {
      t.splice(i, 1);
    }
  };
  c.getParent = function (t, e) {
    while (t.parentNode && t != document.body) {
      t = t.parentNode;
      if (r(t, e)) {
        return t;
      }
    }
  };
  c.getQueryElement = function (t) {
    if (typeof t == "string") {
      return document.querySelector(t);
    }
    return t;
  };
  c.handleEvent = function (t) {
    var e = "on" + t.type;
    if (this[e]) {
      this[e](t);
    }
  };
  c.filterFindElements = function (t, n) {
    t = c.makeArray(t);
    var s = [];
    t.forEach(function (t) {
      if (!(t instanceof HTMLElement)) {
        return;
      }
      if (!n) {
        s.push(t);
        return;
      }
      if (r(t, n)) {
        s.push(t);
      }
      var e = t.querySelectorAll(n);
      for (var i = 0; i < e.length; i++) {
        s.push(e[i]);
      }
    });
    return s;
  };
  c.debounceMethod = function (t, e, n) {
    n = n || 100;
    var s = t.prototype[e];
    var r = e + "Timeout";
    t.prototype[e] = function () {
      var t = this[r];
      clearTimeout(t);
      var e = arguments;
      var i = this;
      this[r] = setTimeout(function () {
        s.apply(i, e);
        delete i[r];
      }, n);
    };
  };
  c.docReady = function (t) {
    var e = document.readyState;
    if (e == "complete" || e == "interactive") {
      setTimeout(t);
    } else {
      document.addEventListener("DOMContentLoaded", t);
    }
  };
  c.toDashed = function (t) {
    return t.replace(/(.)([A-Z])/g, function (t, e, i) {
      return e + "-" + i;
    }).toLowerCase();
  };
  var u = h.console;
  c.htmlInit = function (a, l) {
    c.docReady(function () {
      var t = c.toDashed(l);
      var s = "data-" + t;
      var e = document.querySelectorAll("[" + s + "]");
      var i = document.querySelectorAll(".js-" + t);
      var n = c.makeArray(e).concat(c.makeArray(i));
      var r = s + "-options";
      var o = h.jQuery;
      n.forEach(function (e) {
        var t = e.getAttribute(s) || e.getAttribute(r);
        var i;
        try {
          i = t && JSON.parse(t);
        } catch (t) {
          if (u) {
            u.error("Error parsing " + s + " on " + e.className + ": " + t);
          }
          return;
        }
        var n = new a(e, i);
        if (o) {
          o.data(e, l, n);
        }
      });
    });
  };
  return c;
});
(function (e, i) {
  if (typeof define == "function" && define.amd) {
    define("flickity/js/cell", ["get-size/get-size"], function (t) {
      return i(e, t);
    });
  } else if ((typeof module === "undefined" ? "undefined" : _typeof(module)) == "object" && module.exports) {
    module.exports = i(e, require("get-size"));
  } else {
    e.Flickity = e.Flickity || {};
    e.Flickity.Cell = i(e, e.getSize);
  }
})(window, function t(e, i) {
  function n(t, e) {
    this.element = t;
    this.parent = e;
    this.create();
  }
  var s = n.prototype;
  s.create = function () {
    this.element.style.position = "absolute";
    this.element.setAttribute("aria-hidden", "true");
    this.x = 0;
    this.shift = 0;
    this.element.style[this.parent.originSide] = 0;
  };
  s.destroy = function () {
    this.unselect();
    this.element.style.position = "";
    var t = this.parent.originSide;
    this.element.style[t] = "";
    this.element.style.transform = "";
    this.element.removeAttribute("aria-hidden");
  };
  s.getSize = function () {
    this.size = i(this.element);
  };
  s.setPosition = function (t) {
    this.x = t;
    this.updateTarget();
    this.renderPosition(t);
  };
  s.updateTarget = s.setDefaultTarget = function () {
    var t = this.parent.originSide == "left" ? "marginLeft" : "marginRight";
    this.target = this.x + this.size[t] + this.size.width * this.parent.cellAlign;
  };
  s.renderPosition = function (t) {
    var e = this.parent.originSide === "left" ? 1 : -1;
    var i = this.parent.options.percentPosition ? t * e * (this.parent.size.innerWidth / this.size.width) : t * e;
    this.element.style.transform = "translateX(" + this.parent.getPositionValue(i) + ")";
  };
  s.select = function () {
    this.element.classList.add("is-selected");
    this.element.removeAttribute("aria-hidden");
  };
  s.unselect = function () {
    this.element.classList.remove("is-selected");
    this.element.setAttribute("aria-hidden", "true");
  };
  s.wrapShift = function (t) {
    this.shift = t;
    this.renderPosition(this.x + this.parent.slideableWidth * t);
  };
  s.remove = function () {
    this.element.parentNode.removeChild(this.element);
  };
  return n;
});
(function (t, e) {
  if (typeof define == "function" && define.amd) {
    define("flickity/js/slide", e);
  } else if ((typeof module === "undefined" ? "undefined" : _typeof(module)) == "object" && module.exports) {
    module.exports = e();
  } else {
    t.Flickity = t.Flickity || {};
    t.Flickity.Slide = e();
  }
})(window, function t() {
  "use strict";

  function e(t) {
    this.parent = t;
    this.isOriginLeft = t.originSide == "left";
    this.cells = [];
    this.outerWidth = 0;
    this.height = 0;
  }
  var i = e.prototype;
  i.addCell = function (t) {
    this.cells.push(t);
    this.outerWidth += t.size.outerWidth;
    this.height = Math.max(t.size.outerHeight, this.height);
    if (this.cells.length == 1) {
      this.x = t.x;
      var e = this.isOriginLeft ? "marginLeft" : "marginRight";
      this.firstMargin = t.size[e];
    }
  };
  i.updateTarget = function () {
    var t = this.isOriginLeft ? "marginRight" : "marginLeft";
    var e = this.getLastCell();
    var i = e ? e.size[t] : 0;
    var n = this.outerWidth - (this.firstMargin + i);
    this.target = this.x + this.firstMargin + n * this.parent.cellAlign;
  };
  i.getLastCell = function () {
    return this.cells[this.cells.length - 1];
  };
  i.select = function () {
    this.cells.forEach(function (t) {
      t.select();
    });
  };
  i.unselect = function () {
    this.cells.forEach(function (t) {
      t.unselect();
    });
  };
  i.getCellElements = function () {
    return this.cells.map(function (t) {
      return t.element;
    });
  };
  return e;
});
(function (e, i) {
  if (typeof define == "function" && define.amd) {
    define("flickity/js/animate", ["fizzy-ui-utils/utils"], function (t) {
      return i(e, t);
    });
  } else if ((typeof module === "undefined" ? "undefined" : _typeof(module)) == "object" && module.exports) {
    module.exports = i(e, require("fizzy-ui-utils"));
  } else {
    e.Flickity = e.Flickity || {};
    e.Flickity.animatePrototype = i(e, e.fizzyUIUtils);
  }
})(window, function t(e, i) {
  var n = {};
  n.startAnimation = function () {
    if (this.isAnimating) {
      return;
    }
    this.isAnimating = true;
    this.restingFrames = 0;
    this.animate();
  };
  n.animate = function () {
    this.applyDragForce();
    this.applySelectedAttraction();
    var t = this.x;
    this.integratePhysics();
    this.positionSlider();
    this.settle(t);
    if (this.isAnimating) {
      var e = this;
      requestAnimationFrame(function t() {
        e.animate();
      });
    }
  };
  n.positionSlider = function () {
    var t = this.x;
    if (this.options.wrapAround && this.cells.length > 1) {
      t = i.modulo(t, this.slideableWidth);
      t -= this.slideableWidth;
      this.shiftWrapCells(t);
    }
    this.setTranslateX(t, this.isAnimating);
    this.dispatchScrollEvent();
  };
  n.setTranslateX = function (t, e) {
    t += this.cursorPosition;
    t = this.options.rightToLeft ? -t : t;
    var i = this.getPositionValue(t);
    this.slider.style.transform = e ? "translate3d(" + i + ",0,0)" : "translateX(" + i + ")";
  };
  n.dispatchScrollEvent = function () {
    var t = this.slides[0];
    if (!t) {
      return;
    }
    var e = -this.x - t.target;
    var i = e / this.slidesWidth;
    this.dispatchEvent("scroll", null, [i, e]);
  };
  n.positionSliderAtSelected = function () {
    if (!this.cells.length) {
      return;
    }
    this.x = -this.selectedSlide.target;
    this.velocity = 0;
    this.positionSlider();
  };
  n.getPositionValue = function (t) {
    if (this.options.percentPosition) {
      return Math.round(t / this.size.innerWidth * 1e4) * .01 + "%";
    } else {
      return Math.round(t) + "px";
    }
  };
  n.settle = function (t) {
    var e = !this.isPointerDown && Math.round(this.x * 100) == Math.round(t * 100);
    if (e) {
      this.restingFrames++;
    }
    if (this.restingFrames > 2) {
      this.isAnimating = false;
      delete this.isFreeScrolling;
      this.positionSlider();
      this.dispatchEvent("settle", null, [this.selectedIndex]);
    }
  };
  n.shiftWrapCells = function (t) {
    var e = this.cursorPosition + t;
    this._shiftCells(this.beforeShiftCells, e, -1);
    var i = this.size.innerWidth - (t + this.slideableWidth + this.cursorPosition);
    this._shiftCells(this.afterShiftCells, i, 1);
  };
  n._shiftCells = function (t, e, i) {
    for (var n = 0; n < t.length; n++) {
      var s = t[n];
      var r = e > 0 ? i : 0;
      s.wrapShift(r);
      e -= s.size.outerWidth;
    }
  };
  n._unshiftCells = function (t) {
    if (!t || !t.length) {
      return;
    }
    for (var e = 0; e < t.length; e++) {
      t[e].wrapShift(0);
    }
  };
  n.integratePhysics = function () {
    this.x += this.velocity;
    this.velocity *= this.getFrictionFactor();
  };
  n.applyForce = function (t) {
    this.velocity += t;
  };
  n.getFrictionFactor = function () {
    return 1 - this.options[this.isFreeScrolling ? "freeScrollFriction" : "friction"];
  };
  n.getRestingPosition = function () {
    return this.x + this.velocity / (1 - this.getFrictionFactor());
  };
  n.applyDragForce = function () {
    if (!this.isDraggable || !this.isPointerDown) {
      return;
    }
    var t = this.dragX - this.x;
    var e = t - this.velocity;
    this.applyForce(e);
  };
  n.applySelectedAttraction = function () {
    var t = this.isDraggable && this.isPointerDown;
    if (t || this.isFreeScrolling || !this.slides.length) {
      return;
    }
    var e = this.selectedSlide.target * -1 - this.x;
    var i = e * this.options.selectedAttraction;
    this.applyForce(i);
  };
  return n;
});
(function (o, a) {
  if (typeof define == "function" && define.amd) {
    define("flickity/js/flickity", ["ev-emitter/ev-emitter", "get-size/get-size", "fizzy-ui-utils/utils", "./cell", "./slide", "./animate"], function (t, e, i, n, s, r) {
      return a(o, t, e, i, n, s, r);
    });
  } else if ((typeof module === "undefined" ? "undefined" : _typeof(module)) == "object" && module.exports) {
    module.exports = a(o, require("ev-emitter"), require("get-size"), require("fizzy-ui-utils"), require("./cell"), require("./slide"), require("./animate"));
  } else {
    var t = o.Flickity;
    o.Flickity = a(o, o.EvEmitter, o.getSize, o.fizzyUIUtils, t.Cell, t.Slide, t.animatePrototype);
  }
})(window, function t(n, e, i, a, s, o, r) {
  var l = n.jQuery;
  var h = n.getComputedStyle;
  var c = n.console;
  function u(t, e) {
    t = a.makeArray(t);
    while (t.length) {
      e.appendChild(t.shift());
    }
  }
  var d = 0;
  var f = {};
  function p(t, e) {
    var i = a.getQueryElement(t);
    if (!i) {
      if (c) {
        c.error("Bad element for Flickity: " + (i || t));
      }
      return;
    }
    this.element = i;
    if (this.element.flickityGUID) {
      var n = f[this.element.flickityGUID];
      if (n) n.option(e);
      return n;
    }
    if (l) {
      this.$element = l(this.element);
    }
    this.options = a.extend({}, this.constructor.defaults);
    this.option(e);
    this._create();
  }
  p.defaults = {
    accessibility: true,
    cellAlign: "center",
    freeScrollFriction: .075,
    friction: .28,
    namespaceJQueryEvents: true,
    percentPosition: true,
    resize: true,
    selectedAttraction: .025,
    setGallerySize: true
  };
  p.createMethods = [];
  var v = p.prototype;
  a.extend(v, e.prototype);
  v._create = function () {
    var t = this.guid = ++d;
    this.element.flickityGUID = t;
    f[t] = this;
    this.selectedIndex = 0;
    this.restingFrames = 0;
    this.x = 0;
    this.velocity = 0;
    this.originSide = this.options.rightToLeft ? "right" : "left";
    this.viewport = document.createElement("div");
    this.viewport.className = "flickity-viewport";
    this._createSlider();
    if (this.options.resize || this.options.watchCSS) {
      n.addEventListener("resize", this);
    }
    for (var e in this.options.on) {
      var i = this.options.on[e];
      this.on(e, i);
    }
    p.createMethods.forEach(function (t) {
      this[t]();
    }, this);
    if (this.options.watchCSS) {
      this.watchCSS();
    } else {
      this.activate();
    }
  };
  v.option = function (t) {
    a.extend(this.options, t);
  };
  v.activate = function () {
    if (this.isActive) {
      return;
    }
    this.isActive = true;
    this.element.classList.add("flickity-enabled");
    if (this.options.rightToLeft) {
      this.element.classList.add("flickity-rtl");
    }
    this.getSize();
    var t = this._filterFindCellElements(this.element.children);
    u(t, this.slider);
    this.viewport.appendChild(this.slider);
    this.element.appendChild(this.viewport);
    this.reloadCells();
    if (this.options.accessibility) {
      this.element.tabIndex = 0;
      this.element.addEventListener("keydown", this);
    }
    this.emitEvent("activate");
    this.selectInitialIndex();
    this.isInitActivated = true;
    this.dispatchEvent("ready");
  };
  v._createSlider = function () {
    var t = document.createElement("div");
    t.className = "flickity-slider";
    t.style[this.originSide] = 0;
    this.slider = t;
  };
  v._filterFindCellElements = function (t) {
    return a.filterFindElements(t, this.options.cellSelector);
  };
  v.reloadCells = function () {
    this.cells = this._makeCells(this.slider.children);
    this.positionCells();
    this._getWrapShiftCells();
    this.setGallerySize();
  };
  v._makeCells = function (t) {
    var e = this._filterFindCellElements(t);
    var i = e.map(function (t) {
      return new s(t, this);
    }, this);
    return i;
  };
  v.getLastCell = function () {
    return this.cells[this.cells.length - 1];
  };
  v.getLastSlide = function () {
    return this.slides[this.slides.length - 1];
  };
  v.positionCells = function () {
    this._sizeCells(this.cells);
    this._positionCells(0);
  };
  v._positionCells = function (t) {
    t = t || 0;
    this.maxCellHeight = t ? this.maxCellHeight || 0 : 0;
    var e = 0;
    if (t > 0) {
      var i = this.cells[t - 1];
      e = i.x + i.size.outerWidth;
    }
    var n = this.cells.length;
    for (var s = t; s < n; s++) {
      var r = this.cells[s];
      r.setPosition(e);
      e += r.size.outerWidth;
      this.maxCellHeight = Math.max(r.size.outerHeight, this.maxCellHeight);
    }
    this.slideableWidth = e;
    this.updateSlides();
    this._containSlides();
    this.slidesWidth = n ? this.getLastSlide().target - this.slides[0].target : 0;
  };
  v._sizeCells = function (t) {
    t.forEach(function (t) {
      t.getSize();
    });
  };
  v.updateSlides = function () {
    this.slides = [];
    if (!this.cells.length) {
      return;
    }
    var n = new o(this);
    this.slides.push(n);
    var t = this.originSide == "left";
    var s = t ? "marginRight" : "marginLeft";
    var r = this._getCanCellFit();
    this.cells.forEach(function (t, e) {
      if (!n.cells.length) {
        n.addCell(t);
        return;
      }
      var i = n.outerWidth - n.firstMargin + (t.size.outerWidth - t.size[s]);
      if (r.call(this, e, i)) {
        n.addCell(t);
      } else {
        n.updateTarget();
        n = new o(this);
        this.slides.push(n);
        n.addCell(t);
      }
    }, this);
    n.updateTarget();
    this.updateSelectedSlide();
  };
  v._getCanCellFit = function () {
    var t = this.options.groupCells;
    if (!t) {
      return function () {
        return false;
      };
    } else if (typeof t == "number") {
      var e = parseInt(t, 10);
      return function (t) {
        return t % e !== 0;
      };
    }
    var i = typeof t == "string" && t.match(/^(\d+)%$/);
    var n = i ? parseInt(i[1], 10) / 100 : 1;
    return function (t, e) {
      return e <= (this.size.innerWidth + 1) * n;
    };
  };
  v._init = v.reposition = function () {
    this.positionCells();
    this.positionSliderAtSelected();
  };
  v.getSize = function () {
    this.size = i(this.element);
    this.setCellAlign();
    this.cursorPosition = this.size.innerWidth * this.cellAlign;
  };
  var g = {
    center: {
      left: .5,
      right: .5
    },
    left: {
      left: 0,
      right: 1
    },
    right: {
      right: 0,
      left: 1
    }
  };
  v.setCellAlign = function () {
    var t = g[this.options.cellAlign];
    this.cellAlign = t ? t[this.originSide] : this.options.cellAlign;
  };
  v.setGallerySize = function () {
    if (this.options.setGallerySize) {
      var t = this.options.adaptiveHeight && this.selectedSlide ? this.selectedSlide.height : this.maxCellHeight;
      this.viewport.style.height = t + "px";
    }
  };
  v._getWrapShiftCells = function () {
    if (!this.options.wrapAround) {
      return;
    }
    this._unshiftCells(this.beforeShiftCells);
    this._unshiftCells(this.afterShiftCells);
    var t = this.cursorPosition;
    var e = this.cells.length - 1;
    this.beforeShiftCells = this._getGapCells(t, e, -1);
    t = this.size.innerWidth - this.cursorPosition;
    this.afterShiftCells = this._getGapCells(t, 0, 1);
  };
  v._getGapCells = function (t, e, i) {
    var n = [];
    while (t > 0) {
      var s = this.cells[e];
      if (!s) {
        break;
      }
      n.push(s);
      e += i;
      t -= s.size.outerWidth;
    }
    return n;
  };
  v._containSlides = function () {
    if (!this.options.contain || this.options.wrapAround || !this.cells.length) {
      return;
    }
    var t = this.options.rightToLeft;
    var e = t ? "marginRight" : "marginLeft";
    var i = t ? "marginLeft" : "marginRight";
    var n = this.slideableWidth - this.getLastCell().size[i];
    var s = n < this.size.innerWidth;
    var r = this.cursorPosition + this.cells[0].size[e];
    var o = n - this.size.innerWidth * (1 - this.cellAlign);
    this.slides.forEach(function (t) {
      if (s) {
        t.target = n * this.cellAlign;
      } else {
        t.target = Math.max(t.target, r);
        t.target = Math.min(t.target, o);
      }
    }, this);
  };
  v.dispatchEvent = function (t, e, i) {
    var n = e ? [e].concat(i) : i;
    this.emitEvent(t, n);
    if (l && this.$element) {
      t += this.options.namespaceJQueryEvents ? ".flickity" : "";
      var s = t;
      if (e) {
        var r = new l.Event(e);
        r.type = t;
        s = r;
      }
      this.$element.trigger(s, i);
    }
  };
  v.select = function (t, e, i) {
    if (!this.isActive) {
      return;
    }
    t = parseInt(t, 10);
    this._wrapSelect(t);
    if (this.options.wrapAround || e) {
      t = a.modulo(t, this.slides.length);
    }
    if (!this.slides[t]) {
      return;
    }
    var n = this.selectedIndex;
    this.selectedIndex = t;
    this.updateSelectedSlide();
    if (i) {
      this.positionSliderAtSelected();
    } else {
      this.startAnimation();
    }
    if (this.options.adaptiveHeight) {
      this.setGallerySize();
    }
    this.dispatchEvent("select", null, [t]);
    if (t != n) {
      this.dispatchEvent("change", null, [t]);
    }
    this.dispatchEvent("cellSelect");
  };
  v._wrapSelect = function (t) {
    var e = this.slides.length;
    var i = this.options.wrapAround && e > 1;
    if (!i) {
      return t;
    }
    var n = a.modulo(t, e);
    var s = Math.abs(n - this.selectedIndex);
    var r = Math.abs(n + e - this.selectedIndex);
    var o = Math.abs(n - e - this.selectedIndex);
    if (!this.isDragSelect && r < s) {
      t += e;
    } else if (!this.isDragSelect && o < s) {
      t -= e;
    }
    if (t < 0) {
      this.x -= this.slideableWidth;
    } else if (t >= e) {
      this.x += this.slideableWidth;
    }
  };
  v.previous = function (t, e) {
    this.select(this.selectedIndex - 1, t, e);
  };
  v.next = function (t, e) {
    this.select(this.selectedIndex + 1, t, e);
  };
  v.updateSelectedSlide = function () {
    var t = this.slides[this.selectedIndex];
    if (!t) {
      return;
    }
    this.unselectSelectedSlide();
    this.selectedSlide = t;
    t.select();
    this.selectedCells = t.cells;
    this.selectedElements = t.getCellElements();
    this.selectedCell = t.cells[0];
    this.selectedElement = this.selectedElements[0];
  };
  v.unselectSelectedSlide = function () {
    if (this.selectedSlide) {
      this.selectedSlide.unselect();
    }
  };
  v.selectInitialIndex = function () {
    var t = this.options.initialIndex;
    if (this.isInitActivated) {
      this.select(this.selectedIndex, false, true);
      return;
    }
    if (t && typeof t == "string") {
      var e = this.queryCell(t);
      if (e) {
        this.selectCell(t, false, true);
        return;
      }
    }
    var i = 0;
    if (t && this.slides[t]) {
      i = t;
    }
    this.select(i, false, true);
  };
  v.selectCell = function (t, e, i) {
    var n = this.queryCell(t);
    if (!n) {
      return;
    }
    var s = this.getCellSlideIndex(n);
    this.select(s, e, i);
  };
  v.getCellSlideIndex = function (t) {
    for (var e = 0; e < this.slides.length; e++) {
      var i = this.slides[e];
      var n = i.cells.indexOf(t);
      if (n != -1) {
        return e;
      }
    }
  };
  v.getCell = function (t) {
    for (var e = 0; e < this.cells.length; e++) {
      var i = this.cells[e];
      if (i.element == t) {
        return i;
      }
    }
  };
  v.getCells = function (t) {
    t = a.makeArray(t);
    var i = [];
    t.forEach(function (t) {
      var e = this.getCell(t);
      if (e) {
        i.push(e);
      }
    }, this);
    return i;
  };
  v.getCellElements = function () {
    return this.cells.map(function (t) {
      return t.element;
    });
  };
  v.getParentCell = function (t) {
    var e = this.getCell(t);
    if (e) {
      return e;
    }
    t = a.getParent(t, ".flickity-slider > *");
    return this.getCell(t);
  };
  v.getAdjacentCellElements = function (t, e) {
    if (!t) {
      return this.selectedSlide.getCellElements();
    }
    e = e === undefined ? this.selectedIndex : e;
    var i = this.slides.length;
    if (1 + t * 2 >= i) {
      return this.getCellElements();
    }
    var n = [];
    for (var s = e - t; s <= e + t; s++) {
      var r = this.options.wrapAround ? a.modulo(s, i) : s;
      var o = this.slides[r];
      if (o) {
        n = n.concat(o.getCellElements());
      }
    }
    return n;
  };
  v.queryCell = function (t) {
    if (typeof t == "number") {
      return this.cells[t];
    }
    if (typeof t == "string") {
      if (t.match(/^[#.]?[\d/]/)) {
        return;
      }
      t = this.element.querySelector(t);
    }
    return this.getCell(t);
  };
  v.uiChange = function () {
    this.emitEvent("uiChange");
  };
  v.childUIPointerDown = function (t) {
    if (t.type != "touchstart") {
      t.preventDefault();
    }
    this.focus();
  };
  v.onresize = function () {
    this.watchCSS();
    this.resize();
  };
  a.debounceMethod(p, "onresize", 150);
  v.resize = function () {
    if (!this.isActive || this.isAnimating || this.isDragging) {
      return;
    }
    this.getSize();
    if (this.options.wrapAround) {
      this.x = a.modulo(this.x, this.slideableWidth);
    }
    this.positionCells();
    this._getWrapShiftCells();
    this.setGallerySize();
    this.emitEvent("resize");
    var t = this.selectedElements && this.selectedElements[0];
    this.selectCell(t, false, true);
  };
  v.watchCSS = function () {
    var t = this.options.watchCSS;
    if (!t) {
      return;
    }
    var e = h(this.element, ":after").content;
    if (e.indexOf("flickity") != -1) {
      this.activate();
    } else {
      this.deactivate();
    }
  };
  v.onkeydown = function (t) {
    var e = document.activeElement && document.activeElement != this.element;
    if (!this.options.accessibility || e) {
      return;
    }
    var i = p.keyboardHandlers[t.keyCode];
    if (i) {
      i.call(this);
    }
  };
  p.keyboardHandlers = {
    37: function _() {
      var t = this.options.rightToLeft ? "next" : "previous";
      this.uiChange();
      this[t]();
    },
    39: function _() {
      var t = this.options.rightToLeft ? "previous" : "next";
      this.uiChange();
      this[t]();
    }
  };
  v.focus = function () {
    var t = n.pageYOffset;
    this.element.focus({
      preventScroll: true
    });
    if (n.pageYOffset != t) {
      n.scrollTo(n.pageXOffset, t);
    }
  };
  v.deactivate = function () {
    if (!this.isActive) {
      return;
    }
    this.element.classList.remove("flickity-enabled");
    this.element.classList.remove("flickity-rtl");
    this.unselectSelectedSlide();
    this.cells.forEach(function (t) {
      t.destroy();
    });
    this.element.removeChild(this.viewport);
    u(this.slider.children, this.element);
    if (this.options.accessibility) {
      this.element.removeAttribute("tabIndex");
      this.element.removeEventListener("keydown", this);
    }
    this.isActive = false;
    this.emitEvent("deactivate");
  };
  v.destroy = function () {
    this.deactivate();
    n.removeEventListener("resize", this);
    this.allOff();
    this.emitEvent("destroy");
    if (l && this.$element) {
      l.removeData(this.element, "flickity");
    }
    delete this.element.flickityGUID;
    delete f[this.guid];
  };
  a.extend(v, r);
  p.data = function (t) {
    t = a.getQueryElement(t);
    var e = t && t.flickityGUID;
    return e && f[e];
  };
  a.htmlInit(p, "flickity");
  if (l && l.bridget) {
    l.bridget("flickity", p);
  }
  p.setJQuery = function (t) {
    l = t;
  };
  p.Cell = s;
  p.Slide = o;
  return p;
});
/*!
 * Unipointer v2.4.0
 * base class for doing one thing with pointer event
 * MIT license
 */
(function (e, i) {
  if (typeof define == "function" && define.amd) {
    define("unipointer/unipointer", ["ev-emitter/ev-emitter"], function (t) {
      return i(e, t);
    });
  } else if ((typeof module === "undefined" ? "undefined" : _typeof(module)) == "object" && module.exports) {
    module.exports = i(e, require("ev-emitter"));
  } else {
    e.Unipointer = i(e, e.EvEmitter);
  }
})(window, function t(s, e) {
  function i() {}
  function n() {}
  var r = n.prototype = Object.create(e.prototype);
  r.bindStartEvent = function (t) {
    this._bindStartEvent(t, true);
  };
  r.unbindStartEvent = function (t) {
    this._bindStartEvent(t, false);
  };
  r._bindStartEvent = function (t, e) {
    e = e === undefined ? true : e;
    var i = e ? "addEventListener" : "removeEventListener";
    var n = "mousedown";
    if ("ontouchstart" in s) {
      n = "touchstart";
    } else if (s.PointerEvent) {
      n = "pointerdown";
    }
    t[i](n, this);
  };
  r.handleEvent = function (t) {
    var e = "on" + t.type;
    if (this[e]) {
      this[e](t);
    }
  };
  r.getTouch = function (t) {
    for (var e = 0; e < t.length; e++) {
      var i = t[e];
      if (i.identifier == this.pointerIdentifier) {
        return i;
      }
    }
  };
  r.onmousedown = function (t) {
    var e = t.button;
    if (e && e !== 0 && e !== 1) {
      return;
    }
    this._pointerDown(t, t);
  };
  r.ontouchstart = function (t) {
    this._pointerDown(t, t.changedTouches[0]);
  };
  r.onpointerdown = function (t) {
    this._pointerDown(t, t);
  };
  r._pointerDown = function (t, e) {
    if (t.button || this.isPointerDown) {
      return;
    }
    this.isPointerDown = true;
    this.pointerIdentifier = e.pointerId !== undefined ? e.pointerId : e.identifier;
    this.pointerDown(t, e);
  };
  r.pointerDown = function (t, e) {
    this._bindPostStartEvents(t);
    this.emitEvent("pointerDown", [t, e]);
  };
  var o = {
    mousedown: ["mousemove", "mouseup"],
    touchstart: ["touchmove", "touchend", "touchcancel"],
    pointerdown: ["pointermove", "pointerup", "pointercancel"]
  };
  r._bindPostStartEvents = function (t) {
    if (!t) {
      return;
    }
    var e = o[t.type];
    e.forEach(function (t) {
      s.addEventListener(t, this);
    }, this);
    this._boundPointerEvents = e;
  };
  r._unbindPostStartEvents = function () {
    if (!this._boundPointerEvents) {
      return;
    }
    this._boundPointerEvents.forEach(function (t) {
      s.removeEventListener(t, this);
    }, this);
    delete this._boundPointerEvents;
  };
  r.onmousemove = function (t) {
    this._pointerMove(t, t);
  };
  r.onpointermove = function (t) {
    if (t.pointerId == this.pointerIdentifier) {
      this._pointerMove(t, t);
    }
  };
  r.ontouchmove = function (t) {
    var e = this.getTouch(t.changedTouches);
    if (e) {
      this._pointerMove(t, e);
    }
  };
  r._pointerMove = function (t, e) {
    this.pointerMove(t, e);
  };
  r.pointerMove = function (t, e) {
    this.emitEvent("pointerMove", [t, e]);
  };
  r.onmouseup = function (t) {
    this._pointerUp(t, t);
  };
  r.onpointerup = function (t) {
    if (t.pointerId == this.pointerIdentifier) {
      this._pointerUp(t, t);
    }
  };
  r.ontouchend = function (t) {
    var e = this.getTouch(t.changedTouches);
    if (e) {
      this._pointerUp(t, e);
    }
  };
  r._pointerUp = function (t, e) {
    this._pointerDone();
    this.pointerUp(t, e);
  };
  r.pointerUp = function (t, e) {
    this.emitEvent("pointerUp", [t, e]);
  };
  r._pointerDone = function () {
    this._pointerReset();
    this._unbindPostStartEvents();
    this.pointerDone();
  };
  r._pointerReset = function () {
    this.isPointerDown = false;
    delete this.pointerIdentifier;
  };
  r.pointerDone = i;
  r.onpointercancel = function (t) {
    if (t.pointerId == this.pointerIdentifier) {
      this._pointerCancel(t, t);
    }
  };
  r.ontouchcancel = function (t) {
    var e = this.getTouch(t.changedTouches);
    if (e) {
      this._pointerCancel(t, e);
    }
  };
  r._pointerCancel = function (t, e) {
    this._pointerDone();
    this.pointerCancel(t, e);
  };
  r.pointerCancel = function (t, e) {
    this.emitEvent("pointerCancel", [t, e]);
  };
  n.getPointerPoint = function (t) {
    return {
      x: t.pageX,
      y: t.pageY
    };
  };
  return n;
});
/*!
 * Unidragger v2.4.0
 * Draggable base class
 * MIT license
 */
(function (e, i) {
  if (typeof define == "function" && define.amd) {
    define("unidragger/unidragger", ["unipointer/unipointer"], function (t) {
      return i(e, t);
    });
  } else if ((typeof module === "undefined" ? "undefined" : _typeof(module)) == "object" && module.exports) {
    module.exports = i(e, require("unipointer"));
  } else {
    e.Unidragger = i(e, e.Unipointer);
  }
})(window, function t(r, e) {
  function i() {}
  var n = i.prototype = Object.create(e.prototype);
  n.bindHandles = function () {
    this._bindHandles(true);
  };
  n.unbindHandles = function () {
    this._bindHandles(false);
  };
  n._bindHandles = function (t) {
    t = t === undefined ? true : t;
    var e = t ? "addEventListener" : "removeEventListener";
    var i = t ? this._touchActionValue : "";
    for (var n = 0; n < this.handles.length; n++) {
      var s = this.handles[n];
      this._bindStartEvent(s, t);
      s[e]("click", this);
      if (r.PointerEvent) {
        s.style.touchAction = i;
      }
    }
  };
  n._touchActionValue = "none";
  n.pointerDown = function (t, e) {
    var i = this.okayPointerDown(t);
    if (!i) {
      return;
    }
    this.pointerDownPointer = {
      pageX: e.pageX,
      pageY: e.pageY
    };
    t.preventDefault();
    this.pointerDownBlur();
    this._bindPostStartEvents(t);
    this.emitEvent("pointerDown", [t, e]);
  };
  var s = {
    TEXTAREA: true,
    INPUT: true,
    SELECT: true,
    OPTION: true
  };
  var o = {
    radio: true,
    checkbox: true,
    button: true,
    submit: true,
    image: true,
    file: true
  };
  n.okayPointerDown = function (t) {
    var e = s[t.target.nodeName];
    var i = o[t.target.type];
    var n = !e || i;
    if (!n) {
      this._pointerReset();
    }
    return n;
  };
  n.pointerDownBlur = function () {
    var t = document.activeElement;
    var e = t && t.blur && t != document.body;
    if (e) {
      t.blur();
    }
  };
  n.pointerMove = function (t, e) {
    var i = this._dragPointerMove(t, e);
    this.emitEvent("pointerMove", [t, e, i]);
    this._dragMove(t, e, i);
  };
  n._dragPointerMove = function (t, e) {
    var i = {
      x: e.pageX - this.pointerDownPointer.pageX,
      y: e.pageY - this.pointerDownPointer.pageY
    };
    if (!this.isDragging && this.hasDragStarted(i)) {
      this._dragStart(t, e);
    }
    return i;
  };
  n.hasDragStarted = function (t) {
    return Math.abs(t.x) > 3 || Math.abs(t.y) > 3;
  };
  n.pointerUp = function (t, e) {
    this.emitEvent("pointerUp", [t, e]);
    this._dragPointerUp(t, e);
  };
  n._dragPointerUp = function (t, e) {
    if (this.isDragging) {
      this._dragEnd(t, e);
    } else {
      this._staticClick(t, e);
    }
  };
  n._dragStart = function (t, e) {
    this.isDragging = true;
    this.isPreventingClicks = true;
    this.dragStart(t, e);
  };
  n.dragStart = function (t, e) {
    this.emitEvent("dragStart", [t, e]);
  };
  n._dragMove = function (t, e, i) {
    if (!this.isDragging) {
      return;
    }
    this.dragMove(t, e, i);
  };
  n.dragMove = function (t, e, i) {
    t.preventDefault();
    this.emitEvent("dragMove", [t, e, i]);
  };
  n._dragEnd = function (t, e) {
    this.isDragging = false;
    setTimeout(function () {
      delete this.isPreventingClicks;
    }.bind(this));
    this.dragEnd(t, e);
  };
  n.dragEnd = function (t, e) {
    this.emitEvent("dragEnd", [t, e]);
  };
  n.onclick = function (t) {
    if (this.isPreventingClicks) {
      t.preventDefault();
    }
  };
  n._staticClick = function (t, e) {
    if (this.isIgnoringMouseUp && t.type == "mouseup") {
      return;
    }
    this.staticClick(t, e);
    if (t.type != "mouseup") {
      this.isIgnoringMouseUp = true;
      setTimeout(function () {
        delete this.isIgnoringMouseUp;
      }.bind(this), 400);
    }
  };
  n.staticClick = function (t, e) {
    this.emitEvent("staticClick", [t, e]);
  };
  i.getPointerPoint = e.getPointerPoint;
  return i;
});
(function (n, s) {
  if (typeof define == "function" && define.amd) {
    define("flickity/js/drag", ["./flickity", "unidragger/unidragger", "fizzy-ui-utils/utils"], function (t, e, i) {
      return s(n, t, e, i);
    });
  } else if ((typeof module === "undefined" ? "undefined" : _typeof(module)) == "object" && module.exports) {
    module.exports = s(n, require("./flickity"), require("unidragger"), require("fizzy-ui-utils"));
  } else {
    n.Flickity = s(n, n.Flickity, n.Unidragger, n.fizzyUIUtils);
  }
})(window, function t(n, e, i, a) {
  a.extend(e.defaults, {
    draggable: ">1",
    dragThreshold: 3
  });
  e.createMethods.push("_createDrag");
  var s = e.prototype;
  a.extend(s, i.prototype);
  s._touchActionValue = "pan-y";
  s._createDrag = function () {
    this.on("activate", this.onActivateDrag);
    this.on("uiChange", this._uiChangeDrag);
    this.on("deactivate", this.onDeactivateDrag);
    this.on("cellChange", this.updateDraggable);
  };
  s.onActivateDrag = function () {
    this.handles = [this.viewport];
    this.bindHandles();
    this.updateDraggable();
  };
  s.onDeactivateDrag = function () {
    this.unbindHandles();
    this.element.classList.remove("is-draggable");
  };
  s.updateDraggable = function () {
    if (this.options.draggable == ">1") {
      this.isDraggable = this.slides.length > 1;
    } else {
      this.isDraggable = this.options.draggable;
    }
    if (this.isDraggable) {
      this.element.classList.add("is-draggable");
    } else {
      this.element.classList.remove("is-draggable");
    }
  };
  s.bindDrag = function () {
    this.options.draggable = true;
    this.updateDraggable();
  };
  s.unbindDrag = function () {
    this.options.draggable = false;
    this.updateDraggable();
  };
  s._uiChangeDrag = function () {
    delete this.isFreeScrolling;
  };
  s.pointerDown = function (t, e) {
    if (!this.isDraggable) {
      this._pointerDownDefault(t, e);
      return;
    }
    var i = this.okayPointerDown(t);
    if (!i) {
      return;
    }
    this._pointerDownPreventDefault(t);
    this.pointerDownFocus(t);
    if (document.activeElement != this.element) {
      this.pointerDownBlur();
    }
    this.dragX = this.x;
    this.viewport.classList.add("is-pointer-down");
    this.pointerDownScroll = o();
    n.addEventListener("scroll", this);
    this._pointerDownDefault(t, e);
  };
  s._pointerDownDefault = function (t, e) {
    this.pointerDownPointer = {
      pageX: e.pageX,
      pageY: e.pageY
    };
    this._bindPostStartEvents(t);
    this.dispatchEvent("pointerDown", t, [e]);
  };
  var r = {
    INPUT: true,
    TEXTAREA: true,
    SELECT: true
  };
  s.pointerDownFocus = function (t) {
    var e = r[t.target.nodeName];
    if (!e) {
      this.focus();
    }
  };
  s._pointerDownPreventDefault = function (t) {
    var e = t.type == "touchstart";
    var i = t.pointerType == "touch";
    var n = r[t.target.nodeName];
    if (!e && !i && !n) {
      t.preventDefault();
    }
  };
  s.hasDragStarted = function (t) {
    return Math.abs(t.x) > this.options.dragThreshold;
  };
  s.pointerUp = function (t, e) {
    delete this.isTouchScrolling;
    this.viewport.classList.remove("is-pointer-down");
    this.dispatchEvent("pointerUp", t, [e]);
    this._dragPointerUp(t, e);
  };
  s.pointerDone = function () {
    n.removeEventListener("scroll", this);
    delete this.pointerDownScroll;
  };
  s.dragStart = function (t, e) {
    if (!this.isDraggable) {
      return;
    }
    this.dragStartPosition = this.x;
    this.startAnimation();
    n.removeEventListener("scroll", this);
    this.dispatchEvent("dragStart", t, [e]);
  };
  s.pointerMove = function (t, e) {
    var i = this._dragPointerMove(t, e);
    this.dispatchEvent("pointerMove", t, [e, i]);
    this._dragMove(t, e, i);
  };
  s.dragMove = function (t, e, i) {
    if (!this.isDraggable) {
      return;
    }
    t.preventDefault();
    this.previousDragX = this.dragX;
    var n = this.options.rightToLeft ? -1 : 1;
    if (this.options.wrapAround) {
      i.x %= this.slideableWidth;
    }
    var s = this.dragStartPosition + i.x * n;
    if (!this.options.wrapAround && this.slides.length) {
      var r = Math.max(-this.slides[0].target, this.dragStartPosition);
      s = s > r ? (s + r) * .5 : s;
      var o = Math.min(-this.getLastSlide().target, this.dragStartPosition);
      s = s < o ? (s + o) * .5 : s;
    }
    this.dragX = s;
    this.dragMoveTime = new Date();
    this.dispatchEvent("dragMove", t, [e, i]);
  };
  s.dragEnd = function (t, e) {
    if (!this.isDraggable) {
      return;
    }
    if (this.options.freeScroll) {
      this.isFreeScrolling = true;
    }
    var i = this.dragEndRestingSelect();
    if (this.options.freeScroll && !this.options.wrapAround) {
      var n = this.getRestingPosition();
      this.isFreeScrolling = -n > this.slides[0].target && -n < this.getLastSlide().target;
    } else if (!this.options.freeScroll && i == this.selectedIndex) {
      i += this.dragEndBoostSelect();
    }
    delete this.previousDragX;
    this.isDragSelect = this.options.wrapAround;
    this.select(i);
    delete this.isDragSelect;
    this.dispatchEvent("dragEnd", t, [e]);
  };
  s.dragEndRestingSelect = function () {
    var t = this.getRestingPosition();
    var e = Math.abs(this.getSlideDistance(-t, this.selectedIndex));
    var i = this._getClosestResting(t, e, 1);
    var n = this._getClosestResting(t, e, -1);
    var s = i.distance < n.distance ? i.index : n.index;
    return s;
  };
  s._getClosestResting = function (t, e, i) {
    var n = this.selectedIndex;
    var s = Infinity;
    var r = this.options.contain && !this.options.wrapAround ? function (t, e) {
      return t <= e;
    } : function (t, e) {
      return t < e;
    };
    while (r(e, s)) {
      n += i;
      s = e;
      e = this.getSlideDistance(-t, n);
      if (e === null) {
        break;
      }
      e = Math.abs(e);
    }
    return {
      distance: s,
      index: n - i
    };
  };
  s.getSlideDistance = function (t, e) {
    var i = this.slides.length;
    var n = this.options.wrapAround && i > 1;
    var s = n ? a.modulo(e, i) : e;
    var r = this.slides[s];
    if (!r) {
      return null;
    }
    var o = n ? this.slideableWidth * Math.floor(e / i) : 0;
    return t - (r.target + o);
  };
  s.dragEndBoostSelect = function () {
    if (this.previousDragX === undefined || !this.dragMoveTime || new Date() - this.dragMoveTime > 100) {
      return 0;
    }
    var t = this.getSlideDistance(-this.dragX, this.selectedIndex);
    var e = this.previousDragX - this.dragX;
    if (t > 0 && e > 0) {
      return 1;
    } else if (t < 0 && e < 0) {
      return -1;
    }
    return 0;
  };
  s.staticClick = function (t, e) {
    var i = this.getParentCell(t.target);
    var n = i && i.element;
    var s = i && this.cells.indexOf(i);
    this.dispatchEvent("staticClick", t, [e, n, s]);
  };
  s.onscroll = function () {
    var t = o();
    var e = this.pointerDownScroll.x - t.x;
    var i = this.pointerDownScroll.y - t.y;
    if (Math.abs(e) > 3 || Math.abs(i) > 3) {
      this._pointerDone();
    }
  };
  function o() {
    return {
      x: n.pageXOffset,
      y: n.pageYOffset
    };
  }
  return e;
});
(function (n, s) {
  if (typeof define == "function" && define.amd) {
    define("flickity/js/prev-next-button", ["./flickity", "unipointer/unipointer", "fizzy-ui-utils/utils"], function (t, e, i) {
      return s(n, t, e, i);
    });
  } else if ((typeof module === "undefined" ? "undefined" : _typeof(module)) == "object" && module.exports) {
    module.exports = s(n, require("./flickity"), require("unipointer"), require("fizzy-ui-utils"));
  } else {
    s(n, n.Flickity, n.Unipointer, n.fizzyUIUtils);
  }
})(window, function t(e, i, n, s) {
  "use strict";

  var r = "http://www.w3.org/2000/svg";
  function o(t, e) {
    this.direction = t;
    this.parent = e;
    this._create();
  }
  o.prototype = Object.create(n.prototype);
  o.prototype._create = function () {
    this.isEnabled = true;
    this.isPrevious = this.direction == -1;
    var t = this.parent.options.rightToLeft ? 1 : -1;
    this.isLeft = this.direction == t;
    var e = this.element = document.createElement("button");
    e.className = "flickity-button flickity-prev-next-button";
    e.className += this.isPrevious ? " previous" : " next";
    e.setAttribute("type", "button");
    this.disable();
    e.setAttribute("aria-label", this.isPrevious ? "Previous" : "Next");
    var i = this.createSVG();
    e.appendChild(i);
    this.parent.on("select", this.update.bind(this));
    this.on("pointerDown", this.parent.childUIPointerDown.bind(this.parent));
  };
  o.prototype.activate = function () {
    this.bindStartEvent(this.element);
    this.element.addEventListener("click", this);
    this.parent.element.appendChild(this.element);
  };
  o.prototype.deactivate = function () {
    this.parent.element.removeChild(this.element);
    this.unbindStartEvent(this.element);
    this.element.removeEventListener("click", this);
  };
  o.prototype.createSVG = function () {
    var t = document.createElementNS(r, "svg");
    t.setAttribute("class", "flickity-button-icon");
    t.setAttribute("viewBox", "0 0 100 100");
    var e = document.createElementNS(r, "path");
    var i = a(this.parent.options.arrowShape);
    e.setAttribute("d", i);
    e.setAttribute("class", "arrow");
    if (!this.isLeft) {
      e.setAttribute("transform", "translate(100, 100) rotate(180) ");
    }
    t.appendChild(e);
    return t;
  };
  function a(t) {
    if (typeof t == "string") {
      return t;
    }
    return "M " + t.x0 + ",50" + " L " + t.x1 + "," + (t.y1 + 50) + " L " + t.x2 + "," + (t.y2 + 50) + " L " + t.x3 + ",50 " + " L " + t.x2 + "," + (50 - t.y2) + " L " + t.x1 + "," + (50 - t.y1) + " Z";
  }
  o.prototype.handleEvent = s.handleEvent;
  o.prototype.onclick = function () {
    if (!this.isEnabled) {
      return;
    }
    this.parent.uiChange();
    var t = this.isPrevious ? "previous" : "next";
    this.parent[t]();
  };
  o.prototype.enable = function () {
    if (this.isEnabled) {
      return;
    }
    this.element.disabled = false;
    this.isEnabled = true;
  };
  o.prototype.disable = function () {
    if (!this.isEnabled) {
      return;
    }
    this.element.disabled = true;
    this.isEnabled = false;
  };
  o.prototype.update = function () {
    var t = this.parent.slides;
    if (this.parent.options.wrapAround && t.length > 1) {
      this.enable();
      return;
    }
    var e = t.length ? t.length - 1 : 0;
    var i = this.isPrevious ? 0 : e;
    var n = this.parent.selectedIndex == i ? "disable" : "enable";
    this[n]();
  };
  o.prototype.destroy = function () {
    this.deactivate();
    this.allOff();
  };
  s.extend(i.defaults, {
    prevNextButtons: true,
    arrowShape: {
      x0: 10,
      x1: 60,
      y1: 50,
      x2: 70,
      y2: 40,
      x3: 30
    }
  });
  i.createMethods.push("_createPrevNextButtons");
  var l = i.prototype;
  l._createPrevNextButtons = function () {
    if (!this.options.prevNextButtons) {
      return;
    }
    this.prevButton = new o(-1, this);
    this.nextButton = new o(1, this);
    this.on("activate", this.activatePrevNextButtons);
  };
  l.activatePrevNextButtons = function () {
    this.prevButton.activate();
    this.nextButton.activate();
    this.on("deactivate", this.deactivatePrevNextButtons);
  };
  l.deactivatePrevNextButtons = function () {
    this.prevButton.deactivate();
    this.nextButton.deactivate();
    this.off("deactivate", this.deactivatePrevNextButtons);
  };
  i.PrevNextButton = o;
  return i;
});
(function (n, s) {
  if (typeof define == "function" && define.amd) {
    define("flickity/js/page-dots", ["./flickity", "unipointer/unipointer", "fizzy-ui-utils/utils"], function (t, e, i) {
      return s(n, t, e, i);
    });
  } else if ((typeof module === "undefined" ? "undefined" : _typeof(module)) == "object" && module.exports) {
    module.exports = s(n, require("./flickity"), require("unipointer"), require("fizzy-ui-utils"));
  } else {
    s(n, n.Flickity, n.Unipointer, n.fizzyUIUtils);
  }
})(window, function t(e, i, n, s) {
  function r(t) {
    this.parent = t;
    this._create();
  }
  r.prototype = Object.create(n.prototype);
  r.prototype._create = function () {
    this.holder = document.createElement("ol");
    this.holder.className = "flickity-page-dots";
    this.dots = [];
    this.handleClick = this.onClick.bind(this);
    this.on("pointerDown", this.parent.childUIPointerDown.bind(this.parent));
  };
  r.prototype.activate = function () {
    this.setDots();
    this.holder.addEventListener("click", this.handleClick);
    this.bindStartEvent(this.holder);
    this.parent.element.appendChild(this.holder);
  };
  r.prototype.deactivate = function () {
    this.holder.removeEventListener("click", this.handleClick);
    this.unbindStartEvent(this.holder);
    this.parent.element.removeChild(this.holder);
  };
  r.prototype.setDots = function () {
    var t = this.parent.slides.length - this.dots.length;
    if (t > 0) {
      this.addDots(t);
    } else if (t < 0) {
      this.removeDots(-t);
    }
  };
  r.prototype.addDots = function (t) {
    var e = document.createDocumentFragment();
    var i = [];
    var n = this.dots.length;
    var s = n + t;
    for (var r = n; r < s; r++) {
      var o = document.createElement("li");
      o.className = "dot";
      o.setAttribute("aria-label", "Page dot " + (r + 1));
      e.appendChild(o);
      i.push(o);
    }
    this.holder.appendChild(e);
    this.dots = this.dots.concat(i);
  };
  r.prototype.removeDots = function (t) {
    var e = this.dots.splice(this.dots.length - t, t);
    e.forEach(function (t) {
      this.holder.removeChild(t);
    }, this);
  };
  r.prototype.updateSelected = function () {
    if (this.selectedDot) {
      this.selectedDot.className = "dot";
      this.selectedDot.removeAttribute("aria-current");
    }
    if (!this.dots.length) {
      return;
    }
    this.selectedDot = this.dots[this.parent.selectedIndex];
    this.selectedDot.className = "dot is-selected";
    this.selectedDot.setAttribute("aria-current", "step");
  };
  r.prototype.onTap = r.prototype.onClick = function (t) {
    var e = t.target;
    if (e.nodeName != "LI") {
      return;
    }
    this.parent.uiChange();
    var i = this.dots.indexOf(e);
    this.parent.select(i);
  };
  r.prototype.destroy = function () {
    this.deactivate();
    this.allOff();
  };
  i.PageDots = r;
  s.extend(i.defaults, {
    pageDots: true
  });
  i.createMethods.push("_createPageDots");
  var o = i.prototype;
  o._createPageDots = function () {
    if (!this.options.pageDots) {
      return;
    }
    this.pageDots = new r(this);
    this.on("activate", this.activatePageDots);
    this.on("select", this.updateSelectedPageDots);
    this.on("cellChange", this.updatePageDots);
    this.on("resize", this.updatePageDots);
    this.on("deactivate", this.deactivatePageDots);
  };
  o.activatePageDots = function () {
    this.pageDots.activate();
  };
  o.updateSelectedPageDots = function () {
    this.pageDots.updateSelected();
  };
  o.updatePageDots = function () {
    this.pageDots.setDots();
  };
  o.deactivatePageDots = function () {
    this.pageDots.deactivate();
  };
  i.PageDots = r;
  return i;
});
(function (t, n) {
  if (typeof define == "function" && define.amd) {
    define("flickity/js/player", ["ev-emitter/ev-emitter", "fizzy-ui-utils/utils", "./flickity"], function (t, e, i) {
      return n(t, e, i);
    });
  } else if ((typeof module === "undefined" ? "undefined" : _typeof(module)) == "object" && module.exports) {
    module.exports = n(require("ev-emitter"), require("fizzy-ui-utils"), require("./flickity"));
  } else {
    n(t.EvEmitter, t.fizzyUIUtils, t.Flickity);
  }
})(window, function t(e, i, n) {
  function s(t) {
    this.parent = t;
    this.state = "stopped";
    this.onVisibilityChange = this.visibilityChange.bind(this);
    this.onVisibilityPlay = this.visibilityPlay.bind(this);
  }
  s.prototype = Object.create(e.prototype);
  s.prototype.play = function () {
    if (this.state == "playing") {
      return;
    }
    var t = document.hidden;
    if (t) {
      document.addEventListener("visibilitychange", this.onVisibilityPlay);
      return;
    }
    this.state = "playing";
    document.addEventListener("visibilitychange", this.onVisibilityChange);
    this.tick();
  };
  s.prototype.tick = function () {
    if (this.state != "playing") {
      return;
    }
    var t = this.parent.options.autoPlay;
    t = typeof t == "number" ? t : 3e3;
    var e = this;
    this.clear();
    this.timeout = setTimeout(function () {
      e.parent.next(true);
      e.tick();
    }, t);
  };
  s.prototype.stop = function () {
    this.state = "stopped";
    this.clear();
    document.removeEventListener("visibilitychange", this.onVisibilityChange);
  };
  s.prototype.clear = function () {
    clearTimeout(this.timeout);
  };
  s.prototype.pause = function () {
    if (this.state == "playing") {
      this.state = "paused";
      this.clear();
    }
  };
  s.prototype.unpause = function () {
    if (this.state == "paused") {
      this.play();
    }
  };
  s.prototype.visibilityChange = function () {
    var t = document.hidden;
    this[t ? "pause" : "unpause"]();
  };
  s.prototype.visibilityPlay = function () {
    this.play();
    document.removeEventListener("visibilitychange", this.onVisibilityPlay);
  };
  i.extend(n.defaults, {
    pauseAutoPlayOnHover: true
  });
  n.createMethods.push("_createPlayer");
  var r = n.prototype;
  r._createPlayer = function () {
    this.player = new s(this);
    this.on("activate", this.activatePlayer);
    this.on("uiChange", this.stopPlayer);
    this.on("pointerDown", this.stopPlayer);
    this.on("deactivate", this.deactivatePlayer);
  };
  r.activatePlayer = function () {
    if (!this.options.autoPlay) {
      return;
    }
    this.player.play();
    this.element.addEventListener("mouseenter", this);
  };
  r.playPlayer = function () {
    this.player.play();
  };
  r.stopPlayer = function () {
    this.player.stop();
  };
  r.pausePlayer = function () {
    this.player.pause();
  };
  r.unpausePlayer = function () {
    this.player.unpause();
  };
  r.deactivatePlayer = function () {
    this.player.stop();
    this.element.removeEventListener("mouseenter", this);
  };
  r.onmouseenter = function () {
    if (!this.options.pauseAutoPlayOnHover) {
      return;
    }
    this.player.pause();
    this.element.addEventListener("mouseleave", this);
  };
  r.onmouseleave = function () {
    this.player.unpause();
    this.element.removeEventListener("mouseleave", this);
  };
  n.Player = s;
  return n;
});
(function (i, n) {
  if (typeof define == "function" && define.amd) {
    define("flickity/js/add-remove-cell", ["./flickity", "fizzy-ui-utils/utils"], function (t, e) {
      return n(i, t, e);
    });
  } else if ((typeof module === "undefined" ? "undefined" : _typeof(module)) == "object" && module.exports) {
    module.exports = n(i, require("./flickity"), require("fizzy-ui-utils"));
  } else {
    n(i, i.Flickity, i.fizzyUIUtils);
  }
})(window, function t(e, i, n) {
  function l(t) {
    var e = document.createDocumentFragment();
    t.forEach(function (t) {
      e.appendChild(t.element);
    });
    return e;
  }
  var s = i.prototype;
  s.insert = function (t, e) {
    var i = this._makeCells(t);
    if (!i || !i.length) {
      return;
    }
    var n = this.cells.length;
    e = e === undefined ? n : e;
    var s = l(i);
    var r = e == n;
    if (r) {
      this.slider.appendChild(s);
    } else {
      var o = this.cells[e].element;
      this.slider.insertBefore(s, o);
    }
    if (e === 0) {
      this.cells = i.concat(this.cells);
    } else if (r) {
      this.cells = this.cells.concat(i);
    } else {
      var a = this.cells.splice(e, n - e);
      this.cells = this.cells.concat(i).concat(a);
    }
    this._sizeCells(i);
    this.cellChange(e, true);
  };
  s.append = function (t) {
    this.insert(t, this.cells.length);
  };
  s.prepend = function (t) {
    this.insert(t, 0);
  };
  s.remove = function (t) {
    var e = this.getCells(t);
    if (!e || !e.length) {
      return;
    }
    var i = this.cells.length - 1;
    e.forEach(function (t) {
      t.remove();
      var e = this.cells.indexOf(t);
      i = Math.min(e, i);
      n.removeFrom(this.cells, t);
    }, this);
    this.cellChange(i, true);
  };
  s.cellSizeChange = function (t) {
    var e = this.getCell(t);
    if (!e) {
      return;
    }
    e.getSize();
    var i = this.cells.indexOf(e);
    this.cellChange(i);
  };
  s.cellChange = function (t, e) {
    var i = this.selectedElement;
    this._positionCells(t);
    this._getWrapShiftCells();
    this.setGallerySize();
    var n = this.getCell(i);
    if (n) {
      this.selectedIndex = this.getCellSlideIndex(n);
    }
    this.selectedIndex = Math.min(this.slides.length - 1, this.selectedIndex);
    this.emitEvent("cellChange", [t]);
    this.select(this.selectedIndex);
    if (e) {
      this.positionSliderAtSelected();
    }
  };
  return i;
});
(function (i, n) {
  if (typeof define == "function" && define.amd) {
    define("flickity/js/lazyload", ["./flickity", "fizzy-ui-utils/utils"], function (t, e) {
      return n(i, t, e);
    });
  } else if ((typeof module === "undefined" ? "undefined" : _typeof(module)) == "object" && module.exports) {
    module.exports = n(i, require("./flickity"), require("fizzy-ui-utils"));
  } else {
    n(i, i.Flickity, i.fizzyUIUtils);
  }
})(window, function t(e, i, o) {
  "use strict";

  i.createMethods.push("_createLazyload");
  var n = i.prototype;
  n._createLazyload = function () {
    this.on("select", this.lazyLoad);
  };
  n.lazyLoad = function () {
    var t = this.options.lazyLoad;
    if (!t) {
      return;
    }
    var e = typeof t == "number" ? t : 0;
    var i = this.getAdjacentCellElements(e);
    var n = [];
    i.forEach(function (t) {
      var e = s(t);
      n = n.concat(e);
    });
    n.forEach(function (t) {
      new r(t, this);
    }, this);
  };
  function s(t) {
    if (t.nodeName == "IMG") {
      var e = t.getAttribute("data-flickity-lazyload");
      var i = t.getAttribute("data-flickity-lazyload-src");
      var n = t.getAttribute("data-flickity-lazyload-srcset");
      if (e || i || n) {
        return [t];
      }
    }
    var s = "img[data-flickity-lazyload], " + "img[data-flickity-lazyload-src], img[data-flickity-lazyload-srcset]";
    var r = t.querySelectorAll(s);
    return o.makeArray(r);
  }
  function r(t, e) {
    this.img = t;
    this.flickity = e;
    this.load();
  }
  r.prototype.handleEvent = o.handleEvent;
  r.prototype.load = function () {
    this.img.addEventListener("load", this);
    this.img.addEventListener("error", this);
    var t = this.img.getAttribute("data-flickity-lazyload") || this.img.getAttribute("data-flickity-lazyload-src");
    var e = this.img.getAttribute("data-flickity-lazyload-srcset");
    this.img.src = t;
    if (e) {
      this.img.setAttribute("srcset", e);
    }
    this.img.removeAttribute("data-flickity-lazyload");
    this.img.removeAttribute("data-flickity-lazyload-src");
    this.img.removeAttribute("data-flickity-lazyload-srcset");
  };
  r.prototype.onload = function (t) {
    this.complete(t, "flickity-lazyloaded");
  };
  r.prototype.onerror = function (t) {
    this.complete(t, "flickity-lazyerror");
  };
  r.prototype.complete = function (t, e) {
    this.img.removeEventListener("load", this);
    this.img.removeEventListener("error", this);
    var i = this.flickity.getParentCell(this.img);
    var n = i && i.element;
    this.flickity.cellSizeChange(n);
    this.img.classList.add(e);
    this.flickity.dispatchEvent("lazyLoad", t, n);
  };
  i.LazyLoader = r;
  return i;
});
/*!
 * Flickity v2.3.0
 * Touch, responsive, flickable carousels
 *
 * Licensed GPLv3 for open source use
 * or Flickity Commercial License for commercial use
 *
 * https://flickity.metafizzy.co
 * Copyright 2015-2021 Metafizzy
 */
(function (t, e) {
  if (typeof define == "function" && define.amd) {
    define("flickity/js/index", ["./flickity", "./drag", "./prev-next-button", "./page-dots", "./player", "./add-remove-cell", "./lazyload"], e);
  } else if ((typeof module === "undefined" ? "undefined" : _typeof(module)) == "object" && module.exports) {
    module.exports = e(require("./flickity"), require("./drag"), require("./prev-next-button"), require("./page-dots"), require("./player"), require("./add-remove-cell"), require("./lazyload"));
  }
})(window, function t(e) {
  return e;
});
/*!
 * Flickity asNavFor v2.0.2
 * enable asNavFor for Flickity
 */
(function (t, e) {
  if (typeof define == "function" && define.amd) {
    define("flickity-as-nav-for/as-nav-for", ["flickity/js/index", "fizzy-ui-utils/utils"], e);
  } else if ((typeof module === "undefined" ? "undefined" : _typeof(module)) == "object" && module.exports) {
    module.exports = e(require("flickity"), require("fizzy-ui-utils"));
  } else {
    t.Flickity = e(t.Flickity, t.fizzyUIUtils);
  }
})(window, function t(n, s) {
  n.createMethods.push("_createAsNavFor");
  var e = n.prototype;
  e._createAsNavFor = function () {
    this.on("activate", this.activateAsNavFor);
    this.on("deactivate", this.deactivateAsNavFor);
    this.on("destroy", this.destroyAsNavFor);
    var e = this.options.asNavFor;
    if (!e) {
      return;
    }
    var i = this;
    setTimeout(function t() {
      i.setNavCompanion(e);
    });
  };
  e.setNavCompanion = function (t) {
    t = s.getQueryElement(t);
    var e = n.data(t);
    if (!e || e == this) {
      return;
    }
    this.navCompanion = e;
    var i = this;
    this.onNavCompanionSelect = function () {
      i.navCompanionSelect();
    };
    e.on("select", this.onNavCompanionSelect);
    this.on("staticClick", this.onNavStaticClick);
    this.navCompanionSelect(true);
  };
  e.navCompanionSelect = function (t) {
    var e = this.navCompanion && this.navCompanion.selectedCells;
    if (!e) {
      return;
    }
    var i = e[0];
    var n = this.navCompanion.cells.indexOf(i);
    var s = n + e.length - 1;
    var r = Math.floor(a(n, s, this.navCompanion.cellAlign));
    this.selectCell(r, false, t);
    this.removeNavSelectedElements();
    if (r >= this.cells.length) {
      return;
    }
    var o = this.cells.slice(n, s + 1);
    this.navSelectedElements = o.map(function (t) {
      return t.element;
    });
    this.changeNavSelectedClass("add");
  };
  function a(t, e, i) {
    return (e - t) * i + t;
  }
  e.changeNavSelectedClass = function (e) {
    this.navSelectedElements.forEach(function (t) {
      t.classList[e]("is-nav-selected");
    });
  };
  e.activateAsNavFor = function () {
    this.navCompanionSelect(true);
  };
  e.removeNavSelectedElements = function () {
    if (!this.navSelectedElements) {
      return;
    }
    this.changeNavSelectedClass("remove");
    delete this.navSelectedElements;
  };
  e.onNavStaticClick = function (t, e, i, n) {
    if (typeof n == "number") {
      this.navCompanion.selectCell(n);
    }
  };
  e.deactivateAsNavFor = function () {
    this.removeNavSelectedElements();
  };
  e.destroyAsNavFor = function () {
    if (!this.navCompanion) {
      return;
    }
    this.navCompanion.off("select", this.onNavCompanionSelect);
    this.off("staticClick", this.onNavStaticClick);
    delete this.navCompanion;
  };
  return n;
});
/*!
 * imagesLoaded v4.1.4
 * JavaScript is all like "You images are done yet or what?"
 * MIT License
 */
(function (e, i) {
  "use strict";

  if (typeof define == "function" && define.amd) {
    define("imagesloaded/imagesloaded", ["ev-emitter/ev-emitter"], function (t) {
      return i(e, t);
    });
  } else if ((typeof module === "undefined" ? "undefined" : _typeof(module)) == "object" && module.exports) {
    module.exports = i(e, require("ev-emitter"));
  } else {
    e.imagesLoaded = i(e, e.EvEmitter);
  }
})(typeof window !== "undefined" ? window : void 0, function t(e, i) {
  var s = e.jQuery;
  var r = e.console;
  function o(t, e) {
    for (var i in e) {
      t[i] = e[i];
    }
    return t;
  }
  var n = Array.prototype.slice;
  function a(t) {
    if (Array.isArray(t)) {
      return t;
    }
    var e = _typeof(t) == "object" && typeof t.length == "number";
    if (e) {
      return n.call(t);
    }
    return [t];
  }
  function l(t, e, i) {
    if (!(this instanceof l)) {
      return new l(t, e, i);
    }
    var n = t;
    if (typeof t == "string") {
      n = document.querySelectorAll(t);
    }
    if (!n) {
      r.error("Bad element for imagesLoaded " + (n || t));
      return;
    }
    this.elements = a(n);
    this.options = o({}, this.options);
    if (typeof e == "function") {
      i = e;
    } else {
      o(this.options, e);
    }
    if (i) {
      this.on("always", i);
    }
    this.getImages();
    if (s) {
      this.jqDeferred = new s.Deferred();
    }
    setTimeout(this.check.bind(this));
  }
  l.prototype = Object.create(i.prototype);
  l.prototype.options = {};
  l.prototype.getImages = function () {
    this.images = [];
    this.elements.forEach(this.addElementImages, this);
  };
  l.prototype.addElementImages = function (t) {
    if (t.nodeName == "IMG") {
      this.addImage(t);
    }
    if (this.options.background === true) {
      this.addElementBackgroundImages(t);
    }
    var e = t.nodeType;
    if (!e || !h[e]) {
      return;
    }
    var i = t.querySelectorAll("img");
    for (var n = 0; n < i.length; n++) {
      var s = i[n];
      this.addImage(s);
    }
    if (typeof this.options.background == "string") {
      var r = t.querySelectorAll(this.options.background);
      for (n = 0; n < r.length; n++) {
        var o = r[n];
        this.addElementBackgroundImages(o);
      }
    }
  };
  var h = {
    1: true,
    9: true,
    11: true
  };
  l.prototype.addElementBackgroundImages = function (t) {
    var e = getComputedStyle(t);
    if (!e) {
      return;
    }
    var i = /url\((['"])?(.*?)\1\)/gi;
    var n = i.exec(e.backgroundImage);
    while (n !== null) {
      var s = n && n[2];
      if (s) {
        this.addBackground(s, t);
      }
      n = i.exec(e.backgroundImage);
    }
  };
  l.prototype.addImage = function (t) {
    var e = new c(t);
    this.images.push(e);
  };
  l.prototype.addBackground = function (t, e) {
    var i = new u(t, e);
    this.images.push(i);
  };
  l.prototype.check = function () {
    var n = this;
    this.progressedCount = 0;
    this.hasAnyBroken = false;
    if (!this.images.length) {
      this.complete();
      return;
    }
    function e(t, e, i) {
      setTimeout(function () {
        n.progress(t, e, i);
      });
    }
    this.images.forEach(function (t) {
      t.once("progress", e);
      t.check();
    });
  };
  l.prototype.progress = function (t, e, i) {
    this.progressedCount++;
    this.hasAnyBroken = this.hasAnyBroken || !t.isLoaded;
    this.emitEvent("progress", [this, t, e]);
    if (this.jqDeferred && this.jqDeferred.notify) {
      this.jqDeferred.notify(this, t);
    }
    if (this.progressedCount == this.images.length) {
      this.complete();
    }
    if (this.options.debug && r) {
      r.log("progress: " + i, t, e);
    }
  };
  l.prototype.complete = function () {
    var t = this.hasAnyBroken ? "fail" : "done";
    this.isComplete = true;
    this.emitEvent(t, [this]);
    this.emitEvent("always", [this]);
    if (this.jqDeferred) {
      var e = this.hasAnyBroken ? "reject" : "resolve";
      this.jqDeferred[e](this);
    }
  };
  function c(t) {
    this.img = t;
  }
  c.prototype = Object.create(i.prototype);
  c.prototype.check = function () {
    var t = this.getIsImageComplete();
    if (t) {
      this.confirm(this.img.naturalWidth !== 0, "naturalWidth");
      return;
    }
    this.proxyImage = new Image();
    this.proxyImage.addEventListener("load", this);
    this.proxyImage.addEventListener("error", this);
    this.img.addEventListener("load", this);
    this.img.addEventListener("error", this);
    this.proxyImage.src = this.img.src;
  };
  c.prototype.getIsImageComplete = function () {
    return this.img.complete && this.img.naturalWidth;
  };
  c.prototype.confirm = function (t, e) {
    this.isLoaded = t;
    this.emitEvent("progress", [this, this.img, e]);
  };
  c.prototype.handleEvent = function (t) {
    var e = "on" + t.type;
    if (this[e]) {
      this[e](t);
    }
  };
  c.prototype.onload = function () {
    this.confirm(true, "onload");
    this.unbindEvents();
  };
  c.prototype.onerror = function () {
    this.confirm(false, "onerror");
    this.unbindEvents();
  };
  c.prototype.unbindEvents = function () {
    this.proxyImage.removeEventListener("load", this);
    this.proxyImage.removeEventListener("error", this);
    this.img.removeEventListener("load", this);
    this.img.removeEventListener("error", this);
  };
  function u(t, e) {
    this.url = t;
    this.element = e;
    this.img = new Image();
  }
  u.prototype = Object.create(c.prototype);
  u.prototype.check = function () {
    this.img.addEventListener("load", this);
    this.img.addEventListener("error", this);
    this.img.src = this.url;
    var t = this.getIsImageComplete();
    if (t) {
      this.confirm(this.img.naturalWidth !== 0, "naturalWidth");
      this.unbindEvents();
    }
  };
  u.prototype.unbindEvents = function () {
    this.img.removeEventListener("load", this);
    this.img.removeEventListener("error", this);
  };
  u.prototype.confirm = function (t, e) {
    this.isLoaded = t;
    this.emitEvent("progress", [this, this.element, e]);
  };
  l.makeJQueryPlugin = function (t) {
    t = t || e.jQuery;
    if (!t) {
      return;
    }
    s = t;
    s.fn.imagesLoaded = function (t, e) {
      var i = new l(this, t, e);
      return i.jqDeferred.promise(s(this));
    };
  };
  l.makeJQueryPlugin();
  return l;
});
/*!
 * Flickity imagesLoaded v2.0.0
 * enables imagesLoaded option for Flickity
 */
(function (i, n) {
  if (typeof define == "function" && define.amd) {
    define(["flickity/js/index", "imagesloaded/imagesloaded"], function (t, e) {
      return n(i, t, e);
    });
  } else if ((typeof module === "undefined" ? "undefined" : _typeof(module)) == "object" && module.exports) {
    module.exports = n(i, require("flickity"), require("imagesloaded"));
  } else {
    i.Flickity = n(i, i.Flickity, i.imagesLoaded);
  }
})(window, function t(e, i, s) {
  "use strict";

  i.createMethods.push("_createImagesLoaded");
  var n = i.prototype;
  n._createImagesLoaded = function () {
    this.on("activate", this.imagesLoaded);
  };
  n.imagesLoaded = function () {
    if (!this.options.imagesLoaded) {
      return;
    }
    var n = this;
    function t(t, e) {
      var i = n.getParentCell(e.img);
      n.cellSizeChange(i && i.element);
      if (!n.options.freeScroll) {
        n.positionSliderAtSelected();
      }
    }
    s(this.slider).on("progress", t);
  };
  return i;
});
document.addEventListener("DOMContentLoaded", function () {
  var flktyMain = new Flickity('.carousel-main', {
    wrapAround: true,
    cellAlign: 'center',
    contain: true,
    pageDots: false,
    lazyLoad: true
    // imagesLoaded: true
  });

  var flktyNav = new Flickity('.carousel-nav', {
    asNavFor: '.carousel-main',
    contain: true,
    pageDots: false,
    prevNextButtons: false,
    lazyLoad: true
    // imagesLoaded: true
  });

  if (document.getElementById('lightgallery')) {
    console.log("Fired");
    lightGallery(document.getElementById('lightgallery'), {
      plugins: [lgZoom,
      //lgThumbnail,
      lgVideo, lgRotate
      //lgShare
      ],

      speed: 500,
      //licenseKey: 'your_license_key',
      thumbnail: true,
      animateThumb: false,
      showThumbByDefault: false,
      download: false,
      selector: '.carousel-cell'
    });
  }
  if (document.getElementById('video-gallery')) {
    lightGallery(document.getElementById('video-gallery'), {
      plugins: [lgVideo]
    });
  }
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpZ2h0Z2FsbGVyeS51bWQuanMiLCJsZy10aHVtYm5haWwudW1kLmpzIiwibGctem9vbS51bWQuanMiLCJsZy12aWRlby51bWQuanMiLCJsZy1yb3RhdGUudW1kLmpzIiwiZmxpY2tpdHkuanMiLCJzaW5nbGUteWFjaHQuanMiXSwibmFtZXMiOlsiZ2xvYmFsIiwiZmFjdG9yeSIsImV4cG9ydHMiLCJfdHlwZW9mIiwibW9kdWxlIiwiZGVmaW5lIiwiYW1kIiwiZ2xvYmFsVGhpcyIsInNlbGYiLCJsaWdodEdhbGxlcnkiLCJfX2Fzc2lnbiIsIk9iamVjdCIsImFzc2lnbiIsInQiLCJzIiwiaSIsIm4iLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJwIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiYXBwbHkiLCJfX3NwcmVhZEFycmF5cyIsImlsIiwiciIsIkFycmF5IiwiayIsImEiLCJqIiwiamwiLCJsR0V2ZW50cyIsImFmdGVyQXBwZW5kU2xpZGUiLCJpbml0IiwiaGFzVmlkZW8iLCJjb250YWluZXJSZXNpemUiLCJ1cGRhdGVTbGlkZXMiLCJhZnRlckFwcGVuZFN1Ykh0bWwiLCJiZWZvcmVPcGVuIiwiYWZ0ZXJPcGVuIiwic2xpZGVJdGVtTG9hZCIsImJlZm9yZVNsaWRlIiwiYWZ0ZXJTbGlkZSIsInBvc3RlckNsaWNrIiwiZHJhZ1N0YXJ0IiwiZHJhZ01vdmUiLCJkcmFnRW5kIiwiYmVmb3JlTmV4dFNsaWRlIiwiYmVmb3JlUHJldlNsaWRlIiwiYmVmb3JlQ2xvc2UiLCJhZnRlckNsb3NlIiwicm90YXRlTGVmdCIsInJvdGF0ZVJpZ2h0IiwiZmxpcEhvcml6b250YWwiLCJmbGlwVmVydGljYWwiLCJhdXRvcGxheSIsImF1dG9wbGF5U3RhcnQiLCJhdXRvcGxheVN0b3AiLCJsaWdodEdhbGxlcnlDb3JlU2V0dGluZ3MiLCJtb2RlIiwiZWFzaW5nIiwic3BlZWQiLCJsaWNlbnNlS2V5IiwiaGVpZ2h0Iiwid2lkdGgiLCJhZGRDbGFzcyIsInN0YXJ0Q2xhc3MiLCJiYWNrZHJvcER1cmF0aW9uIiwiY29udGFpbmVyIiwic3RhcnRBbmltYXRpb25EdXJhdGlvbiIsInpvb21Gcm9tT3JpZ2luIiwiaGlkZUJhcnNEZWxheSIsInNob3dCYXJzQWZ0ZXIiLCJzbGlkZURlbGF5Iiwic3VwcG9ydExlZ2FjeUJyb3dzZXIiLCJhbGxvd01lZGlhT3ZlcmxhcCIsInZpZGVvTWF4U2l6ZSIsImxvYWRZb3VUdWJlUG9zdGVyIiwiZGVmYXVsdENhcHRpb25IZWlnaHQiLCJhcmlhTGFiZWxsZWRieSIsImFyaWFEZXNjcmliZWRieSIsImNsb3NhYmxlIiwic3dpcGVUb0Nsb3NlIiwiY2xvc2VPblRhcCIsInNob3dDbG9zZUljb24iLCJzaG93TWF4aW1pemVJY29uIiwibG9vcCIsImVzY0tleSIsImtleVByZXNzIiwiY29udHJvbHMiLCJzbGlkZUVuZEFuaW1hdGlvbiIsImhpZGVDb250cm9sT25FbmQiLCJtb3VzZXdoZWVsIiwiZ2V0Q2FwdGlvbkZyb21UaXRsZU9yQWx0IiwiYXBwZW5kU3ViSHRtbFRvIiwic3ViSHRtbFNlbGVjdG9yUmVsYXRpdmUiLCJwcmVsb2FkIiwibnVtYmVyT2ZTbGlkZUl0ZW1zSW5Eb20iLCJzZWxlY3RvciIsInNlbGVjdFdpdGhpbiIsIm5leHRIdG1sIiwicHJldkh0bWwiLCJpbmRleCIsImlmcmFtZVdpZHRoIiwiaWZyYW1lSGVpZ2h0IiwiaWZyYW1lTWF4V2lkdGgiLCJpZnJhbWVNYXhIZWlnaHQiLCJkb3dubG9hZCIsImNvdW50ZXIiLCJhcHBlbmRDb3VudGVyVG8iLCJzd2lwZVRocmVzaG9sZCIsImVuYWJsZVN3aXBlIiwiZW5hYmxlRHJhZyIsImR5bmFtaWMiLCJkeW5hbWljRWwiLCJleHRyYVByb3BzIiwiZXhUaHVtYkltYWdlIiwiaXNNb2JpbGUiLCJ1bmRlZmluZWQiLCJtb2JpbGVTZXR0aW5ncyIsInBsdWdpbnMiLCJzdHJpbmdzIiwiY2xvc2VHYWxsZXJ5IiwidG9nZ2xlTWF4aW1pemUiLCJwcmV2aW91c1NsaWRlIiwibmV4dFNsaWRlIiwicGxheVZpZGVvIiwiaW5pdExnUG9seWZpbGxzIiwid2luZG93IiwiQ3VzdG9tRXZlbnQiLCJldmVudCIsInBhcmFtcyIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwiZGV0YWlsIiwiZXZ0IiwiZG9jdW1lbnQiLCJjcmVhdGVFdmVudCIsImluaXRDdXN0b21FdmVudCIsIkVsZW1lbnQiLCJtYXRjaGVzIiwibXNNYXRjaGVzU2VsZWN0b3IiLCJ3ZWJraXRNYXRjaGVzU2VsZWN0b3IiLCJsZ1F1ZXJ5IiwiY3NzVmVuZGVyUHJlZml4ZXMiLCJfZ2V0U2VsZWN0b3IiLCJmaXJzdEVsZW1lbnQiLCJfZ2V0Rmlyc3RFbCIsImdlbmVyYXRlVVVJRCIsInJlcGxhY2UiLCJjIiwiTWF0aCIsInJhbmRvbSIsInYiLCJ0b1N0cmluZyIsImNvbnRleHQiLCJmbCIsInN1YnN0cmluZyIsInF1ZXJ5U2VsZWN0b3IiLCJxdWVyeVNlbGVjdG9yQWxsIiwiX2VhY2giLCJmdW5jIiwiZm9yRWFjaCIsIl9zZXRDc3NWZW5kb3JQcmVmaXgiLCJlbCIsImNzc1Byb3BlcnR5IiwidmFsdWUiLCJwcm9wZXJ0eSIsImdyb3VwMSIsInRvVXBwZXJDYXNlIiwiaW5kZXhPZiIsInN0eWxlIiwiY2hhckF0IiwidG9Mb3dlckNhc2UiLCJzbGljZSIsImlzRXZlbnRNYXRjaGVkIiwiZXZlbnROYW1lIiwiZXZlbnROYW1lc3BhY2UiLCJzcGxpdCIsImZpbHRlciIsImUiLCJldmVyeSIsImF0dHIiLCJnZXRBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGUiLCJmaW5kIiwiJExHIiwiZmlyc3QiLCJlcSIsInBhcmVudCIsInBhcmVudEVsZW1lbnQiLCJnZXQiLCJyZW1vdmVBdHRyIiwiYXR0cmlidXRlcyIsImF0dHJzIiwicmVtb3ZlQXR0cmlidXRlIiwid3JhcCIsImNsYXNzTmFtZSIsIndyYXBwZXIiLCJjcmVhdGVFbGVtZW50IiwicGFyZW50Tm9kZSIsImluc2VydEJlZm9yZSIsInJlbW92ZUNoaWxkIiwiYXBwZW5kQ2hpbGQiLCJjbGFzc05hbWVzIiwiY2xhc3NMaXN0IiwiYWRkIiwicmVtb3ZlQ2xhc3MiLCJyZW1vdmUiLCJoYXNDbGFzcyIsImNvbnRhaW5zIiwiaGFzQXR0cmlidXRlIiwiYXR0cmlidXRlIiwidG9nZ2xlQ2xhc3MiLCJjc3MiLCJfdGhpcyIsIm9uIiwiZXZlbnRzIiwibGlzdGVuZXIiLCJpc0FycmF5IiwiZXZlbnRMaXN0ZW5lcnMiLCJwdXNoIiwiYWRkRXZlbnRMaXN0ZW5lciIsIm9uY2UiLCJvZmYiLCJrZXlzIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInRyaWdnZXIiLCJjdXN0b21FdmVudCIsImRpc3BhdGNoRXZlbnQiLCJsb2FkIiwidXJsIiwiZmV0Y2giLCJ0aGVuIiwicmVzIiwiaW5uZXJIVE1MIiwiaHRtbCIsImFwcGVuZCIsImluc2VydEFkamFjZW50SFRNTCIsInByZXBlbmQiLCJlbXB0eSIsInNjcm9sbFRvcCIsImJvZHkiLCJkb2N1bWVudEVsZW1lbnQiLCJwYWdlWU9mZnNldCIsInNjcm9sbExlZnQiLCJwYWdlWE9mZnNldCIsIm9mZnNldCIsImxlZnQiLCJ0b3AiLCJyZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiYm9keU1hcmdpbkxlZnQiLCJtYXJnaW5MZWZ0IiwicGFyc2VGbG9hdCIsImN1cnJlbnRTdHlsZSIsImdldENvbXB1dGVkU3R5bGUiLCJjbGllbnRXaWR0aCIsInBhZGRpbmdMZWZ0IiwicGFkZGluZ1JpZ2h0IiwiY2xpZW50SGVpZ2h0IiwicGFkZGluZ1RvcCIsInBhZGRpbmdCb3R0b20iLCJkZWZhdWx0RHluYW1pY09wdGlvbnMiLCJjb252ZXJ0VG9EYXRhIiwiZyIsInV0aWxzIiwiZ2V0U2l6ZSIsInNwYWNpbmciLCJkZWZhdWx0TGdTaXplIiwiTEdlbCIsImxnU2l6ZSIsImlzUmVzcG9uc2l2ZVNpemVzIiwid1dpZHRoIiwiaW5uZXJXaWR0aCIsInNpemVfMSIsInJlc3BvbnNpdmVXaWR0aCIsInBhcnNlSW50Iiwic2l6ZSIsImNXaWR0aCIsImNIZWlnaHQiLCJtYXhXaWR0aCIsIm1pbiIsIm1heEhlaWdodCIsInJhdGlvIiwiZ2V0VHJhbnNmb3JtIiwiYm90dG9tIiwiaW1hZ2VTaXplIiwiY29udGFpbmVyUmVjdCIsIndIZWlnaHQiLCJlbFdpZHRoIiwiZWxIZWlnaHQiLCJlbFN0eWxlIiwieCIsImJvcmRlckxlZnQiLCJ5IiwiYm9yZGVyVG9wIiwic2NYIiwic2NZIiwidHJhbnNmb3JtIiwiZ2V0SWZyYW1lTWFya3VwIiwic3JjIiwiaWZyYW1lVGl0bGUiLCJ0aXRsZSIsImdldEltZ01hcmt1cCIsImFsdEF0dHIiLCJzcmNzZXQiLCJzaXplcyIsInNvdXJjZXMiLCJzcmNzZXRBdHRyIiwic2l6ZXNBdHRyIiwiaW1nTWFya3VwIiwic291cmNlVGFnIiwic291cmNlT2JqIiwiSlNPTiIsInBhcnNlIiwibWFwIiwic291cmNlIiwia2V5IiwiZ2V0UmVzcG9uc2l2ZVNyYyIsInNyY0l0bXMiLCJyc1dpZHRoIiwicnNTcmMiLCJfc3JjIiwic3BsaWNlIiwiaXNJbWFnZUxvYWRlZCIsImltZyIsImNvbXBsZXRlIiwibmF0dXJhbFdpZHRoIiwiZ2V0VmlkZW9Qb3N0ZXJNYXJrdXAiLCJfcG9zdGVyIiwiZHVtbXlJbWciLCJ2aWRlb0NvbnRTdHlsZSIsInBsYXlWaWRlb1N0cmluZyIsIl9pc1ZpZGVvIiwidmlkZW9DbGFzcyIsInlvdXR1YmUiLCJ2aW1lbyIsImdldER5bmFtaWNPcHRpb25zIiwiaXRlbXMiLCJkeW5hbWljRWxlbWVudHMiLCJhdmFpbGFibGVEeW5hbWljT3B0aW9ucyIsIml0ZW0iLCJzcGVjaWZpZWQiLCJkeW5hbWljQXR0ciIsIm5hbWUiLCJsYWJlbCIsImN1cnJlbnRJdGVtIiwiYWx0IiwidGh1bWIiLCJzdWJIdG1sIiwidGVzdCIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsImlzVmlkZW8iLCJpc0hUTUw1VklkZW8iLCJodG1sNSIsImNvbnNvbGUiLCJlcnJvciIsIm1hdGNoIiwid2lzdGlhIiwibGdJZCIsIkxpZ2h0R2FsbGVyeSIsImVsZW1lbnQiLCJvcHRpb25zIiwibGdPcGVuZWQiLCJsR2FsbGVyeU9uIiwibGdCdXN5IiwiY3VycmVudEl0ZW1zSW5Eb20iLCJwcmV2U2Nyb2xsVG9wIiwiaXNEdW1teUltYWdlUmVtb3ZlZCIsImRyYWdPclN3aXBlRW5hYmxlZCIsIm1lZGlhQ29udGFpbmVyUG9zaXRpb24iLCJnZW5lcmF0ZVNldHRpbmdzIiwiYnVpbGRNb2R1bGVzIiwic2V0dGluZ3MiLCJnYWxsZXJ5SXRlbXMiLCJnZXRJdGVtcyIsIm5vcm1hbGl6ZVNldHRpbmdzIiwidmFsaWRhdGVMaWNlbnNlIiwiYWRkU2xpZGVWaWRlb0luZm8iLCJidWlsZFN0cnVjdHVyZSIsImluc3RhbmNlIiwic2V0VGltZW91dCIsInRyaWdnZXJQb3N0ZXJDbGljayIsImFycm93Iiwib3BlbkdhbGxlcnlPbkl0ZW1DbGljayIsIl9sb29wXzEiLCJ0aGlzXzEiLCIkZWxlbWVudCIsInV1aWQiLCJwcmV2ZW50RGVmYXVsdCIsImN1cnJlbnRJdGVtSW5kZXgiLCJvcGVuR2FsbGVyeSIsInBsdWdpbiIsIndhcm4iLCJnZXRTbGlkZUl0ZW0iLCJnZXRTbGlkZUl0ZW1JZCIsImdldElkTmFtZSIsImlkIiwiZ2V0RWxlbWVudEJ5SWQiLCJtYW5hZ2VTaW5nbGVTbGlkZUNsYXNzTmFtZSIsIm91dGVyIiwiJGNvbnRhaW5lciIsInN1Ykh0bWxDb250IiwiYWRkQ2xhc3NlcyIsImNvbnRhaW5lckNsYXNzTmFtZSIsImNsb3NlSWNvbiIsIm1heGltaXplSWNvbiIsInRlbXBsYXRlIiwiJGxnQ29tcG9uZW50cyIsIiRiYWNrZHJvcCIsIiRpbm5lciIsIiRjb250ZW50IiwiJHRvb2xiYXIiLCJvdXRlckNsYXNzTmFtZXMiLCJyZWZyZXNoT25SZXNpemUiLCJoaWRlQmFycyIsIm1hbmFnZUNsb3NlR2FsbGVyeSIsImluaXRNb2R1bGVzIiwiY3VycmVudEdhbGxlcnlJdGVtIiwiX19zbGlkZVZpZGVvSW5mbyIsImdldE1lZGlhQ29udGFpbmVyUG9zaXRpb24iLCJfYSIsInRvcF8xIiwiY3VycmVudEltYWdlU2l6ZSIsInJlc2l6ZVZpZGVvU2xpZGUiLCJpbWdTdHlsZSIsImdldER1bW15SW1nU3R5bGVzIiwibGdWaWRlb1N0eWxlIiwiZ2V0VmlkZW9Db250U3R5bGUiLCJjdXJyZW50U2xpZGUiLCJjdXJyZW50U3JjIiwidXBkYXRlQ29udHJvbHMiLCJfaW5kZXgiLCJzb21lIiwiZ2FsbGVyeUl0ZW0iLCJpdGVtSW5kZXgiLCJvcmdhbml6ZVNsaWRlSXRlbXMiLCJsb2FkQ29udGVudCIsInVwZGF0ZUN1cnJlbnRDb3VudGVyIiwiY2hpbGRyZW4iLCJmb2N1cyIsIml0ZW1zVG9CZUluc2VydGVkVG9Eb20iLCJnZXRJdGVtc1RvQmVJbnNlcnRlZFRvRG9tIiwiYWRkSHRtbCIsInNldE1lZGlhQ29udGFpbmVyUG9zaXRpb24iLCJ0aW1lb3V0IiwiY3VycmVudFNsaWRlXzEiLCJzbGlkZSIsImNhcHRpb25IZWlnaHQiLCJ0aHVtYkNvbnRhaW5lciIsInRodW1iSGVpZ2h0IiwiY2xlYXJUaW1lb3V0IiwiaGlkZUJhclRpbWVvdXQiLCJpbml0UGljdHVyZUZpbGwiLCIkaW1nIiwicGljdHVyZWZpbGwiLCJlbGVtZW50cyIsImNvdW50ZXJIdG1sIiwic3ViSHRtbFVybCIsImZMIiwiZ2V0RHVtbXlJbWFnZUNvbnRlbnQiLCIkY3VycmVudFNsaWRlIiwiJGN1cnJlbnRJdGVtIiwiX2R1bW15SW1nU3JjIiwiZHVtbXlJbWdDb250ZW50Iiwic2V0SW1nTWFya3VwIiwiaW1nQ29udGVudCIsImlzRmlyc3RTbGlkZVdpdGhab29tQW5pbWF0aW9uIiwib25TbGlkZU9iamVjdExvYWQiLCIkc2xpZGUiLCJpc0hUTUw1VmlkZW9XaXRob3V0UG9zdGVyIiwib25Mb2FkIiwib25FcnJvciIsIm1lZGlhT2JqZWN0Iiwib25MZ09iamVjdExvYWQiLCJkZWxheSIsImlzRmlyc3RTbGlkZSIsInRyaWdnZXJTbGlkZUl0ZW1Mb2FkIiwiX3NwZWVkIiwiZ2V0U2xpZGVUeXBlIiwicG9zdGVyIiwidmlkZW8iLCJyZWMiLCJfaHRtbDVWaWRlbyIsInJlc3BvbnNpdmUiLCJzcmNEeUl0bXMiLCJ2aWRlb0luZm8iLCJpZnJhbWUiLCJ0b3BfMiIsInZpZGVvU2l6ZSIsIm1hcmt1cCIsImhhc1N0YXJ0QW5pbWF0aW9uIiwiaHRtbDVWaWRlbyIsImhhc1Bvc3RlciIsImxvYWRDb250ZW50T25GaXJzdFNsaWRlTG9hZCIsInByZXZJbmRleCIsIm51bWJlck9mSXRlbXMiLCJwb3NzaWJsZU51bWJlck9mSXRlbXMiLCJtYXgiLCJwcmV2SW5kZXhJdGVtIiwiX2VsZW1lbnQiLCJpZHgiLCJudW1iZXJPZkV4aXN0aW5nSXRlbXMiLCJnZXRQcmV2aW91c1NsaWRlSW5kZXgiLCJjdXJyZW50SXRlbUlkIiwic2V0RG93bmxvYWRWYWx1ZSIsImhpZGVEb3dubG9hZEJ0biIsImRvd25sb2FkVXJsIiwiJGRvd25sb2FkIiwibWFrZVNsaWRlQW5pbWF0aW9uIiwiZGlyZWN0aW9uIiwiY3VycmVudFNsaWRlSXRlbSIsInByZXZpb3VzU2xpZGVJdGVtIiwiZnJvbVRvdWNoIiwiZnJvbVRodW1iIiwibnVtYmVyT2ZHYWxsZXJ5SXRlbXMiLCJwcmV2aW91c1NsaWRlSXRlbV8xIiwidG9wXzMiLCJhcnJvd0Rpc2FibGUiLCJ0b3VjaFByZXYiLCJ0b3VjaE5leHQiLCJ1cGRhdGVDb3VudGVyVG90YWwiLCJ0b3VjaE1vdmUiLCJzdGFydENvb3JkcyIsImVuZENvb3JkcyIsImRpc3RhbmNlWCIsInBhZ2VYIiwiZGlzdGFuY2VZIiwicGFnZVkiLCJhbGxvd1N3aXBlIiwic3dpcGVEaXJlY3Rpb24iLCJhYnMiLCJzZXRUcmFuc2xhdGUiLCJvZmZzZXRXaWR0aCIsInNsaWRlV2lkdGhBbW91bnQiLCJndXR0ZXIiLCJvcGFjaXR5IiwiaW5uZXJIZWlnaHQiLCJzY2FsZSIsInRvdWNoRW5kIiwiZGlzdGFuY2UiLCJ0cmlnZ2VyQ2xpY2siLCJkaXN0YW5jZUFicyIsImdvVG9OZXh0U2xpZGUiLCJnb1RvUHJldlNsaWRlIiwidGFyZ2V0IiwiaXNQb3N0ZXJFbGVtZW50IiwiaXNNb3ZlZCIsImlzU3dpcGluZyIsIiRpdGVtIiwidGFyZ2V0VG91Y2hlcyIsInRvdWNoQWN0aW9uIiwibWFuYWdlU3dpcGVDbGFzcyIsImlzRHJhZ2luZyIsIl90b3VjaE5leHQiLCJfdG91Y2hQcmV2IiwiX2xvb3AiLCJrZXlDb2RlIiwiJHByZXYiLCIkbmV4dCIsIiRlbCIsInhWYWx1ZSIsInlWYWx1ZSIsInNjYWxlWCIsInNjYWxlWSIsImxhc3RDYWxsIiwiZGVsdGFZIiwibm93IiwiRGF0ZSIsImdldFRpbWUiLCJpc1NsaWRlRWxlbWVudCIsInBsYXlCdXR0b24iLCJpbnZhbGlkYXRlSXRlbXMiLCJtb3VzZWRvd24iLCJmb3JjZSIsInRvcF80IiwiX2IiLCJkZXN0cm95TW9kdWxlcyIsInJlbW92ZVRpbWVvdXQiLCJibHVyIiwiZXJyIiwiZGVzdHJveSIsInJlZnJlc2giLCJjbG9zZVRpbWVvdXQiLCJsZ1RodW1ibmFpbCIsInRodW1ibmFpbHNTZXR0aW5ncyIsInRodW1ibmFpbCIsImFuaW1hdGVUaHVtYiIsImN1cnJlbnRQYWdlclBvc2l0aW9uIiwiYWxpZ25UaHVtYm5haWxzIiwidGh1bWJXaWR0aCIsInRodW1iTWFyZ2luIiwiYXBwZW5kVGh1bWJuYWlsc1RvIiwidG9nZ2xlVGh1bWIiLCJlbmFibGVUaHVtYkRyYWciLCJlbmFibGVUaHVtYlN3aXBlIiwidGh1bWJuYWlsU3dpcGVUaHJlc2hvbGQiLCJsb2FkWW91VHViZVRodW1ibmFpbCIsInlvdVR1YmVUaHVtYlNpemUiLCJ0aHVtYm5haWxQbHVnaW5TdHJpbmdzIiwidG9nZ2xlVGh1bWJuYWlscyIsIlRodW1ibmFpbCIsInRodW1iT3V0ZXJXaWR0aCIsInRodW1iVG90YWxXaWR0aCIsInRyYW5zbGF0ZVgiLCJ0aHVtYkNsaWNrYWJsZSIsImNvcmUiLCJzZXRBbmltYXRlVGh1bWJTdHlsZXMiLCJidWlsZCIsInRvZ2dsZVRodW1iQmFyIiwidGh1bWJLZXlQcmVzcyIsInNldFRodW1iTWFya3VwIiwibWFuYWdlQWN0aXZlQ2xhc3NPblNsaWRlQ2hhbmdlIiwiJGxnVGh1bWIiLCIkdGFyZ2V0IiwicmVidWlsZFRodW1ibmFpbHMiLCJ0aHVtYk91dGVyQ2xhc3NOYW1lcyIsIiR0aHVtYk91dGVyIiwic2V0VGh1bWJJdGVtSHRtbCIsInRodW1iRHJhZ1V0aWxzIiwiY29yZHMiLCJzdGFydFgiLCJlbmRYIiwibmV3VHJhbnNsYXRlWCIsInN0YXJ0VGltZSIsImVuZFRpbWUiLCJ0b3VjaE1vdmVUaW1lIiwiaXNEcmFnZ2luZyIsIm9uVGh1bWJUb3VjaE1vdmUiLCJvblRodW1iVG91Y2hFbmQiLCJnZXRQb3NzaWJsZVRyYW5zZm9ybVgiLCJwb3NpdGlvbiIsInZhbHVlT2YiLCJ0b3VjaER1cmF0aW9uIiwiZGlzdGFuY2VYbmV3Iiwic3BlZWRYIiwiZ2V0VGh1bWJIdG1sIiwic2xpZGVWaWRlb0luZm8iLCJ0aHVtYkltZyIsImdldFRodW1iSXRlbUh0bWwiLCJ0aHVtYkxpc3QiLCIkdGh1bWIiLCJsZ1pvb20iLCJ6b29tU2V0dGluZ3MiLCJ6b29tIiwiYWN0dWFsU2l6ZSIsInNob3dab29tSW5PdXRJY29ucyIsImFjdHVhbFNpemVJY29ucyIsInpvb21JbiIsInpvb21PdXQiLCJlbmFibGVab29tQWZ0ZXIiLCJ6b29tUGx1Z2luU3RyaW5ncyIsInZpZXdBY3R1YWxTaXplIiwiWm9vbSIsImJ1aWxkVGVtcGxhdGVzIiwiem9vbUljb25zIiwiZW5hYmxlWm9vbSIsInpvb21hYmxlVGltZW91dCIsImlzSW1hZ2VTbGlkZSIsInNldFpvb21Fc3NlbnRpYWxzIiwiZW5hYmxlWm9vbU9uU2xpZGVJdGVtTG9hZCIsImJpbmQiLCJnZXRNb2RpZmllciIsInJvdGF0ZVZhbHVlIiwiYXhpcyIsIm9yaWdpbmFsUm90YXRlIiwidHJhbnNmb3JtVmFsdWVzIiwiZ2V0Q3VycmVudFRyYW5zZm9ybSIsIm1vZGlmaWVyIiwiZmxpcEhvcml6b250YWxWYWx1ZSIsInNpZ24iLCJmbGlwVmVydGljYWxWYWx1ZSIsInNpblgiLCJzaW5NaW51c1giLCJnZXRJbWFnZVNpemUiLCIkaW1hZ2UiLCJpbWFnZVNpemVzIiwiZ2V0RHJhZ0NvcmRzIiwiZ2V0U3dpcGVDb3JkcyIsImdldERyYWdBbGxvd2VkQXhpc2VzIiwiYWxsb3dZIiwiaW1hZ2VZU2l6ZSIsImFsbG93WCIsImltYWdlWFNpemUiLCJzdCIsInRtIiwiZ2V0UHJvcGVydHlWYWx1ZSIsImdldEN1cnJlbnRSb3RhdGlvbiIsInZhbHVlcyIsInJvdW5kIiwiYXRhbjIiLCJQSSIsInJvdGF0ZUVsIiwibW9kaWZpZXJYIiwibW9kaWZpZXJZIiwiem9vbUltYWdlIiwib2Zmc2V0WCIsInRvcEJvdHRvbVNwYWNpbmciLCJvZmZzZXRZIiwib3JpZ2luYWxYIiwib3JpZ2luYWxZIiwicG9zaXRpb25DaGFuZ2VkIiwiZHJhZ0FsbG93ZWRBeGlzZXMiLCJwb3NzaWJsZVN3aXBlQ29yZHMiLCJnZXRQb3NzaWJsZVN3aXBlRHJhZ0NvcmRzIiwiX3giLCJfeSIsImlzQmV5b25kUG9zc2libGVMZWZ0IiwibWluWCIsImlzQmV5b25kUG9zc2libGVSaWdodCIsIm1heFgiLCJpc0JleW9uZFBvc3NpYmxlVG9wIiwibWluWSIsImlzQmV5b25kUG9zc2libGVCb3R0b20iLCJtYXhZIiwic2V0Wm9vbVN0eWxlcyIsIiRkdW1teUltYWdlIiwiJGltYWdlV3JhcCIsInNldEFjdHVhbFNpemUiLCJnZXRDdXJyZW50SW1hZ2VBY3R1YWxTaXplU2NhbGUiLCJnZXRTY2FsZSIsInNldFBhZ2VDb3JkcyIsImJlZ2luWm9vbSIsImdldE5hdHVyYWxXaWR0aCIsImdldEFjdHVhbFNpemVTY2FsZSIsIl9zY2FsZSIsImdldFBhZ2VDb3JkcyIsInBhZ2VDb3JkcyIsIiRhY3R1YWxTaXplIiwicmVzZXRab29tIiwiYWN0dWFsU2l6ZVNjYWxlIiwidGFwcGVkIiwiem9vbURyYWciLCJwaW5jaFpvb20iLCJ6b29tU3dpcGUiLCJnZXRUb3VjaERpc3RhbmNlIiwic3FydCIsInN0YXJ0RGlzdCIsInBpbmNoU3RhcnRlZCIsImluaXRTY2FsZSIsImVuZERpc3QiLCJ0b3VjaGVuZFpvb20iLCJkaXN0YW5jZVluZXciLCJzcGVlZFkiLCJfTEdlbCIsInNldFpvb21Td2lwZVN0eWxlcyIsImdldFpvb21Td2lwZUNvcmRzIiwiZGlmZk1pblkiLCJkaWZmTWF4WSIsImRpZmZNaW5YIiwiZGlmTWF4WCIsImRhdGFTY2FsZSIsImVsRGF0YVNjYWxlIiwibGdWaWRlbyIsInZpZGVvU2V0dGluZ3MiLCJhdXRvcGxheUZpcnN0VmlkZW8iLCJ5b3VUdWJlUGxheWVyUGFyYW1zIiwidmltZW9QbGF5ZXJQYXJhbXMiLCJ3aXN0aWFQbGF5ZXJQYXJhbXMiLCJnb3RvTmV4dFNsaWRlT25WaWRlb0VuZCIsImF1dG9wbGF5VmlkZW9PblNsaWRlIiwidmlkZW9qcyIsInZpZGVvanNPcHRpb25zIiwicGFyYW0iLCJvYmoiLCJlbmNvZGVVUklDb21wb25lbnQiLCJqb2luIiwiZ2V0VmltZW9VUkxQYXJhbXMiLCJkZWZhdWx0UGFyYW1zIiwidXJsUGFyYW1zIiwiZGVmYXVsdFBsYXllclBhcmFtcyIsIlZpZGVvIiwib25IYXNWaWRlbyIsImxvYWRWaWRlb09uUG9zdGVyQ2xpY2siLCJvblNsaWRlSXRlbUxvYWQiLCJvbkJlZm9yZVNsaWRlIiwib25BZnRlclNsaWRlIiwibG9hZEFuZFBsYXlWaWRlbyIsImFwcGVuZFZpZGVvcyIsInBhdXNlVmlkZW8iLCJjb250cm9sVmlkZW8iLCJnZXRWaWRlb0h0bWwiLCJ2aWRlb1RpdGxlIiwiY29tbW9uSWZyYW1lUHJvcHMiLCJ2aWRlb0lkIiwic2xpZGVVcmxQYXJhbXMiLCJwbGF5ZXJQYXJhbXMiLCJ3aXN0aWFJZCIsImh0bWw1VmlkZW9NYXJrdXAiLCJ0eXBlIiwidHJhY2tzIiwidHJhY2tBdHRyaWJ1dGVzIiwidHJhY2siLCJodG1sNVZpZGVvQXR0cnNfMSIsInZpZGVvQXR0cmlidXRlc18xIiwidmlkZW9QYXJhbXMiLCJ2aWRlb0h0bWwiLCIkdmlkZW9FbGVtZW50Iiwic3RvcFByb3BhZ2F0aW9uIiwiVmltZW8iLCJQbGF5ZXIiLCJfd3EiLCJvblJlYWR5IiwiYWN0aW9uIiwiY29udGVudFdpbmRvdyIsInBvc3RNZXNzYWdlIiwiZm9yY2VQbGF5IiwiX2h0bWwiLCJ2aWRlb0pzUGxheWVyXzEiLCIkdGVtcEltZyIsInJlYWR5Iiwib25WaWRlb0xvYWRBZnRlclBvc3RlckNsaWNrIiwibGdSb3RhdGUiLCJyb3RhdGVTZXR0aW5ncyIsInJvdGF0ZSIsInJvdGF0ZVNwZWVkIiwicm90YXRlUGx1Z2luU3RyaW5ncyIsIlJvdGF0ZSIsInJvdGF0ZUljb25zIiwicm90YXRlVmFsdWVzTGlzdCIsImltYWdlV3JhcCIsImFwcGx5U3R5bGVzIiwidHJpZ2dlckV2ZW50cyIsImFuZ2xlIiwiY3VycmVudFJvdGF0aW9uIiwicm90YXRlQXhpcyIsImlzSW1hZ2VPcmllbnRhdGlvbkNoYW5nZWQiLCJpc1JvdGF0ZWQiLCJpZkZsaXBwZWRIb3IiLCJpZkZsaXBwZWRWZXIiLCJyZXF1aXJlIiwialF1ZXJ5QnJpZGdldCIsImpRdWVyeSIsIm8iLCJ1IiwiaCIsIm9wdGlvbiIsImlzUGxhaW5PYmplY3QiLCJleHRlbmQiLCJmbiIsImwiLCJlYWNoIiwiZGF0YSIsIl9pbml0IiwiYnJpZGdldCIsIkV2RW1pdHRlciIsIl9ldmVudHMiLCJfb25jZUV2ZW50cyIsImVtaXRFdmVudCIsImFsbE9mZiIsIm0iLCJpc05hTiIsImIiLCJFIiwib3V0ZXJXaWR0aCIsIm91dGVySGVpZ2h0IiwiUyIsIkMiLCJwYWRkaW5nIiwiYm9yZGVyU3R5bGUiLCJib3JkZXJXaWR0aCIsImJveFNpemluZyIsImlzQm94U2l6ZU91dGVyIiwibm9kZVR5cGUiLCJkaXNwbGF5Iiwib2Zmc2V0SGVpZ2h0IiwiaXNCb3JkZXJCb3giLCJtYXJnaW5SaWdodCIsIm1hcmdpblRvcCIsIm1hcmdpbkJvdHRvbSIsImQiLCJib3JkZXJMZWZ0V2lkdGgiLCJib3JkZXJSaWdodFdpZHRoIiwiZiIsImJvcmRlclRvcFdpZHRoIiwiYm9yZGVyQm90dG9tV2lkdGgiLCJtYXRjaGVzU2VsZWN0b3IiLCJmaXp6eVVJVXRpbHMiLCJtb2R1bG8iLCJtYWtlQXJyYXkiLCJyZW1vdmVGcm9tIiwiZ2V0UGFyZW50IiwiZ2V0UXVlcnlFbGVtZW50IiwiaGFuZGxlRXZlbnQiLCJmaWx0ZXJGaW5kRWxlbWVudHMiLCJIVE1MRWxlbWVudCIsImRlYm91bmNlTWV0aG9kIiwiZG9jUmVhZHkiLCJyZWFkeVN0YXRlIiwidG9EYXNoZWQiLCJodG1sSW5pdCIsImNvbmNhdCIsIkZsaWNraXR5IiwiQ2VsbCIsImNyZWF0ZSIsInNoaWZ0Iiwib3JpZ2luU2lkZSIsInVuc2VsZWN0Iiwic2V0UG9zaXRpb24iLCJ1cGRhdGVUYXJnZXQiLCJyZW5kZXJQb3NpdGlvbiIsInNldERlZmF1bHRUYXJnZXQiLCJjZWxsQWxpZ24iLCJwZXJjZW50UG9zaXRpb24iLCJnZXRQb3NpdGlvblZhbHVlIiwic2VsZWN0Iiwid3JhcFNoaWZ0Iiwic2xpZGVhYmxlV2lkdGgiLCJTbGlkZSIsImlzT3JpZ2luTGVmdCIsImNlbGxzIiwiYWRkQ2VsbCIsImZpcnN0TWFyZ2luIiwiZ2V0TGFzdENlbGwiLCJnZXRDZWxsRWxlbWVudHMiLCJhbmltYXRlUHJvdG90eXBlIiwic3RhcnRBbmltYXRpb24iLCJpc0FuaW1hdGluZyIsInJlc3RpbmdGcmFtZXMiLCJhbmltYXRlIiwiYXBwbHlEcmFnRm9yY2UiLCJhcHBseVNlbGVjdGVkQXR0cmFjdGlvbiIsImludGVncmF0ZVBoeXNpY3MiLCJwb3NpdGlvblNsaWRlciIsInNldHRsZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsIndyYXBBcm91bmQiLCJzaGlmdFdyYXBDZWxscyIsInNldFRyYW5zbGF0ZVgiLCJkaXNwYXRjaFNjcm9sbEV2ZW50IiwiY3Vyc29yUG9zaXRpb24iLCJyaWdodFRvTGVmdCIsInNsaWRlciIsInNsaWRlcyIsInNsaWRlc1dpZHRoIiwicG9zaXRpb25TbGlkZXJBdFNlbGVjdGVkIiwic2VsZWN0ZWRTbGlkZSIsInZlbG9jaXR5IiwiaXNQb2ludGVyRG93biIsImlzRnJlZVNjcm9sbGluZyIsInNlbGVjdGVkSW5kZXgiLCJfc2hpZnRDZWxscyIsImJlZm9yZVNoaWZ0Q2VsbHMiLCJhZnRlclNoaWZ0Q2VsbHMiLCJfdW5zaGlmdENlbGxzIiwiZ2V0RnJpY3Rpb25GYWN0b3IiLCJhcHBseUZvcmNlIiwiZ2V0UmVzdGluZ1Bvc2l0aW9uIiwiaXNEcmFnZ2FibGUiLCJkcmFnWCIsInNlbGVjdGVkQXR0cmFjdGlvbiIsImZsaWNraXR5R1VJRCIsImNvbnN0cnVjdG9yIiwiZGVmYXVsdHMiLCJfY3JlYXRlIiwiYWNjZXNzaWJpbGl0eSIsImZyZWVTY3JvbGxGcmljdGlvbiIsImZyaWN0aW9uIiwibmFtZXNwYWNlSlF1ZXJ5RXZlbnRzIiwicmVzaXplIiwic2V0R2FsbGVyeVNpemUiLCJjcmVhdGVNZXRob2RzIiwiZ3VpZCIsInZpZXdwb3J0IiwiX2NyZWF0ZVNsaWRlciIsIndhdGNoQ1NTIiwiYWN0aXZhdGUiLCJpc0FjdGl2ZSIsIl9maWx0ZXJGaW5kQ2VsbEVsZW1lbnRzIiwicmVsb2FkQ2VsbHMiLCJ0YWJJbmRleCIsInNlbGVjdEluaXRpYWxJbmRleCIsImlzSW5pdEFjdGl2YXRlZCIsImNlbGxTZWxlY3RvciIsIl9tYWtlQ2VsbHMiLCJwb3NpdGlvbkNlbGxzIiwiX2dldFdyYXBTaGlmdENlbGxzIiwiZ2V0TGFzdFNsaWRlIiwiX3NpemVDZWxscyIsIl9wb3NpdGlvbkNlbGxzIiwibWF4Q2VsbEhlaWdodCIsIl9jb250YWluU2xpZGVzIiwiX2dldENhbkNlbGxGaXQiLCJ1cGRhdGVTZWxlY3RlZFNsaWRlIiwiZ3JvdXBDZWxscyIsInJlcG9zaXRpb24iLCJzZXRDZWxsQWxpZ24iLCJjZW50ZXIiLCJyaWdodCIsImFkYXB0aXZlSGVpZ2h0IiwiX2dldEdhcENlbGxzIiwiY29udGFpbiIsIkV2ZW50IiwiX3dyYXBTZWxlY3QiLCJpc0RyYWdTZWxlY3QiLCJwcmV2aW91cyIsIm5leHQiLCJ1bnNlbGVjdFNlbGVjdGVkU2xpZGUiLCJzZWxlY3RlZENlbGxzIiwic2VsZWN0ZWRFbGVtZW50cyIsInNlbGVjdGVkQ2VsbCIsInNlbGVjdGVkRWxlbWVudCIsImluaXRpYWxJbmRleCIsInF1ZXJ5Q2VsbCIsInNlbGVjdENlbGwiLCJnZXRDZWxsU2xpZGVJbmRleCIsImdldENlbGwiLCJnZXRDZWxscyIsImdldFBhcmVudENlbGwiLCJnZXRBZGphY2VudENlbGxFbGVtZW50cyIsInVpQ2hhbmdlIiwiY2hpbGRVSVBvaW50ZXJEb3duIiwib25yZXNpemUiLCJjb250ZW50IiwiZGVhY3RpdmF0ZSIsIm9ua2V5ZG93biIsImFjdGl2ZUVsZW1lbnQiLCJrZXlib2FyZEhhbmRsZXJzIiwiXyIsInByZXZlbnRTY3JvbGwiLCJzY3JvbGxUbyIsInJlbW92ZURhdGEiLCJzZXRKUXVlcnkiLCJVbmlwb2ludGVyIiwiYmluZFN0YXJ0RXZlbnQiLCJfYmluZFN0YXJ0RXZlbnQiLCJ1bmJpbmRTdGFydEV2ZW50IiwiUG9pbnRlckV2ZW50IiwiZ2V0VG91Y2giLCJpZGVudGlmaWVyIiwicG9pbnRlcklkZW50aWZpZXIiLCJvbm1vdXNlZG93biIsImJ1dHRvbiIsIl9wb2ludGVyRG93biIsIm9udG91Y2hzdGFydCIsImNoYW5nZWRUb3VjaGVzIiwib25wb2ludGVyZG93biIsInBvaW50ZXJJZCIsInBvaW50ZXJEb3duIiwiX2JpbmRQb3N0U3RhcnRFdmVudHMiLCJ0b3VjaHN0YXJ0IiwicG9pbnRlcmRvd24iLCJfYm91bmRQb2ludGVyRXZlbnRzIiwiX3VuYmluZFBvc3RTdGFydEV2ZW50cyIsIm9ubW91c2Vtb3ZlIiwiX3BvaW50ZXJNb3ZlIiwib25wb2ludGVybW92ZSIsIm9udG91Y2htb3ZlIiwicG9pbnRlck1vdmUiLCJvbm1vdXNldXAiLCJfcG9pbnRlclVwIiwib25wb2ludGVydXAiLCJvbnRvdWNoZW5kIiwiX3BvaW50ZXJEb25lIiwicG9pbnRlclVwIiwiX3BvaW50ZXJSZXNldCIsInBvaW50ZXJEb25lIiwib25wb2ludGVyY2FuY2VsIiwiX3BvaW50ZXJDYW5jZWwiLCJvbnRvdWNoY2FuY2VsIiwicG9pbnRlckNhbmNlbCIsImdldFBvaW50ZXJQb2ludCIsIlVuaWRyYWdnZXIiLCJiaW5kSGFuZGxlcyIsIl9iaW5kSGFuZGxlcyIsInVuYmluZEhhbmRsZXMiLCJfdG91Y2hBY3Rpb25WYWx1ZSIsImhhbmRsZXMiLCJva2F5UG9pbnRlckRvd24iLCJwb2ludGVyRG93blBvaW50ZXIiLCJwb2ludGVyRG93bkJsdXIiLCJURVhUQVJFQSIsIklOUFVUIiwiU0VMRUNUIiwiT1BUSU9OIiwicmFkaW8iLCJjaGVja2JveCIsInN1Ym1pdCIsImltYWdlIiwiZmlsZSIsIm5vZGVOYW1lIiwiX2RyYWdQb2ludGVyTW92ZSIsIl9kcmFnTW92ZSIsImhhc0RyYWdTdGFydGVkIiwiX2RyYWdTdGFydCIsIl9kcmFnUG9pbnRlclVwIiwiX2RyYWdFbmQiLCJfc3RhdGljQ2xpY2siLCJpc1ByZXZlbnRpbmdDbGlja3MiLCJvbmNsaWNrIiwiaXNJZ25vcmluZ01vdXNlVXAiLCJzdGF0aWNDbGljayIsImRyYWdnYWJsZSIsImRyYWdUaHJlc2hvbGQiLCJfY3JlYXRlRHJhZyIsIm9uQWN0aXZhdGVEcmFnIiwiX3VpQ2hhbmdlRHJhZyIsIm9uRGVhY3RpdmF0ZURyYWciLCJ1cGRhdGVEcmFnZ2FibGUiLCJiaW5kRHJhZyIsInVuYmluZERyYWciLCJfcG9pbnRlckRvd25EZWZhdWx0IiwiX3BvaW50ZXJEb3duUHJldmVudERlZmF1bHQiLCJwb2ludGVyRG93bkZvY3VzIiwicG9pbnRlckRvd25TY3JvbGwiLCJwb2ludGVyVHlwZSIsImlzVG91Y2hTY3JvbGxpbmciLCJkcmFnU3RhcnRQb3NpdGlvbiIsInByZXZpb3VzRHJhZ1giLCJkcmFnTW92ZVRpbWUiLCJmcmVlU2Nyb2xsIiwiZHJhZ0VuZFJlc3RpbmdTZWxlY3QiLCJkcmFnRW5kQm9vc3RTZWxlY3QiLCJnZXRTbGlkZURpc3RhbmNlIiwiX2dldENsb3Nlc3RSZXN0aW5nIiwiSW5maW5pdHkiLCJmbG9vciIsIm9uc2Nyb2xsIiwiaXNFbmFibGVkIiwiaXNQcmV2aW91cyIsImlzTGVmdCIsImRpc2FibGUiLCJjcmVhdGVTVkciLCJ1cGRhdGUiLCJjcmVhdGVFbGVtZW50TlMiLCJhcnJvd1NoYXBlIiwieDAiLCJ4MSIsInkxIiwieDIiLCJ5MiIsIngzIiwiZW5hYmxlIiwiZGlzYWJsZWQiLCJwcmV2TmV4dEJ1dHRvbnMiLCJfY3JlYXRlUHJldk5leHRCdXR0b25zIiwicHJldkJ1dHRvbiIsIm5leHRCdXR0b24iLCJhY3RpdmF0ZVByZXZOZXh0QnV0dG9ucyIsImRlYWN0aXZhdGVQcmV2TmV4dEJ1dHRvbnMiLCJQcmV2TmV4dEJ1dHRvbiIsImhvbGRlciIsImRvdHMiLCJoYW5kbGVDbGljayIsIm9uQ2xpY2siLCJzZXREb3RzIiwiYWRkRG90cyIsInJlbW92ZURvdHMiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwidXBkYXRlU2VsZWN0ZWQiLCJzZWxlY3RlZERvdCIsIm9uVGFwIiwiUGFnZURvdHMiLCJwYWdlRG90cyIsIl9jcmVhdGVQYWdlRG90cyIsImFjdGl2YXRlUGFnZURvdHMiLCJ1cGRhdGVTZWxlY3RlZFBhZ2VEb3RzIiwidXBkYXRlUGFnZURvdHMiLCJkZWFjdGl2YXRlUGFnZURvdHMiLCJzdGF0ZSIsIm9uVmlzaWJpbGl0eUNoYW5nZSIsInZpc2liaWxpdHlDaGFuZ2UiLCJvblZpc2liaWxpdHlQbGF5IiwidmlzaWJpbGl0eVBsYXkiLCJwbGF5IiwiaGlkZGVuIiwidGljayIsImF1dG9QbGF5IiwiY2xlYXIiLCJzdG9wIiwicGF1c2UiLCJ1bnBhdXNlIiwicGF1c2VBdXRvUGxheU9uSG92ZXIiLCJfY3JlYXRlUGxheWVyIiwicGxheWVyIiwiYWN0aXZhdGVQbGF5ZXIiLCJzdG9wUGxheWVyIiwiZGVhY3RpdmF0ZVBsYXllciIsInBsYXlQbGF5ZXIiLCJwYXVzZVBsYXllciIsInVucGF1c2VQbGF5ZXIiLCJvbm1vdXNlZW50ZXIiLCJvbm1vdXNlbGVhdmUiLCJpbnNlcnQiLCJjZWxsQ2hhbmdlIiwiY2VsbFNpemVDaGFuZ2UiLCJfY3JlYXRlTGF6eWxvYWQiLCJsYXp5TG9hZCIsImZsaWNraXR5Iiwib25sb2FkIiwib25lcnJvciIsIkxhenlMb2FkZXIiLCJfY3JlYXRlQXNOYXZGb3IiLCJhY3RpdmF0ZUFzTmF2Rm9yIiwiZGVhY3RpdmF0ZUFzTmF2Rm9yIiwiZGVzdHJveUFzTmF2Rm9yIiwiYXNOYXZGb3IiLCJzZXROYXZDb21wYW5pb24iLCJuYXZDb21wYW5pb24iLCJvbk5hdkNvbXBhbmlvblNlbGVjdCIsIm5hdkNvbXBhbmlvblNlbGVjdCIsIm9uTmF2U3RhdGljQ2xpY2siLCJyZW1vdmVOYXZTZWxlY3RlZEVsZW1lbnRzIiwibmF2U2VsZWN0ZWRFbGVtZW50cyIsImNoYW5nZU5hdlNlbGVjdGVkQ2xhc3MiLCJpbWFnZXNMb2FkZWQiLCJnZXRJbWFnZXMiLCJqcURlZmVycmVkIiwiRGVmZXJyZWQiLCJjaGVjayIsImltYWdlcyIsImFkZEVsZW1lbnRJbWFnZXMiLCJhZGRJbWFnZSIsImJhY2tncm91bmQiLCJhZGRFbGVtZW50QmFja2dyb3VuZEltYWdlcyIsImV4ZWMiLCJiYWNrZ3JvdW5kSW1hZ2UiLCJhZGRCYWNrZ3JvdW5kIiwicHJvZ3Jlc3NlZENvdW50IiwiaGFzQW55QnJva2VuIiwicHJvZ3Jlc3MiLCJpc0xvYWRlZCIsIm5vdGlmeSIsImRlYnVnIiwibG9nIiwiaXNDb21wbGV0ZSIsImdldElzSW1hZ2VDb21wbGV0ZSIsImNvbmZpcm0iLCJwcm94eUltYWdlIiwiSW1hZ2UiLCJ1bmJpbmRFdmVudHMiLCJtYWtlSlF1ZXJ5UGx1Z2luIiwicHJvbWlzZSIsIl9jcmVhdGVJbWFnZXNMb2FkZWQiLCJmbGt0eU1haW4iLCJmbGt0eU5hdiIsInNob3dUaHVtYkJ5RGVmYXVsdCJdLCJtYXBwaW5ncyI6Ijs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFdBQUFBLE1BQUEsRUFBQUMsT0FBQSxFQUFBO0VBQ0EsUUFBQUMsT0FBQSxpQ0FBQUMsT0FBQSxDQUFBRCxPQUFBLE9BQUEsUUFBQSxJQUFBLE9BQUFFLE1BQUEsS0FBQSxXQUFBLEdBQUFBLE1BQUEs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QTtJQUNBQyxXQUFBLEVBQUEsZUFBQTtJQUNBQyxVQUFBLEVBQUEsY0FBQTtJQUNBQyxVQUFBLEVBQUEsY0FBQTtJQUNBQyxXQUFBLEVBQUEsZUFBQTtJQUNBQyxjQUFBLEVBQUEsa0JBQUE7SUFDQUMsWUFBQSxFQUFBLGdCQUFBO0lBQ0FDLFFBQUEsRUFBQSxZQUFBO0lBQ0FDLGFBQUEsRUFBQSxpQkFBQTtJQUNBQyxZQUFBLEVBQUE7RUFDQSxDQUFBO0VBRUEsSUFBQUMsd0JBQUEsR0FBQTtJQUNBQyxJQUFBLEVBQUEsVUFBQTtJQUNBQyxNQUFBLEVBQUEsTUFBQTtJQUNBQyxLQUFBLEVBQUEsR0FBQTtJQUNBQyxVQUFBLEVBQUEsb0JBQUE7SUFDQUMsTUFBQSxFQUFBLE1BQUE7SUFDQUMsS0FBQSxFQUFBLE1BQUE7SUFDQUMsUUFBQSxFQUFBLEVBQUE7SUFDQUMsVUFBQSxFQUFBLGVBQUE7SUFDQUMsZ0JBQUEsRUFBQSxHQUFBO0lBQ0FDLFNBQUEsRUFBQSxFQUFBO0lBQ0FDLHNCQUFBLEVBQUEsR0FBQTtJQUNBQyxjQUFBLEVBQUEsSUFBQTtJQUNBQyxhQUFBLEVBQUEsQ0FBQTtJQUNBQyxhQUFBLEVBQUEsS0FBQTtJQUNBQyxVQUFBLEVBQUEsQ0FBQTtJQUNBQyxvQkFBQSxFQUFBLElBQUE7SUFDQUMsaUJBQUEsRUFBQSxLQUFBO0lBQ0FDLFlBQUEsRUFBQSxVQUFBO0lBQ0FDLGlCQUFBLEVBQUEsSUFBQTtJQUNBQyxvQkFBQSxFQUFBLENBQUE7SUFDQUMsY0FBQSxFQUFBLEVBQUE7SUFDQUMsZUFBQSxFQUFBLEVBQUE7SUFDQUMsUUFBQSxFQUFBLElBQUE7SUFDQUMsWUFBQSxFQUFBLElBQUE7SUFDQUMsVUFBQSxFQUFBLElBQUE7SUFDQUMsYUFBQSxFQUFBLElBQUE7SUFDQUMsZ0JBQUEsRUFBQSxLQUFBO0lBQ0FDLElBQUEsRUFBQSxJQUFBO0lBQ0FDLE1BQUEsRUFBQSxJQUFBO0lBQ0FDLFFBQUEsRUFBQSxJQUFBO0lBQ0FDLFFBQUEsRUFBQSxJQUFBO0lBQ0FDLGlCQUFBLEVBQUEsSUFB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QXhSLE9BQUEsRUFBQSxDQUNBNGdCLE1BQUE7TUFDQTtNQUNBK0csT0FBQSxFQUNBMkQ7TUFDQTtNQUFBLENBQ0E7O01BQ0FqdkIsS0FBQSxFQUFBLEdBQUE7TUFDQTtNQUNBK2dCLFNBQUEsRUFBQSxJQUFBO01BQ0FDLFlBQUEsRUFBQSxLQUFBO01BQ0F5b0Isa0JBQUEsRUFBQSxLQUFBO01BQ0EzbUMsUUFBQSxFQUFBLEtBQUE7TUFDQVQsUUFBQSxFQUFBO0lBQ0EsQ0FBQSxDQUFBO0VBQ0E7RUFDQSxJQUFBc0MsUUFBQSxDQUFBd1EsY0FBQSxDQUFBLGVBQUEsQ0FBQSxFQUFBO0lBQ0F4WSxZQUFBLENBQUFnSSxRQUFBLENBQUF3USxjQUFBLENBQUEsZUFBQSxDQUFBLEVBQUE7TUFDQXhSLE9BQUEsRUFBQSxDQUFBMm5CLE9BQUE7SUFDQSxDQUFBLENBQUE7RUFDQTtBQUNBLENBQUEsQ0FBQSIsImZpbGUiOiJhcHBTaW5nbGVZYWNodC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogbGlnaHRnYWxsZXJ5IHwgMi40LjAtYmV0YS4wIHwgRGVjZW1iZXIgMTJ0aCAyMDIxXG4gKiBodHRwOi8vd3d3LmxpZ2h0Z2FsbGVyeWpzLmNvbS9cbiAqIENvcHlyaWdodCAoYykgMjAyMCBTYWNoaW4gTmVyYXZhdGg7XG4gKiBAbGljZW5zZSBHUEx2M1xuICovXG5cbihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCkgOlxuICAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShmYWN0b3J5KSA6XG4gICAgKGdsb2JhbCA9IHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbFRoaXMgOiBnbG9iYWwgfHwgc2VsZiwgZ2xvYmFsLmxpZ2h0R2FsbGVyeSA9IGZhY3RvcnkoKSk7XG59KHRoaXMsIChmdW5jdGlvbiAoKSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8qISAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gICAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXHJcblxyXG4gICAgUGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kL29yIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3IgYW55XHJcbiAgICBwdXJwb3NlIHdpdGggb3Igd2l0aG91dCBmZWUgaXMgaGVyZWJ5IGdyYW50ZWQuXHJcblxyXG4gICAgVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiBBTkQgVEhFIEFVVEhPUiBESVNDTEFJTVMgQUxMIFdBUlJBTlRJRVMgV0lUSFxyXG4gICAgUkVHQVJEIFRPIFRISVMgU09GVFdBUkUgSU5DTFVESU5HIEFMTCBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZXHJcbiAgICBBTkQgRklUTkVTUy4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUiBCRSBMSUFCTEUgRk9SIEFOWSBTUEVDSUFMLCBESVJFQ1QsXHJcbiAgICBJTkRJUkVDVCwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIE9SIEFOWSBEQU1BR0VTIFdIQVRTT0VWRVIgUkVTVUxUSU5HIEZST01cclxuICAgIExPU1MgT0YgVVNFLCBEQVRBIE9SIFBST0ZJVFMsIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBORUdMSUdFTkNFIE9SXHJcbiAgICBPVEhFUiBUT1JUSU9VUyBBQ1RJT04sIEFSSVNJTkcgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgVVNFIE9SXHJcbiAgICBQRVJGT1JNQU5DRSBPRiBUSElTIFNPRlRXQVJFLlxyXG4gICAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuXHJcbiAgICB2YXIgX19hc3NpZ24gPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gX19hc3NpZ24odCkge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpIHRbcF0gPSBzW3BdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0O1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbiAgICB9O1xyXG5cclxuICAgIGZ1bmN0aW9uIF9fc3ByZWFkQXJyYXlzKCkge1xyXG4gICAgICAgIGZvciAodmFyIHMgPSAwLCBpID0gMCwgaWwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgaWw7IGkrKykgcyArPSBhcmd1bWVudHNbaV0ubGVuZ3RoO1xyXG4gICAgICAgIGZvciAodmFyIHIgPSBBcnJheShzKSwgayA9IDAsIGkgPSAwOyBpIDwgaWw7IGkrKylcclxuICAgICAgICAgICAgZm9yICh2YXIgYSA9IGFyZ3VtZW50c1tpXSwgaiA9IDAsIGpsID0gYS5sZW5ndGg7IGogPCBqbDsgaisrLCBrKyspXHJcbiAgICAgICAgICAgICAgICByW2tdID0gYVtqXTtcclxuICAgICAgICByZXR1cm4gcjtcclxuICAgIH1cblxuICAgIC8qKlxyXG4gICAgICogTGlzdCBvZiBsaWdodEdhbGxlcnkgZXZlbnRzXHJcbiAgICAgKiBBbGwgZXZlbnRzIHNob3VsZCBiZSBkb2N1bWVudGVkIGhlcmVcclxuICAgICAqIEJlbG93IGludGVyZmFjZXMgYXJlIHVzZWQgdG8gYnVpbGQgdGhlIHdlYnNpdGUgZG9jdW1lbnRhdGlvbnNcclxuICAgICAqICovXHJcbiAgICB2YXIgbEdFdmVudHMgPSB7XHJcbiAgICAgICAgYWZ0ZXJBcHBlbmRTbGlkZTogJ2xnQWZ0ZXJBcHBlbmRTbGlkZScsXHJcbiAgICAgICAgaW5pdDogJ2xnSW5pdCcsXHJcbiAgICAgICAgaGFzVmlkZW86ICdsZ0hhc1ZpZGVvJyxcclxuICAgICAgICBjb250YWluZXJSZXNpemU6ICdsZ0NvbnRhaW5lclJlc2l6ZScsXHJcbiAgICAgICAgdXBkYXRlU2xpZGVzOiAnbGdVcGRhdGVTbGlkZXMnLFxyXG4gICAgICAgIGFmdGVyQXBwZW5kU3ViSHRtbDogJ2xnQWZ0ZXJBcHBlbmRTdWJIdG1sJyxcclxuICAgICAgICBiZWZvcmVPcGVuOiAnbGdCZWZvcmVPcGVuJyxcclxuICAgICAgICBhZnRlck9wZW46ICdsZ0FmdGVyT3BlbicsXHJcbiAgICAgICAgc2xpZGVJdGVtTG9hZDogJ2xnU2xpZGVJdGVtTG9hZCcsXHJcbiAgICAgICAgYmVmb3JlU2xpZGU6ICdsZ0JlZm9yZVNsaWRlJyxcclxuICAgICAgICBhZnRlclNsaWRlOiAnbGdBZnRlclNsaWRlJyxcclxuICAgICAgICBwb3N0ZXJDbGljazogJ2xnUG9zdGVyQ2xpY2snLFxyXG4gICAgICAgIGRyYWdTdGFydDogJ2xnRHJhZ1N0YXJ0JyxcclxuICAgICAgICBkcmFnTW92ZTogJ2xnRHJhZ01vdmUnLFxyXG4gICAgICAgIGRyYWdFbmQ6ICdsZ0RyYWdFbmQnLFxyXG4gICAgICAgIGJlZm9yZU5leHRTbGlkZTogJ2xnQmVmb3JlTmV4dFNsaWRlJyxcclxuICAgICAgICBiZWZvcmVQcmV2U2xpZGU6ICdsZ0JlZm9yZVByZXZTbGlkZScsXHJcbiAgICAgICAgYmVmb3JlQ2xvc2U6ICdsZ0JlZm9yZUNsb3NlJyxcclxuICAgICAgICBhZnRlckNsb3NlOiAnbGdBZnRlckNsb3NlJyxcclxuICAgICAgICByb3RhdGVMZWZ0OiAnbGdSb3RhdGVMZWZ0JyxcclxuICAgICAgICByb3RhdGVSaWdodDogJ2xnUm90YXRlUmlnaHQnLFxyXG4gICAgICAgIGZsaXBIb3Jpem9udGFsOiAnbGdGbGlwSG9yaXpvbnRhbCcsXHJcbiAgICAgICAgZmxpcFZlcnRpY2FsOiAnbGdGbGlwVmVydGljYWwnLFxyXG4gICAgICAgIGF1dG9wbGF5OiAnbGdBdXRvcGxheScsXHJcbiAgICAgICAgYXV0b3BsYXlTdGFydDogJ2xnQXV0b3BsYXlTdGFydCcsXHJcbiAgICAgICAgYXV0b3BsYXlTdG9wOiAnbGdBdXRvcGxheVN0b3AnLFxyXG4gICAgfTtcblxuICAgIHZhciBsaWdodEdhbGxlcnlDb3JlU2V0dGluZ3MgPSB7XHJcbiAgICAgICAgbW9kZTogJ2xnLXNsaWRlJyxcclxuICAgICAgICBlYXNpbmc6ICdlYXNlJyxcclxuICAgICAgICBzcGVlZDogNDAwLFxyXG4gICAgICAgIGxpY2Vuc2VLZXk6ICcwMDAwLTAwMDAtMDAwLTAwMDAnLFxyXG4gICAgICAgIGhlaWdodDogJzEwMCUnLFxyXG4gICAgICAgIHdpZHRoOiAnMTAwJScsXHJcbiAgICAgICAgYWRkQ2xhc3M6ICcnLFxyXG4gICAgICAgIHN0YXJ0Q2xhc3M6ICdsZy1zdGFydC16b29tJyxcclxuICAgICAgICBiYWNrZHJvcER1cmF0aW9uOiAzMDAsXHJcbiAgICAgICAgY29udGFpbmVyOiAnJyxcclxuICAgICAgICBzdGFydEFuaW1hdGlvbkR1cmF0aW9uOiA0MDAsXHJcbiAgICAgICAgem9vbUZyb21PcmlnaW46IHRydWUsXHJcbiAgICAgICAgaGlkZUJhcnNEZWxheTogMCxcclxuICAgICAgICBzaG93QmFyc0FmdGVyOiAxMDAwMCxcclxuICAgICAgICBzbGlkZURlbGF5OiAwLFxyXG4gICAgICAgIHN1cHBvcnRMZWdhY3lCcm93c2VyOiB0cnVlLFxyXG4gICAgICAgIGFsbG93TWVkaWFPdmVybGFwOiBmYWxzZSxcclxuICAgICAgICB2aWRlb01heFNpemU6ICcxMjgwLTcyMCcsXHJcbiAgICAgICAgbG9hZFlvdVR1YmVQb3N0ZXI6IHRydWUsXHJcbiAgICAgICAgZGVmYXVsdENhcHRpb25IZWlnaHQ6IDAsXHJcbiAgICAgICAgYXJpYUxhYmVsbGVkYnk6ICcnLFxyXG4gICAgICAgIGFyaWFEZXNjcmliZWRieTogJycsXHJcbiAgICAgICAgY2xvc2FibGU6IHRydWUsXHJcbiAgICAgICAgc3dpcGVUb0Nsb3NlOiB0cnVlLFxyXG4gICAgICAgIGNsb3NlT25UYXA6IHRydWUsXHJcbiAgICAgICAgc2hvd0Nsb3NlSWNvbjogdHJ1ZSxcclxuICAgICAgICBzaG93TWF4aW1pemVJY29uOiBmYWxzZSxcclxuICAgICAgICBsb29wOiB0cnVlLFxyXG4gICAgICAgIGVzY0tleTogdHJ1ZSxcclxuICAgICAgICBrZXlQcmVzczogdHJ1ZSxcclxuICAgICAgICBjb250cm9sczogdHJ1ZSxcclxuICAgICAgICBzbGlkZUVuZEFuaW1hdGlvbjogdHJ1ZSxcclxuICAgICAgICBoaWRlQ29udHJvbE9uRW5kOiBmYWxzZSxcclxuICAgICAgICBtb3VzZXdoZWVsOiBmYWxzZSxcclxuICAgICAgICBnZXRDYXB0aW9uRnJvbVRpdGxlT3JBbHQ6IHRydWUsXHJcbiAgICAgICAgYXBwZW5kU3ViSHRtbFRvOiAnLmxnLXN1Yi1odG1sJyxcclxuICAgICAgICBzdWJIdG1sU2VsZWN0b3JSZWxhdGl2ZTogZmFsc2UsXHJcbiAgICAgICAgcHJlbG9hZDogMixcclxuICAgICAgICBudW1iZXJPZlNsaWRlSXRlbXNJbkRvbTogMTAsXHJcbiAgICAgICAgc2VsZWN0b3I6ICcnLFxyXG4gICAgICAgIHNlbGVjdFdpdGhpbjogJycsXHJcbiAgICAgICAgbmV4dEh0bWw6ICcnLFxyXG4gICAgICAgIHByZXZIdG1sOiAnJyxcclxuICAgICAgICBpbmRleDogMCxcclxuICAgICAgICBpZnJhbWVXaWR0aDogJzEwMCUnLFxyXG4gICAgICAgIGlmcmFtZUhlaWdodDogJzEwMCUnLFxyXG4gICAgICAgIGlmcmFtZU1heFdpZHRoOiAnMTAwJScsXHJcbiAgICAgICAgaWZyYW1lTWF4SGVpZ2h0OiAnMTAwJScsXHJcbiAgICAgICAgZG93bmxvYWQ6IHRydWUsXHJcbiAgICAgICAgY291bnRlcjogdHJ1ZSxcclxuICAgICAgICBhcHBlbmRDb3VudGVyVG86ICcubGctdG9vbGJhcicsXHJcbiAgICAgICAgc3dpcGVUaHJlc2hvbGQ6IDUwLFxyXG4gICAgICAgIGVuYWJsZVN3aXBlOiB0cnVlLFxyXG4gICAgICAgIGVuYWJsZURyYWc6IHRydWUsXHJcbiAgICAgICAgZHluYW1pYzogZmFsc2UsXHJcbiAgICAgICAgZHluYW1pY0VsOiBbXSxcclxuICAgICAgICBleHRyYVByb3BzOiBbXSxcclxuICAgICAgICBleFRodW1iSW1hZ2U6ICcnLFxyXG4gICAgICAgIGlzTW9iaWxlOiB1bmRlZmluZWQsXHJcbiAgICAgICAgbW9iaWxlU2V0dGluZ3M6IHtcclxuICAgICAgICAgICAgY29udHJvbHM6IGZhbHNlLFxyXG4gICAgICAgICAgICBzaG93Q2xvc2VJY29uOiBmYWxzZSxcclxuICAgICAgICAgICAgZG93bmxvYWQ6IGZhbHNlLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcGx1Z2luczogW10sXHJcbiAgICAgICAgc3RyaW5nczoge1xyXG4gICAgICAgICAgICBjbG9zZUdhbGxlcnk6ICdDbG9zZSBnYWxsZXJ5JyxcclxuICAgICAgICAgICAgdG9nZ2xlTWF4aW1pemU6ICdUb2dnbGUgbWF4aW1pemUnLFxyXG4gICAgICAgICAgICBwcmV2aW91c1NsaWRlOiAnUHJldmlvdXMgc2xpZGUnLFxyXG4gICAgICAgICAgICBuZXh0U2xpZGU6ICdOZXh0IHNsaWRlJyxcclxuICAgICAgICAgICAgZG93bmxvYWQ6ICdEb3dubG9hZCcsXHJcbiAgICAgICAgICAgIHBsYXlWaWRlbzogJ1BsYXkgdmlkZW8nLFxyXG4gICAgICAgIH0sXHJcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gaW5pdExnUG9seWZpbGxzKCkge1xyXG4gICAgICAgIChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygd2luZG93LkN1c3RvbUV2ZW50ID09PSAnZnVuY3Rpb24nKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICBmdW5jdGlvbiBDdXN0b21FdmVudChldmVudCwgcGFyYW1zKSB7XHJcbiAgICAgICAgICAgICAgICBwYXJhbXMgPSBwYXJhbXMgfHwge1xyXG4gICAgICAgICAgICAgICAgICAgIGJ1YmJsZXM6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIGNhbmNlbGFibGU6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIGRldGFpbDogbnVsbCxcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB2YXIgZXZ0ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0N1c3RvbUV2ZW50Jyk7XHJcbiAgICAgICAgICAgICAgICBldnQuaW5pdEN1c3RvbUV2ZW50KGV2ZW50LCBwYXJhbXMuYnViYmxlcywgcGFyYW1zLmNhbmNlbGFibGUsIHBhcmFtcy5kZXRhaWwpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGV2dDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB3aW5kb3cuQ3VzdG9tRXZlbnQgPSBDdXN0b21FdmVudDtcclxuICAgICAgICB9KSgpO1xyXG4gICAgICAgIChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICghRWxlbWVudC5wcm90b3R5cGUubWF0Y2hlcykge1xyXG4gICAgICAgICAgICAgICAgRWxlbWVudC5wcm90b3R5cGUubWF0Y2hlcyA9XHJcbiAgICAgICAgICAgICAgICAgICAgRWxlbWVudC5wcm90b3R5cGUubXNNYXRjaGVzU2VsZWN0b3IgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgRWxlbWVudC5wcm90b3R5cGUud2Via2l0TWF0Y2hlc1NlbGVjdG9yO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSkoKTtcclxuICAgIH1cclxuICAgIHZhciBsZ1F1ZXJ5ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGxnUXVlcnkoc2VsZWN0b3IpIHtcclxuICAgICAgICAgICAgdGhpcy5jc3NWZW5kZXJQcmVmaXhlcyA9IFtcclxuICAgICAgICAgICAgICAgICdUcmFuc2l0aW9uRHVyYXRpb24nLFxyXG4gICAgICAgICAgICAgICAgJ1RyYW5zaXRpb25UaW1pbmdGdW5jdGlvbicsXHJcbiAgICAgICAgICAgICAgICAnVHJhbnNmb3JtJyxcclxuICAgICAgICAgICAgICAgICdUcmFuc2l0aW9uJyxcclxuICAgICAgICAgICAgXTtcclxuICAgICAgICAgICAgdGhpcy5zZWxlY3RvciA9IHRoaXMuX2dldFNlbGVjdG9yKHNlbGVjdG9yKTtcclxuICAgICAgICAgICAgdGhpcy5maXJzdEVsZW1lbnQgPSB0aGlzLl9nZXRGaXJzdEVsKCk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZ1F1ZXJ5LmdlbmVyYXRlVVVJRCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuICd4eHh4eHh4eC14eHh4LTR4eHgteXh4eC14eHh4eHh4eHh4eHgnLnJlcGxhY2UoL1t4eV0vZywgZnVuY3Rpb24gKGMpIHtcclxuICAgICAgICAgICAgICAgIHZhciByID0gKE1hdGgucmFuZG9tKCkgKiAxNikgfCAwLCB2ID0gYyA9PSAneCcgPyByIDogKHIgJiAweDMpIHwgMHg4O1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHYudG9TdHJpbmcoMTYpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIGxnUXVlcnkucHJvdG90eXBlLl9nZXRTZWxlY3RvciA9IGZ1bmN0aW9uIChzZWxlY3RvciwgY29udGV4dCkge1xyXG4gICAgICAgICAgICBpZiAoY29udGV4dCA9PT0gdm9pZCAwKSB7IGNvbnRleHQgPSBkb2N1bWVudDsgfVxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHNlbGVjdG9yICE9PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlbGVjdG9yO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnRleHQgPSBjb250ZXh0IHx8IGRvY3VtZW50O1xyXG4gICAgICAgICAgICB2YXIgZmwgPSBzZWxlY3Rvci5zdWJzdHJpbmcoMCwgMSk7XHJcbiAgICAgICAgICAgIGlmIChmbCA9PT0gJyMnKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY29udGV4dC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBsZ1F1ZXJ5LnByb3RvdHlwZS5fZWFjaCA9IGZ1bmN0aW9uIChmdW5jKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5zZWxlY3Rvcikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMuc2VsZWN0b3IubGVuZ3RoICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIFtdLmZvckVhY2guY2FsbCh0aGlzLnNlbGVjdG9yLCBmdW5jKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGZ1bmModGhpcy5zZWxlY3RvciwgMCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBsZ1F1ZXJ5LnByb3RvdHlwZS5fc2V0Q3NzVmVuZG9yUHJlZml4ID0gZnVuY3Rpb24gKGVsLCBjc3NQcm9wZXJ0eSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgLy8gcHJldHRpZXItaWdub3JlXHJcbiAgICAgICAgICAgIHZhciBwcm9wZXJ0eSA9IGNzc1Byb3BlcnR5LnJlcGxhY2UoLy0oW2Etel0pL2dpLCBmdW5jdGlvbiAocywgZ3JvdXAxKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZ3JvdXAxLnRvVXBwZXJDYXNlKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5jc3NWZW5kZXJQcmVmaXhlcy5pbmRleE9mKHByb3BlcnR5KSAhPT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIGVsLnN0eWxlW3Byb3BlcnR5LmNoYXJBdCgwKS50b0xvd2VyQ2FzZSgpICsgcHJvcGVydHkuc2xpY2UoMSldID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICBlbC5zdHlsZVsnd2Via2l0JyArIHByb3BlcnR5XSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgZWwuc3R5bGVbJ21veicgKyBwcm9wZXJ0eV0gPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIGVsLnN0eWxlWydtcycgKyBwcm9wZXJ0eV0gPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIGVsLnN0eWxlWydvJyArIHByb3BlcnR5XSA9IHZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZWwuc3R5bGVbcHJvcGVydHldID0gdmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIGxnUXVlcnkucHJvdG90eXBlLl9nZXRGaXJzdEVsID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zZWxlY3RvciAmJiB0aGlzLnNlbGVjdG9yLmxlbmd0aCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zZWxlY3RvclswXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNlbGVjdG9yO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBsZ1F1ZXJ5LnByb3RvdHlwZS5pc0V2ZW50TWF0Y2hlZCA9IGZ1bmN0aW9uIChldmVudCwgZXZlbnROYW1lKSB7XHJcbiAgICAgICAgICAgIHZhciBldmVudE5hbWVzcGFjZSA9IGV2ZW50TmFtZS5zcGxpdCgnLicpO1xyXG4gICAgICAgICAgICByZXR1cm4gZXZlbnRcclxuICAgICAgICAgICAgICAgIC5zcGxpdCgnLicpXHJcbiAgICAgICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChlKSB7IHJldHVybiBlOyB9KVxyXG4gICAgICAgICAgICAgICAgLmV2ZXJ5KGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZXZlbnROYW1lc3BhY2UuaW5kZXhPZihlKSAhPT0gLTE7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgbGdRdWVyeS5wcm90b3R5cGUuYXR0ciA9IGZ1bmN0aW9uIChhdHRyLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmZpcnN0RWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmZpcnN0RWxlbWVudC5nZXRBdHRyaWJ1dGUoYXR0cik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5fZWFjaChmdW5jdGlvbiAoZWwpIHtcclxuICAgICAgICAgICAgICAgIGVsLnNldEF0dHJpYnV0ZShhdHRyLCB2YWx1ZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9O1xyXG4gICAgICAgIGxnUXVlcnkucHJvdG90eXBlLmZpbmQgPSBmdW5jdGlvbiAoc2VsZWN0b3IpIHtcclxuICAgICAgICAgICAgcmV0dXJuICRMRyh0aGlzLl9nZXRTZWxlY3RvcihzZWxlY3RvciwgdGhpcy5zZWxlY3RvcikpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgbGdRdWVyeS5wcm90b3R5cGUuZmlyc3QgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnNlbGVjdG9yICYmIHRoaXMuc2VsZWN0b3IubGVuZ3RoICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAkTEcodGhpcy5zZWxlY3RvclswXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJExHKHRoaXMuc2VsZWN0b3IpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBsZ1F1ZXJ5LnByb3RvdHlwZS5lcSA9IGZ1bmN0aW9uIChpbmRleCkge1xyXG4gICAgICAgICAgICByZXR1cm4gJExHKHRoaXMuc2VsZWN0b3JbaW5kZXhdKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIGxnUXVlcnkucHJvdG90eXBlLnBhcmVudCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuICRMRyh0aGlzLnNlbGVjdG9yLnBhcmVudEVsZW1lbnQpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgbGdRdWVyeS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZ2V0Rmlyc3RFbCgpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgbGdRdWVyeS5wcm90b3R5cGUucmVtb3ZlQXR0ciA9IGZ1bmN0aW9uIChhdHRyaWJ1dGVzKSB7XHJcbiAgICAgICAgICAgIHZhciBhdHRycyA9IGF0dHJpYnV0ZXMuc3BsaXQoJyAnKTtcclxuICAgICAgICAgICAgdGhpcy5fZWFjaChmdW5jdGlvbiAoZWwpIHtcclxuICAgICAgICAgICAgICAgIGF0dHJzLmZvckVhY2goZnVuY3Rpb24gKGF0dHIpIHsgcmV0dXJuIGVsLnJlbW92ZUF0dHJpYnV0ZShhdHRyKTsgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9O1xyXG4gICAgICAgIGxnUXVlcnkucHJvdG90eXBlLndyYXAgPSBmdW5jdGlvbiAoY2xhc3NOYW1lKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5maXJzdEVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciB3cmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgICAgIHdyYXBwZXIuY2xhc3NOYW1lID0gY2xhc3NOYW1lO1xyXG4gICAgICAgICAgICB0aGlzLmZpcnN0RWxlbWVudC5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh3cmFwcGVyLCB0aGlzLmZpcnN0RWxlbWVudCk7XHJcbiAgICAgICAgICAgIHRoaXMuZmlyc3RFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5maXJzdEVsZW1lbnQpO1xyXG4gICAgICAgICAgICB3cmFwcGVyLmFwcGVuZENoaWxkKHRoaXMuZmlyc3RFbGVtZW50KTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBsZ1F1ZXJ5LnByb3RvdHlwZS5hZGRDbGFzcyA9IGZ1bmN0aW9uIChjbGFzc05hbWVzKSB7XHJcbiAgICAgICAgICAgIGlmIChjbGFzc05hbWVzID09PSB2b2lkIDApIHsgY2xhc3NOYW1lcyA9ICcnOyB9XHJcbiAgICAgICAgICAgIHRoaXMuX2VhY2goZnVuY3Rpb24gKGVsKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBJRSBkb2Vzbid0IHN1cHBvcnQgbXVsdGlwbGUgYXJndW1lbnRzXHJcbiAgICAgICAgICAgICAgICBjbGFzc05hbWVzLnNwbGl0KCcgJykuZm9yRWFjaChmdW5jdGlvbiAoY2xhc3NOYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNsYXNzTmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbC5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9O1xyXG4gICAgICAgIGxnUXVlcnkucHJvdG90eXBlLnJlbW92ZUNsYXNzID0gZnVuY3Rpb24gKGNsYXNzTmFtZXMpIHtcclxuICAgICAgICAgICAgdGhpcy5fZWFjaChmdW5jdGlvbiAoZWwpIHtcclxuICAgICAgICAgICAgICAgIC8vIElFIGRvZXNuJ3Qgc3VwcG9ydCBtdWx0aXBsZSBhcmd1bWVudHNcclxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZXMuc3BsaXQoJyAnKS5mb3JFYWNoKGZ1bmN0aW9uIChjbGFzc05hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY2xhc3NOYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgbGdRdWVyeS5wcm90b3R5cGUuaGFzQ2xhc3MgPSBmdW5jdGlvbiAoY2xhc3NOYW1lKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5maXJzdEVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5maXJzdEVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKGNsYXNzTmFtZSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBsZ1F1ZXJ5LnByb3RvdHlwZS5oYXNBdHRyaWJ1dGUgPSBmdW5jdGlvbiAoYXR0cmlidXRlKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5maXJzdEVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5maXJzdEVsZW1lbnQuaGFzQXR0cmlidXRlKGF0dHJpYnV0ZSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBsZ1F1ZXJ5LnByb3RvdHlwZS50b2dnbGVDbGFzcyA9IGZ1bmN0aW9uIChjbGFzc05hbWUpIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmZpcnN0RWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMuaGFzQ2xhc3MoY2xhc3NOYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVDbGFzcyhjbGFzc05hbWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hZGRDbGFzcyhjbGFzc05hbWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgbGdRdWVyeS5wcm90b3R5cGUuY3NzID0gZnVuY3Rpb24gKHByb3BlcnR5LCB2YWx1ZSkge1xyXG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgICAgICB0aGlzLl9lYWNoKGZ1bmN0aW9uIChlbCkge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuX3NldENzc1ZlbmRvclByZWZpeChlbCwgcHJvcGVydHksIHZhbHVlKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLy8gTmVlZCB0byBwYXNzIHNlcGFyYXRlIG5hbWVzcGFjZXMgZm9yIHNlcGFyYXRlIGVsZW1lbnRzXHJcbiAgICAgICAgbGdRdWVyeS5wcm90b3R5cGUub24gPSBmdW5jdGlvbiAoZXZlbnRzLCBsaXN0ZW5lcikge1xyXG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuc2VsZWN0b3IpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGV2ZW50cy5zcGxpdCgnICcpLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkobGdRdWVyeS5ldmVudExpc3RlbmVyc1tldmVudF0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGdRdWVyeS5ldmVudExpc3RlbmVyc1tldmVudF0gPSBbXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGxnUXVlcnkuZXZlbnRMaXN0ZW5lcnNbZXZlbnRdLnB1c2gobGlzdGVuZXIpO1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuc2VsZWN0b3IuYWRkRXZlbnRMaXN0ZW5lcihldmVudC5zcGxpdCgnLicpWzBdLCBsaXN0ZW5lcik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8vIEB0b2RvIC0gdGVzdCB0aGlzXHJcbiAgICAgICAgbGdRdWVyeS5wcm90b3R5cGUub25jZSA9IGZ1bmN0aW9uIChldmVudCwgbGlzdGVuZXIpIHtcclxuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAgICAgdGhpcy5vbihldmVudCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMub2ZmKGV2ZW50KTtcclxuICAgICAgICAgICAgICAgIGxpc3RlbmVyKGV2ZW50KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgbGdRdWVyeS5wcm90b3R5cGUub2ZmID0gZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5zZWxlY3Rvcikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgT2JqZWN0LmtleXMobGdRdWVyeS5ldmVudExpc3RlbmVycykuZm9yRWFjaChmdW5jdGlvbiAoZXZlbnROYW1lKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMuaXNFdmVudE1hdGNoZWQoZXZlbnQsIGV2ZW50TmFtZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZ1F1ZXJ5LmV2ZW50TGlzdGVuZXJzW2V2ZW50TmFtZV0uZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuc2VsZWN0b3IucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudE5hbWUuc3BsaXQoJy4nKVswXSwgbGlzdGVuZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGxnUXVlcnkuZXZlbnRMaXN0ZW5lcnNbZXZlbnROYW1lXSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBsZ1F1ZXJ5LnByb3RvdHlwZS50cmlnZ2VyID0gZnVuY3Rpb24gKGV2ZW50LCBkZXRhaWwpIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmZpcnN0RWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIGN1c3RvbUV2ZW50ID0gbmV3IEN1c3RvbUV2ZW50KGV2ZW50LnNwbGl0KCcuJylbMF0sIHtcclxuICAgICAgICAgICAgICAgIGRldGFpbDogZGV0YWlsIHx8IG51bGwsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB0aGlzLmZpcnN0RWxlbWVudC5kaXNwYXRjaEV2ZW50KGN1c3RvbUV2ZW50KTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvLyBEb2VzIG5vdCBzdXBwb3J0IElFXHJcbiAgICAgICAgbGdRdWVyeS5wcm90b3R5cGUubG9hZCA9IGZ1bmN0aW9uICh1cmwpIHtcclxuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAgICAgZmV0Y2godXJsKS50aGVuKGZ1bmN0aW9uIChyZXMpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLnNlbGVjdG9yLmlubmVySFRNTCA9IHJlcztcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgbGdRdWVyeS5wcm90b3R5cGUuaHRtbCA9IGZ1bmN0aW9uIChodG1sKSB7XHJcbiAgICAgICAgICAgIGlmIChodG1sID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5maXJzdEVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5maXJzdEVsZW1lbnQuaW5uZXJIVE1MO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuX2VhY2goZnVuY3Rpb24gKGVsKSB7XHJcbiAgICAgICAgICAgICAgICBlbC5pbm5lckhUTUwgPSBodG1sO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBsZ1F1ZXJ5LnByb3RvdHlwZS5hcHBlbmQgPSBmdW5jdGlvbiAoaHRtbCkge1xyXG4gICAgICAgICAgICB0aGlzLl9lYWNoKGZ1bmN0aW9uIChlbCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBodG1sID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGVsLmluc2VydEFkamFjZW50SFRNTCgnYmVmb3JlZW5kJywgaHRtbCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBlbC5hcHBlbmRDaGlsZChodG1sKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgbGdRdWVyeS5wcm90b3R5cGUucHJlcGVuZCA9IGZ1bmN0aW9uIChodG1sKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2VhY2goZnVuY3Rpb24gKGVsKSB7XHJcbiAgICAgICAgICAgICAgICBlbC5pbnNlcnRBZGphY2VudEhUTUwoJ2FmdGVyYmVnaW4nLCBodG1sKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgbGdRdWVyeS5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0aGlzLl9lYWNoKGZ1bmN0aW9uIChlbCkge1xyXG4gICAgICAgICAgICAgICAgZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9O1xyXG4gICAgICAgIGxnUXVlcnkucHJvdG90eXBlLmVtcHR5ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0aGlzLl9lYWNoKGZ1bmN0aW9uIChlbCkge1xyXG4gICAgICAgICAgICAgICAgZWwuaW5uZXJIVE1MID0gJyc7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9O1xyXG4gICAgICAgIGxnUXVlcnkucHJvdG90eXBlLnNjcm9sbFRvcCA9IGZ1bmN0aW9uIChzY3JvbGxUb3ApIHtcclxuICAgICAgICAgICAgaWYgKHNjcm9sbFRvcCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcCA9IHNjcm9sbFRvcDtcclxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3AgPSBzY3JvbGxUb3A7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAod2luZG93LnBhZ2VZT2Zmc2V0IHx8XHJcbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCB8fFxyXG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgMCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIGxnUXVlcnkucHJvdG90eXBlLnNjcm9sbExlZnQgPSBmdW5jdGlvbiAoc2Nyb2xsTGVmdCkge1xyXG4gICAgICAgICAgICBpZiAoc2Nyb2xsTGVmdCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LnNjcm9sbExlZnQgPSBzY3JvbGxMZWZ0O1xyXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbExlZnQgPSBzY3JvbGxMZWZ0O1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKHdpbmRvdy5wYWdlWE9mZnNldCB8fFxyXG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxMZWZ0IHx8XHJcbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5zY3JvbGxMZWZ0IHx8XHJcbiAgICAgICAgICAgICAgICAgICAgMCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIGxnUXVlcnkucHJvdG90eXBlLm9mZnNldCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmZpcnN0RWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICBsZWZ0OiAwLFxyXG4gICAgICAgICAgICAgICAgICAgIHRvcDogMCxcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIHJlY3QgPSB0aGlzLmZpcnN0RWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICAgICAgdmFyIGJvZHlNYXJnaW5MZWZ0ID0gJExHKCdib2R5Jykuc3R5bGUoKS5tYXJnaW5MZWZ0O1xyXG4gICAgICAgICAgICAvLyBNaW51cyBib2R5IG1hcmdpbiAtIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzMwNzExNTQ4L2lzLWdldGJvdW5kaW5nY2xpZW50cmVjdC1sZWZ0LXJldHVybmluZy1hLXdyb25nLXZhbHVlXHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBsZWZ0OiByZWN0LmxlZnQgLSBwYXJzZUZsb2F0KGJvZHlNYXJnaW5MZWZ0KSArIHRoaXMuc2Nyb2xsTGVmdCgpLFxyXG4gICAgICAgICAgICAgICAgdG9wOiByZWN0LnRvcCArIHRoaXMuc2Nyb2xsVG9wKCksXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfTtcclxuICAgICAgICBsZ1F1ZXJ5LnByb3RvdHlwZS5zdHlsZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmZpcnN0RWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHt9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiAodGhpcy5maXJzdEVsZW1lbnQuY3VycmVudFN0eWxlIHx8XHJcbiAgICAgICAgICAgICAgICB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLmZpcnN0RWxlbWVudCkpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLy8gV2lkdGggd2l0aG91dCBwYWRkaW5nIGFuZCBib3JkZXIgZXZlbiBpZiBib3gtc2l6aW5nIGlzIHVzZWQuXHJcbiAgICAgICAgbGdRdWVyeS5wcm90b3R5cGUud2lkdGggPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBzdHlsZSA9IHRoaXMuc3R5bGUoKTtcclxuICAgICAgICAgICAgcmV0dXJuICh0aGlzLmZpcnN0RWxlbWVudC5jbGllbnRXaWR0aCAtXHJcbiAgICAgICAgICAgICAgICBwYXJzZUZsb2F0KHN0eWxlLnBhZGRpbmdMZWZ0KSAtXHJcbiAgICAgICAgICAgICAgICBwYXJzZUZsb2F0KHN0eWxlLnBhZGRpbmdSaWdodCkpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLy8gSGVpZ2h0IHdpdGhvdXQgcGFkZGluZyBhbmQgYm9yZGVyIGV2ZW4gaWYgYm94LXNpemluZyBpcyB1c2VkLlxyXG4gICAgICAgIGxnUXVlcnkucHJvdG90eXBlLmhlaWdodCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHN0eWxlID0gdGhpcy5zdHlsZSgpO1xyXG4gICAgICAgICAgICByZXR1cm4gKHRoaXMuZmlyc3RFbGVtZW50LmNsaWVudEhlaWdodCAtXHJcbiAgICAgICAgICAgICAgICBwYXJzZUZsb2F0KHN0eWxlLnBhZGRpbmdUb3ApIC1cclxuICAgICAgICAgICAgICAgIHBhcnNlRmxvYXQoc3R5bGUucGFkZGluZ0JvdHRvbSkpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgbGdRdWVyeS5ldmVudExpc3RlbmVycyA9IHt9O1xyXG4gICAgICAgIHJldHVybiBsZ1F1ZXJ5O1xyXG4gICAgfSgpKTtcclxuICAgIGZ1bmN0aW9uICRMRyhzZWxlY3Rvcikge1xyXG4gICAgICAgIGluaXRMZ1BvbHlmaWxscygpO1xyXG4gICAgICAgIHJldHVybiBuZXcgbGdRdWVyeShzZWxlY3Rvcik7XHJcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdER5bmFtaWNPcHRpb25zID0gW1xyXG4gICAgICAgICdzcmMnLFxyXG4gICAgICAgICdzb3VyY2VzJyxcclxuICAgICAgICAnc3ViSHRtbCcsXHJcbiAgICAgICAgJ3N1Ykh0bWxVcmwnLFxyXG4gICAgICAgICdodG1sJyxcclxuICAgICAgICAndmlkZW8nLFxyXG4gICAgICAgICdwb3N0ZXInLFxyXG4gICAgICAgICdzbGlkZU5hbWUnLFxyXG4gICAgICAgICdyZXNwb25zaXZlJyxcclxuICAgICAgICAnc3Jjc2V0JyxcclxuICAgICAgICAnc2l6ZXMnLFxyXG4gICAgICAgICdpZnJhbWUnLFxyXG4gICAgICAgICdkb3dubG9hZFVybCcsXHJcbiAgICAgICAgJ2Rvd25sb2FkJyxcclxuICAgICAgICAnd2lkdGgnLFxyXG4gICAgICAgICdmYWNlYm9va1NoYXJlVXJsJyxcclxuICAgICAgICAndHdlZXRUZXh0JyxcclxuICAgICAgICAnaWZyYW1lVGl0bGUnLFxyXG4gICAgICAgICd0d2l0dGVyU2hhcmVVcmwnLFxyXG4gICAgICAgICdwaW50ZXJlc3RTaGFyZVVybCcsXHJcbiAgICAgICAgJ3BpbnRlcmVzdFRleHQnLFxyXG4gICAgICAgICdmYkh0bWwnLFxyXG4gICAgICAgICdkaXNxdXNJZGVudGlmaWVyJyxcclxuICAgICAgICAnZGlzcXVzVXJsJyxcclxuICAgIF07XHJcbiAgICAvLyBDb252ZXJ0IGh0bWwgZGF0YS1hdHRyaWJ1dGUgdG8gY2FtYWxjYXNlXHJcbiAgICBmdW5jdGlvbiBjb252ZXJ0VG9EYXRhKGF0dHIpIHtcclxuICAgICAgICAvLyBGSW5kIGEgd2F5IGZvciBsZ3NpemVcclxuICAgICAgICBpZiAoYXR0ciA9PT0gJ2hyZWYnKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnc3JjJztcclxuICAgICAgICB9XHJcbiAgICAgICAgYXR0ciA9IGF0dHIucmVwbGFjZSgnZGF0YS0nLCAnJyk7XHJcbiAgICAgICAgYXR0ciA9IGF0dHIuY2hhckF0KDApLnRvTG93ZXJDYXNlKCkgKyBhdHRyLnNsaWNlKDEpO1xyXG4gICAgICAgIGF0dHIgPSBhdHRyLnJlcGxhY2UoLy0oW2Etel0pL2csIGZ1bmN0aW9uIChnKSB7IHJldHVybiBnWzFdLnRvVXBwZXJDYXNlKCk7IH0pO1xyXG4gICAgICAgIHJldHVybiBhdHRyO1xyXG4gICAgfVxyXG4gICAgdmFyIHV0aWxzID0ge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIGdldCBwb3NzaWJsZSB3aWR0aCBhbmQgaGVpZ2h0IGZyb20gdGhlIGxnU2l6ZSBhdHRyaWJ1dGUuIFVzZWQgZm9yIFpvb21Gcm9tT3JpZ2luIG9wdGlvblxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGdldFNpemU6IGZ1bmN0aW9uIChlbCwgY29udGFpbmVyLCBzcGFjaW5nLCBkZWZhdWx0TGdTaXplKSB7XHJcbiAgICAgICAgICAgIGlmIChzcGFjaW5nID09PSB2b2lkIDApIHsgc3BhY2luZyA9IDA7IH1cclxuICAgICAgICAgICAgdmFyIExHZWwgPSAkTEcoZWwpO1xyXG4gICAgICAgICAgICB2YXIgbGdTaXplID0gTEdlbC5hdHRyKCdkYXRhLWxnLXNpemUnKSB8fCBkZWZhdWx0TGdTaXplO1xyXG4gICAgICAgICAgICBpZiAoIWxnU2l6ZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBpc1Jlc3BvbnNpdmVTaXplcyA9IGxnU2l6ZS5zcGxpdCgnLCcpO1xyXG4gICAgICAgICAgICAvLyBpZiBhdC1sZWFzdCB0d28gdmlld3BvcnQgc2l6ZXMgYXJlIGF2YWlsYWJsZVxyXG4gICAgICAgICAgICBpZiAoaXNSZXNwb25zaXZlU2l6ZXNbMV0pIHtcclxuICAgICAgICAgICAgICAgIHZhciB3V2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaXNSZXNwb25zaXZlU2l6ZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc2l6ZV8xID0gaXNSZXNwb25zaXZlU2l6ZXNbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3BvbnNpdmVXaWR0aCA9IHBhcnNlSW50KHNpemVfMS5zcGxpdCgnLScpWzJdLCAxMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNpdmVXaWR0aCA+IHdXaWR0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZ1NpemUgPSBzaXplXzE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvLyB0YWtlIGxhc3QgaXRlbSBhcyBsYXN0IG9wdGlvblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpID09PSBpc1Jlc3BvbnNpdmVTaXplcy5sZW5ndGggLSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxnU2l6ZSA9IHNpemVfMTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIHNpemUgPSBsZ1NpemUuc3BsaXQoJy0nKTtcclxuICAgICAgICAgICAgdmFyIHdpZHRoID0gcGFyc2VJbnQoc2l6ZVswXSwgMTApO1xyXG4gICAgICAgICAgICB2YXIgaGVpZ2h0ID0gcGFyc2VJbnQoc2l6ZVsxXSwgMTApO1xyXG4gICAgICAgICAgICB2YXIgY1dpZHRoID0gY29udGFpbmVyLndpZHRoKCk7XHJcbiAgICAgICAgICAgIHZhciBjSGVpZ2h0ID0gY29udGFpbmVyLmhlaWdodCgpIC0gc3BhY2luZztcclxuICAgICAgICAgICAgdmFyIG1heFdpZHRoID0gTWF0aC5taW4oY1dpZHRoLCB3aWR0aCk7XHJcbiAgICAgICAgICAgIHZhciBtYXhIZWlnaHQgPSBNYXRoLm1pbihjSGVpZ2h0LCBoZWlnaHQpO1xyXG4gICAgICAgICAgICB2YXIgcmF0aW8gPSBNYXRoLm1pbihtYXhXaWR0aCAvIHdpZHRoLCBtYXhIZWlnaHQgLyBoZWlnaHQpO1xyXG4gICAgICAgICAgICByZXR1cm4geyB3aWR0aDogd2lkdGggKiByYXRpbywgaGVpZ2h0OiBoZWlnaHQgKiByYXRpbyB9O1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2MgR2V0IHRyYW5zZm9ybSB2YWx1ZSBiYXNlZCBvbiB0aGUgaW1hZ2VTaXplLiBVc2VkIGZvciBab29tRnJvbU9yaWdpbiBvcHRpb25cclxuICAgICAgICAgKiBAcGFyYW0ge2pRdWVyeSBFbGVtZW50fVxyXG4gICAgICAgICAqIEByZXR1cm5zIHtTdHJpbmd9IFRyYW5zZm9ybSBDU1Mgc3RyaW5nXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0VHJhbnNmb3JtOiBmdW5jdGlvbiAoZWwsIGNvbnRhaW5lciwgdG9wLCBib3R0b20sIGltYWdlU2l6ZSkge1xyXG4gICAgICAgICAgICBpZiAoIWltYWdlU2l6ZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBMR2VsID0gJExHKGVsKS5maW5kKCdpbWcnKS5maXJzdCgpO1xyXG4gICAgICAgICAgICBpZiAoIUxHZWwuZ2V0KCkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgY29udGFpbmVyUmVjdCA9IGNvbnRhaW5lci5nZXQoKS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICAgICAgdmFyIHdXaWR0aCA9IGNvbnRhaW5lclJlY3Qud2lkdGg7XHJcbiAgICAgICAgICAgIC8vIHVzaW5nIGlubmVyV2lkdGggdG8gaW5jbHVkZSBtb2JpbGUgc2FmYXJpIGJvdHRvbSBiYXJcclxuICAgICAgICAgICAgdmFyIHdIZWlnaHQgPSBjb250YWluZXIuaGVpZ2h0KCkgLSAodG9wICsgYm90dG9tKTtcclxuICAgICAgICAgICAgdmFyIGVsV2lkdGggPSBMR2VsLndpZHRoKCk7XHJcbiAgICAgICAgICAgIHZhciBlbEhlaWdodCA9IExHZWwuaGVpZ2h0KCk7XHJcbiAgICAgICAgICAgIHZhciBlbFN0eWxlID0gTEdlbC5zdHlsZSgpO1xyXG4gICAgICAgICAgICB2YXIgeCA9ICh3V2lkdGggLSBlbFdpZHRoKSAvIDIgLVxyXG4gICAgICAgICAgICAgICAgTEdlbC5vZmZzZXQoKS5sZWZ0ICtcclxuICAgICAgICAgICAgICAgIChwYXJzZUZsb2F0KGVsU3R5bGUucGFkZGluZ0xlZnQpIHx8IDApICtcclxuICAgICAgICAgICAgICAgIChwYXJzZUZsb2F0KGVsU3R5bGUuYm9yZGVyTGVmdCkgfHwgMCkgK1xyXG4gICAgICAgICAgICAgICAgJExHKHdpbmRvdykuc2Nyb2xsTGVmdCgpICtcclxuICAgICAgICAgICAgICAgIGNvbnRhaW5lclJlY3QubGVmdDtcclxuICAgICAgICAgICAgdmFyIHkgPSAod0hlaWdodCAtIGVsSGVpZ2h0KSAvIDIgLVxyXG4gICAgICAgICAgICAgICAgTEdlbC5vZmZzZXQoKS50b3AgK1xyXG4gICAgICAgICAgICAgICAgKHBhcnNlRmxvYXQoZWxTdHlsZS5wYWRkaW5nVG9wKSB8fCAwKSArXHJcbiAgICAgICAgICAgICAgICAocGFyc2VGbG9hdChlbFN0eWxlLmJvcmRlclRvcCkgfHwgMCkgK1xyXG4gICAgICAgICAgICAgICAgJExHKHdpbmRvdykuc2Nyb2xsVG9wKCkgK1xyXG4gICAgICAgICAgICAgICAgdG9wO1xyXG4gICAgICAgICAgICB2YXIgc2NYID0gZWxXaWR0aCAvIGltYWdlU2l6ZS53aWR0aDtcclxuICAgICAgICAgICAgdmFyIHNjWSA9IGVsSGVpZ2h0IC8gaW1hZ2VTaXplLmhlaWdodDtcclxuICAgICAgICAgICAgdmFyIHRyYW5zZm9ybSA9ICd0cmFuc2xhdGUzZCgnICtcclxuICAgICAgICAgICAgICAgICh4ICo9IC0xKSArXHJcbiAgICAgICAgICAgICAgICAncHgsICcgK1xyXG4gICAgICAgICAgICAgICAgKHkgKj0gLTEpICtcclxuICAgICAgICAgICAgICAgICdweCwgMCkgc2NhbGUzZCgnICtcclxuICAgICAgICAgICAgICAgIHNjWCArXHJcbiAgICAgICAgICAgICAgICAnLCAnICtcclxuICAgICAgICAgICAgICAgIHNjWSArXHJcbiAgICAgICAgICAgICAgICAnLCAxKSc7XHJcbiAgICAgICAgICAgIHJldHVybiB0cmFuc2Zvcm07XHJcbiAgICAgICAgfSxcclxuICAgICAgICBnZXRJZnJhbWVNYXJrdXA6IGZ1bmN0aW9uIChpZnJhbWVXaWR0aCwgaWZyYW1lSGVpZ2h0LCBpZnJhbWVNYXhXaWR0aCwgaWZyYW1lTWF4SGVpZ2h0LCBzcmMsIGlmcmFtZVRpdGxlKSB7XHJcbiAgICAgICAgICAgIHZhciB0aXRsZSA9IGlmcmFtZVRpdGxlID8gJ3RpdGxlPVwiJyArIGlmcmFtZVRpdGxlICsgJ1wiJyA6ICcnO1xyXG4gICAgICAgICAgICByZXR1cm4gXCI8ZGl2IGNsYXNzPVxcXCJsZy12aWRlby1jb250IGxnLWhhcy1pZnJhbWVcXFwiIHN0eWxlPVxcXCJ3aWR0aDpcIiArIGlmcmFtZVdpZHRoICsgXCI7IG1heC13aWR0aDpcIiArIGlmcmFtZU1heFdpZHRoICsgXCI7IGhlaWdodDogXCIgKyBpZnJhbWVIZWlnaHQgKyBcIjsgbWF4LWhlaWdodDpcIiArIGlmcmFtZU1heEhlaWdodCArIFwiXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIDxpZnJhbWUgY2xhc3M9XFxcImxnLW9iamVjdFxcXCIgZnJhbWVib3JkZXI9XFxcIjBcXFwiIFwiICsgdGl0bGUgKyBcIiBzcmM9XFxcIlwiICsgc3JjICsgXCJcXFwiICBhbGxvd2Z1bGxzY3JlZW49XFxcInRydWVcXFwiPjwvaWZyYW1lPlxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cIjtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGdldEltZ01hcmt1cDogZnVuY3Rpb24gKGluZGV4LCBzcmMsIGFsdEF0dHIsIHNyY3NldCwgc2l6ZXMsIHNvdXJjZXMpIHtcclxuICAgICAgICAgICAgdmFyIHNyY3NldEF0dHIgPSBzcmNzZXQgPyBcInNyY3NldD1cXFwiXCIgKyBzcmNzZXQgKyBcIlxcXCJcIiA6ICcnO1xyXG4gICAgICAgICAgICB2YXIgc2l6ZXNBdHRyID0gc2l6ZXMgPyBcInNpemVzPVxcXCJcIiArIHNpemVzICsgXCJcXFwiXCIgOiAnJztcclxuICAgICAgICAgICAgdmFyIGltZ01hcmt1cCA9IFwiPGltZyBcIiArIGFsdEF0dHIgKyBcIiBcIiArIHNyY3NldEF0dHIgKyBcIiAgXCIgKyBzaXplc0F0dHIgKyBcIiBjbGFzcz1cXFwibGctb2JqZWN0IGxnLWltYWdlXFxcIiBkYXRhLWluZGV4PVxcXCJcIiArIGluZGV4ICsgXCJcXFwiIHNyYz1cXFwiXCIgKyBzcmMgKyBcIlxcXCIgLz5cIjtcclxuICAgICAgICAgICAgdmFyIHNvdXJjZVRhZyA9ICcnO1xyXG4gICAgICAgICAgICBpZiAoc291cmNlcykge1xyXG4gICAgICAgICAgICAgICAgdmFyIHNvdXJjZU9iaiA9IHR5cGVvZiBzb3VyY2VzID09PSAnc3RyaW5nJyA/IEpTT04ucGFyc2Uoc291cmNlcykgOiBzb3VyY2VzO1xyXG4gICAgICAgICAgICAgICAgc291cmNlVGFnID0gc291cmNlT2JqLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGF0dHJzID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmtleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gRG8gbm90IHJlbW92ZSB0aGUgZmlyc3Qgc3BhY2UgYXMgaXQgaXMgcmVxdWlyZWQgdG8gc2VwYXJhdGUgdGhlIGF0dHJpYnV0ZXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnMgKz0gXCIgXCIgKyBrZXkgKyBcIj1cXFwiXCIgKyBzb3VyY2Vba2V5XSArIFwiXFxcIlwiO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcIjxzb3VyY2UgXCIgKyBhdHRycyArIFwiPjwvc291cmNlPlwiO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIFwiXCIgKyBzb3VyY2VUYWcgKyBpbWdNYXJrdXA7XHJcbiAgICAgICAgfSxcclxuICAgICAgICAvLyBHZXQgc3JjIGZyb20gcmVzcG9uc2l2ZSBzcmNcclxuICAgICAgICBnZXRSZXNwb25zaXZlU3JjOiBmdW5jdGlvbiAoc3JjSXRtcykge1xyXG4gICAgICAgICAgICB2YXIgcnNXaWR0aCA9IFtdO1xyXG4gICAgICAgICAgICB2YXIgcnNTcmMgPSBbXTtcclxuICAgICAgICAgICAgdmFyIHNyYyA9ICcnO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNyY0l0bXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBfc3JjID0gc3JjSXRtc1tpXS5zcGxpdCgnICcpO1xyXG4gICAgICAgICAgICAgICAgLy8gTWFuYWdlIGVtcHR5IHNwYWNlXHJcbiAgICAgICAgICAgICAgICBpZiAoX3NyY1swXSA9PT0gJycpIHtcclxuICAgICAgICAgICAgICAgICAgICBfc3JjLnNwbGljZSgwLCAxKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJzU3JjLnB1c2goX3NyY1swXSk7XHJcbiAgICAgICAgICAgICAgICByc1dpZHRoLnB1c2goX3NyY1sxXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIHdXaWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHJzV2lkdGgubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgICAgIGlmIChwYXJzZUludChyc1dpZHRoW2pdLCAxMCkgPiB3V2lkdGgpIHtcclxuICAgICAgICAgICAgICAgICAgICBzcmMgPSByc1NyY1tqXTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gc3JjO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaXNJbWFnZUxvYWRlZDogZnVuY3Rpb24gKGltZykge1xyXG4gICAgICAgICAgICBpZiAoIWltZylcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgLy8gRHVyaW5nIHRoZSBvbmxvYWQgZXZlbnQsIElFIGNvcnJlY3RseSBpZGVudGlmaWVzIGFueSBpbWFnZXMgdGhhdFxyXG4gICAgICAgICAgICAvLyB3ZXJlbuKAmXQgZG93bmxvYWRlZCBhcyBub3QgY29tcGxldGUuIE90aGVycyBzaG91bGQgdG9vLiBHZWNrby1iYXNlZFxyXG4gICAgICAgICAgICAvLyBicm93c2VycyBhY3QgbGlrZSBOUzQgaW4gdGhhdCB0aGV5IHJlcG9ydCB0aGlzIGluY29ycmVjdGx5LlxyXG4gICAgICAgICAgICBpZiAoIWltZy5jb21wbGV0ZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIEhvd2V2ZXIsIHRoZXkgZG8gaGF2ZSB0d28gdmVyeSB1c2VmdWwgcHJvcGVydGllczogbmF0dXJhbFdpZHRoIGFuZFxyXG4gICAgICAgICAgICAvLyBuYXR1cmFsSGVpZ2h0LiBUaGVzZSBnaXZlIHRoZSB0cnVlIHNpemUgb2YgdGhlIGltYWdlLiBJZiBpdCBmYWlsZWRcclxuICAgICAgICAgICAgLy8gdG8gbG9hZCwgZWl0aGVyIG9mIHRoZXNlIHNob3VsZCBiZSB6ZXJvLlxyXG4gICAgICAgICAgICBpZiAoaW1nLm5hdHVyYWxXaWR0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIE5vIG90aGVyIHdheSBvZiBjaGVja2luZzogYXNzdW1lIGl04oCZcyBvay5cclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBnZXRWaWRlb1Bvc3Rlck1hcmt1cDogZnVuY3Rpb24gKF9wb3N0ZXIsIGR1bW15SW1nLCB2aWRlb0NvbnRTdHlsZSwgcGxheVZpZGVvU3RyaW5nLCBfaXNWaWRlbykge1xyXG4gICAgICAgICAgICB2YXIgdmlkZW9DbGFzcyA9ICcnO1xyXG4gICAgICAgICAgICBpZiAoX2lzVmlkZW8gJiYgX2lzVmlkZW8ueW91dHViZSkge1xyXG4gICAgICAgICAgICAgICAgdmlkZW9DbGFzcyA9ICdsZy1oYXMteW91dHViZSc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoX2lzVmlkZW8gJiYgX2lzVmlkZW8udmltZW8pIHtcclxuICAgICAgICAgICAgICAgIHZpZGVvQ2xhc3MgPSAnbGctaGFzLXZpbWVvJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZpZGVvQ2xhc3MgPSAnbGctaGFzLWh0bWw1JztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gXCI8ZGl2IGNsYXNzPVxcXCJsZy12aWRlby1jb250IFwiICsgdmlkZW9DbGFzcyArIFwiXFxcIiBzdHlsZT1cXFwiXCIgKyB2aWRlb0NvbnRTdHlsZSArIFwiXFxcIj5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwibGctdmlkZW8tcGxheS1idXR0b25cXFwiPlxcbiAgICAgICAgICAgICAgICA8c3ZnXFxuICAgICAgICAgICAgICAgICAgICB2aWV3Qm94PVxcXCIwIDAgMjAgMjBcXFwiXFxuICAgICAgICAgICAgICAgICAgICBwcmVzZXJ2ZUFzcGVjdFJhdGlvPVxcXCJ4TWlkWU1pZFxcXCJcXG4gICAgICAgICAgICAgICAgICAgIGZvY3VzYWJsZT1cXFwiZmFsc2VcXFwiXFxuICAgICAgICAgICAgICAgICAgICBhcmlhLWxhYmVsbGVkYnk9XFxcIlwiICsgcGxheVZpZGVvU3RyaW5nICsgXCJcXFwiXFxuICAgICAgICAgICAgICAgICAgICByb2xlPVxcXCJpbWdcXFwiXFxuICAgICAgICAgICAgICAgICAgICBjbGFzcz1cXFwibGctdmlkZW8tcGxheS1pY29uXFxcIlxcbiAgICAgICAgICAgICAgICA+XFxuICAgICAgICAgICAgICAgICAgICA8dGl0bGU+XCIgKyBwbGF5VmlkZW9TdHJpbmcgKyBcIjwvdGl0bGU+XFxuICAgICAgICAgICAgICAgICAgICA8cG9seWdvbiBjbGFzcz1cXFwibGctdmlkZW8tcGxheS1pY29uLWlubmVyXFxcIiBwb2ludHM9XFxcIjEsMCAyMCwxMCAxLDIwXFxcIj48L3BvbHlnb24+XFxuICAgICAgICAgICAgICAgIDwvc3ZnPlxcbiAgICAgICAgICAgICAgICA8c3ZnIGNsYXNzPVxcXCJsZy12aWRlby1wbGF5LWljb24tYmdcXFwiIHZpZXdCb3g9XFxcIjAgMCA1MCA1MFxcXCIgZm9jdXNhYmxlPVxcXCJmYWxzZVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8Y2lyY2xlIGN4PVxcXCI1MCVcXFwiIGN5PVxcXCI1MCVcXFwiIHI9XFxcIjIwXFxcIj48L2NpcmNsZT48L3N2Zz5cXG4gICAgICAgICAgICAgICAgPHN2ZyBjbGFzcz1cXFwibGctdmlkZW8tcGxheS1pY29uLWNpcmNsZVxcXCIgdmlld0JveD1cXFwiMCAwIDUwIDUwXFxcIiBmb2N1c2FibGU9XFxcImZhbHNlXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIDxjaXJjbGUgY3g9XFxcIjUwJVxcXCIgY3k9XFxcIjUwJVxcXCIgcj1cXFwiMjBcXFwiPjwvY2lyY2xlPlxcbiAgICAgICAgICAgICAgICA8L3N2Zz5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICBcIiArIChkdW1teUltZyB8fCAnJykgKyBcIlxcbiAgICAgICAgICAgIDxpbWcgY2xhc3M9XFxcImxnLW9iamVjdCBsZy12aWRlby1wb3N0ZXJcXFwiIHNyYz1cXFwiXCIgKyBfcG9zdGVyICsgXCJcXFwiIC8+XFxuICAgICAgICA8L2Rpdj5cIjtcclxuICAgICAgICB9LFxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjIENyZWF0ZSBkeW5hbWljIGVsZW1lbnRzIGFycmF5IGZyb20gZ2FsbGVyeSBpdGVtcyB3aGVuIGR5bmFtaWMgb3B0aW9uIGlzIGZhbHNlXHJcbiAgICAgICAgICogSXQgaGVscHMgdG8gYXZvaWQgZnJlcXVlbnQgRE9NIGludGVyYWN0aW9uXHJcbiAgICAgICAgICogYW5kIGF2b2lkIG11bHRpcGxlIGNoZWNrcyBmb3IgZHluYW1pYyBlbG1lbnRzXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcmV0dXJucyB7QXJyYXl9IGR5bmFtaWNFbFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGdldER5bmFtaWNPcHRpb25zOiBmdW5jdGlvbiAoaXRlbXMsIGV4dHJhUHJvcHMsIGdldENhcHRpb25Gcm9tVGl0bGVPckFsdCwgZXhUaHVtYkltYWdlKSB7XHJcbiAgICAgICAgICAgIHZhciBkeW5hbWljRWxlbWVudHMgPSBbXTtcclxuICAgICAgICAgICAgdmFyIGF2YWlsYWJsZUR5bmFtaWNPcHRpb25zID0gX19zcHJlYWRBcnJheXMoZGVmYXVsdER5bmFtaWNPcHRpb25zLCBleHRyYVByb3BzKTtcclxuICAgICAgICAgICAgW10uZm9yRWFjaC5jYWxsKGl0ZW1zLCBmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGR5bmFtaWNFbCA9IHt9O1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpdGVtLmF0dHJpYnV0ZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgYXR0ciA9IGl0ZW0uYXR0cmlidXRlc1tpXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXR0ci5zcGVjaWZpZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGR5bmFtaWNBdHRyID0gY29udmVydFRvRGF0YShhdHRyLm5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGFiZWwgPSAnJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGF2YWlsYWJsZUR5bmFtaWNPcHRpb25zLmluZGV4T2YoZHluYW1pY0F0dHIpID4gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsID0gZHluYW1pY0F0dHI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkeW5hbWljRWxbbGFiZWxdID0gYXR0ci52YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHZhciBjdXJyZW50SXRlbSA9ICRMRyhpdGVtKTtcclxuICAgICAgICAgICAgICAgIHZhciBhbHQgPSBjdXJyZW50SXRlbS5maW5kKCdpbWcnKS5maXJzdCgpLmF0dHIoJ2FsdCcpO1xyXG4gICAgICAgICAgICAgICAgdmFyIHRpdGxlID0gY3VycmVudEl0ZW0uYXR0cigndGl0bGUnKTtcclxuICAgICAgICAgICAgICAgIHZhciB0aHVtYiA9IGV4VGh1bWJJbWFnZVxyXG4gICAgICAgICAgICAgICAgICAgID8gY3VycmVudEl0ZW0uYXR0cihleFRodW1iSW1hZ2UpXHJcbiAgICAgICAgICAgICAgICAgICAgOiBjdXJyZW50SXRlbS5maW5kKCdpbWcnKS5maXJzdCgpLmF0dHIoJ3NyYycpO1xyXG4gICAgICAgICAgICAgICAgZHluYW1pY0VsLnRodW1iID0gdGh1bWI7XHJcbiAgICAgICAgICAgICAgICBpZiAoZ2V0Q2FwdGlvbkZyb21UaXRsZU9yQWx0ICYmICFkeW5hbWljRWwuc3ViSHRtbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGR5bmFtaWNFbC5zdWJIdG1sID0gdGl0bGUgfHwgYWx0IHx8ICcnO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZHluYW1pY0VsLmFsdCA9IGFsdCB8fCB0aXRsZSB8fCAnJztcclxuICAgICAgICAgICAgICAgIGR5bmFtaWNFbGVtZW50cy5wdXNoKGR5bmFtaWNFbCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gZHluYW1pY0VsZW1lbnRzO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaXNNb2JpbGU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIC9pUGhvbmV8aVBhZHxpUG9kfEFuZHJvaWQvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2MgQ2hlY2sgdGhlIGdpdmVuIHNyYyBpcyB2aWRlb1xyXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBzcmNcclxuICAgICAgICAgKiBAcmV0dXJuIHtPYmplY3R9IHZpZGVvIHR5cGVcclxuICAgICAgICAgKiBFeDp7IHlvdXR1YmUgIDogIFtcIi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9YzBhc0pnU3l4Y1lcIiwgXCJjMGFzSmdTeXhjWVwiXSB9XHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAdG9kbyAtIHRoaXMgaW5mb3JtYXRpb24gY2FuIGJlIG1vdmVkIHRvIGR5bmFtaWNFbCB0byBhdm9pZCBmcmVxdWVudCBjYWxsc1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGlzVmlkZW86IGZ1bmN0aW9uIChzcmMsIGlzSFRNTDVWSWRlbywgaW5kZXgpIHtcclxuICAgICAgICAgICAgaWYgKCFzcmMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChpc0hUTUw1VklkZW8pIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBodG1sNTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignbGlnaHRHYWxsZXJ5IDotIGRhdGEtc3JjIGlzIG5vdCBwcm92aWRlZCBvbiBzbGlkZSBpdGVtICcgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAoaW5kZXggKyAxKSArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICcuIFBsZWFzZSBtYWtlIHN1cmUgdGhlIHNlbGVjdG9yIHByb3BlcnR5IGlzIHByb3Blcmx5IGNvbmZpZ3VyZWQuIE1vcmUgaW5mbyAtIGh0dHBzOi8vd3d3LmxpZ2h0Z2FsbGVyeWpzLmNvbS9kZW1vcy9odG1sLW1hcmt1cC8nKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIHlvdXR1YmUgPSBzcmMubWF0Y2goL1xcL1xcLyg/Ond3d1xcLik/eW91dHUoPzpcXC5iZXxiZVxcLmNvbXxiZS1ub2Nvb2tpZVxcLmNvbSlcXC8oPzp3YXRjaFxcP3Y9fGVtYmVkXFwvKT8oW2EtejAtOVxcLVxcX1xcJV0rKShbXFwmfD9dW1xcU10qKSovaSk7XHJcbiAgICAgICAgICAgIHZhciB2aW1lbyA9IHNyYy5tYXRjaCgvXFwvXFwvKD86d3d3XFwuKT8oPzpwbGF5ZXJcXC4pP3ZpbWVvLmNvbVxcLyg/OnZpZGVvXFwvKT8oWzAtOWEtelxcLV9dKykoLiopPy9pKTtcclxuICAgICAgICAgICAgdmFyIHdpc3RpYSA9IHNyYy5tYXRjaCgvaHR0cHM/OlxcL1xcLyguKyk/KHdpc3RpYVxcLmNvbXx3aVxcLnN0KVxcLyhtZWRpYXN8ZW1iZWQpXFwvKFswLTlhLXpcXC1fXSspKC4qKS8pO1xyXG4gICAgICAgICAgICBpZiAoeW91dHViZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICB5b3V0dWJlOiB5b3V0dWJlLFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICh2aW1lbykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICB2aW1lbzogdmltZW8sXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHdpc3RpYSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICB3aXN0aWE6IHdpc3RpYSxcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgfTtcblxuICAgIC8vIEByZWYgLSBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8zOTcxODQxL2hvdy10by1yZXNpemUtaW1hZ2VzLXByb3BvcnRpb25hbGx5LWtlZXBpbmctdGhlLWFzcGVjdC1yYXRpb1xyXG4gICAgLy8gQHJlZiAtIGh0dHBzOi8vMmFsaXR5LmNvbS8yMDE3LzA0L3NldHRpbmctdXAtbXVsdGktcGxhdGZvcm0tcGFja2FnZXMuaHRtbFxyXG4gICAgLy8gVW5pcXVlIGlkIGZvciBlYWNoIGdhbGxlcnlcclxuICAgIHZhciBsZ0lkID0gMDtcclxuICAgIHZhciBMaWdodEdhbGxlcnkgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgZnVuY3Rpb24gTGlnaHRHYWxsZXJ5KGVsZW1lbnQsIG9wdGlvbnMpIHtcclxuICAgICAgICAgICAgdGhpcy5sZ09wZW5lZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLmluZGV4ID0gMDtcclxuICAgICAgICAgICAgLy8gbGlnaHRHYWxsZXJ5IG1vZHVsZXNcclxuICAgICAgICAgICAgdGhpcy5wbHVnaW5zID0gW107XHJcbiAgICAgICAgICAgIC8vIGZhbHNlIHdoZW4gbGlnaHRHYWxsZXJ5IGxvYWQgZmlyc3Qgc2xpZGUgY29udGVudDtcclxuICAgICAgICAgICAgdGhpcy5sR2FsbGVyeU9uID0gZmFsc2U7XHJcbiAgICAgICAgICAgIC8vIFRydWUgd2hlbiBhIHNsaWRlIGFuaW1hdGlvbiBpcyBpbiBwcm9ncmVzc1xyXG4gICAgICAgICAgICB0aGlzLmxnQnVzeSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRJdGVtc0luRG9tID0gW107XHJcbiAgICAgICAgICAgIC8vIFNjcm9sbCB0b3AgdmFsdWUgYmVmb3JlIGxpZ2h0R2FsbGVyeSBpcyBvcGVuZWRcclxuICAgICAgICAgICAgdGhpcy5wcmV2U2Nyb2xsVG9wID0gMDtcclxuICAgICAgICAgICAgdGhpcy5pc0R1bW15SW1hZ2VSZW1vdmVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuZHJhZ09yU3dpcGVFbmFibGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMubWVkaWFDb250YWluZXJQb3NpdGlvbiA9IHtcclxuICAgICAgICAgICAgICAgIHRvcDogMCxcclxuICAgICAgICAgICAgICAgIGJvdHRvbTogMCxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgaWYgKCFlbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsZ0lkKys7XHJcbiAgICAgICAgICAgIHRoaXMubGdJZCA9IGxnSWQ7XHJcbiAgICAgICAgICAgIHRoaXMuZWwgPSBlbGVtZW50O1xyXG4gICAgICAgICAgICB0aGlzLkxHZWwgPSAkTEcoZWxlbWVudCk7XHJcbiAgICAgICAgICAgIHRoaXMuZ2VuZXJhdGVTZXR0aW5ncyhvcHRpb25zKTtcclxuICAgICAgICAgICAgdGhpcy5idWlsZE1vZHVsZXMoKTtcclxuICAgICAgICAgICAgLy8gV2hlbiB1c2luZyBkeW5hbWljIG1vZGUsIGVuc3VyZSBkeW5hbWljRWwgaXMgYW4gYXJyYXlcclxuICAgICAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MuZHluYW1pYyAmJlxyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXR0aW5ncy5keW5hbWljRWwgIT09IHVuZGVmaW5lZCAmJlxyXG4gICAgICAgICAgICAgICAgIUFycmF5LmlzQXJyYXkodGhpcy5zZXR0aW5ncy5keW5hbWljRWwpKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyAnV2hlbiB1c2luZyBkeW5hbWljIG1vZGUsIHlvdSBtdXN0IGFsc28gZGVmaW5lIGR5bmFtaWNFbCBhcyBhbiBBcnJheS4nO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuZ2FsbGVyeUl0ZW1zID0gdGhpcy5nZXRJdGVtcygpO1xyXG4gICAgICAgICAgICB0aGlzLm5vcm1hbGl6ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgIC8vIEdhbGxlcnkgaXRlbXNcclxuICAgICAgICAgICAgdGhpcy5pbml0KCk7XHJcbiAgICAgICAgICAgIHRoaXMudmFsaWRhdGVMaWNlbnNlKCk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBMaWdodEdhbGxlcnkucHJvdG90eXBlLmdlbmVyYXRlU2V0dGluZ3MgPSBmdW5jdGlvbiAob3B0aW9ucykge1xyXG4gICAgICAgICAgICAvLyBsaWdodEdhbGxlcnkgc2V0dGluZ3NcclxuICAgICAgICAgICAgdGhpcy5zZXR0aW5ncyA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCBsaWdodEdhbGxlcnlDb3JlU2V0dGluZ3MpLCBvcHRpb25zKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MuaXNNb2JpbGUgJiZcclxuICAgICAgICAgICAgICAgIHR5cGVvZiB0aGlzLnNldHRpbmdzLmlzTW9iaWxlID09PSAnZnVuY3Rpb24nXHJcbiAgICAgICAgICAgICAgICA/IHRoaXMuc2V0dGluZ3MuaXNNb2JpbGUoKVxyXG4gICAgICAgICAgICAgICAgOiB1dGlscy5pc01vYmlsZSgpKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbW9iaWxlU2V0dGluZ3MgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgdGhpcy5zZXR0aW5ncy5tb2JpbGVTZXR0aW5ncyksIHRoaXMuc2V0dGluZ3MubW9iaWxlU2V0dGluZ3MpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXR0aW5ncyA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCB0aGlzLnNldHRpbmdzKSwgbW9iaWxlU2V0dGluZ3MpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBMaWdodEdhbGxlcnkucHJvdG90eXBlLm5vcm1hbGl6ZVNldHRpbmdzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5zbGlkZUVuZEFuaW1hdGlvbikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXR0aW5ncy5oaWRlQ29udHJvbE9uRW5kID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCF0aGlzLnNldHRpbmdzLmNsb3NhYmxlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldHRpbmdzLnN3aXBlVG9DbG9zZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIEFuZCByZXNldCBpdCBvbiBjbG9zZSB0byBnZXQgdGhlIGNvcnJlY3QgdmFsdWUgbmV4dCB0aW1lXHJcbiAgICAgICAgICAgIHRoaXMuem9vbUZyb21PcmlnaW4gPSB0aGlzLnNldHRpbmdzLnpvb21Gcm9tT3JpZ2luO1xyXG4gICAgICAgICAgICAvLyBBdCB0aGUgbW9tZW50LCBab29tIGZyb20gaW1hZ2UgZG9lc24ndCBzdXBwb3J0IGR5bmFtaWMgb3B0aW9uc1xyXG4gICAgICAgICAgICAvLyBAdG9kbyBhZGQgem9vbUZyb21PcmlnaW4gc3VwcG9ydCBmb3IgZHluYW1pYyBpbWFnZXNcclxuICAgICAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MuZHluYW1pYykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy56b29tRnJvbU9yaWdpbiA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5zZXR0aW5ncy5jb250YWluZXIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0dGluZ3MuY29udGFpbmVyID0gZG9jdW1lbnQuYm9keTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBzZXR0aW5ncy5wcmVsb2FkIHNob3VsZCBub3QgYmUgZ3JhdGVyIHRoYW4gJGl0ZW0ubGVuZ3RoXHJcbiAgICAgICAgICAgIHRoaXMuc2V0dGluZ3MucHJlbG9hZCA9IE1hdGgubWluKHRoaXMuc2V0dGluZ3MucHJlbG9hZCwgdGhpcy5nYWxsZXJ5SXRlbXMubGVuZ3RoKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIExpZ2h0R2FsbGVyeS5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAgICAgdGhpcy5hZGRTbGlkZVZpZGVvSW5mbyh0aGlzLmdhbGxlcnlJdGVtcyk7XHJcbiAgICAgICAgICAgIHRoaXMuYnVpbGRTdHJ1Y3R1cmUoKTtcclxuICAgICAgICAgICAgdGhpcy5MR2VsLnRyaWdnZXIobEdFdmVudHMuaW5pdCwge1xyXG4gICAgICAgICAgICAgICAgaW5zdGFuY2U6IHRoaXMsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5rZXlQcmVzcykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5rZXlQcmVzcygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuZW5hYmxlRHJhZygpO1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuZW5hYmxlU3dpcGUoKTtcclxuICAgICAgICAgICAgICAgIF90aGlzLnRyaWdnZXJQb3N0ZXJDbGljaygpO1xyXG4gICAgICAgICAgICB9LCA1MCk7XHJcbiAgICAgICAgICAgIHRoaXMuYXJyb3coKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MubW91c2V3aGVlbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tb3VzZXdoZWVsKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCF0aGlzLnNldHRpbmdzLmR5bmFtaWMpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMub3BlbkdhbGxlcnlPbkl0ZW1DbGljaygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBMaWdodEdhbGxlcnkucHJvdG90eXBlLm9wZW5HYWxsZXJ5T25JdGVtQ2xpY2sgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgICAgIHZhciBfbG9vcF8xID0gZnVuY3Rpb24gKGluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZWxlbWVudCA9IHRoaXNfMS5pdGVtc1tpbmRleF07XHJcbiAgICAgICAgICAgICAgICB2YXIgJGVsZW1lbnQgPSAkTEcoZWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICAvLyBVc2luZyBkaWZmZXJlbnQgbmFtZXNwYWNlIGZvciBjbGljayBiZWNhdXNlIGNsaWNrIGV2ZW50IHNob3VsZCBub3QgdW5iaW5kIGlmIHNlbGVjdG9yIGlzIHNhbWUgb2JqZWN0KCd0aGlzJylcclxuICAgICAgICAgICAgICAgIC8vIEB0b2RvIG1hbmFnZSBhbGwgZXZlbnQgbGlzdG5lcnMgLSBzaG91bGQgaGF2ZSBuYW1lc3BhY2UgdGhhdCByZXByZXNlbnQgZWxlbWVudFxyXG4gICAgICAgICAgICAgICAgdmFyIHV1aWQgPSBsZ1F1ZXJ5LmdlbmVyYXRlVVVJRCgpO1xyXG4gICAgICAgICAgICAgICAgJGVsZW1lbnRcclxuICAgICAgICAgICAgICAgICAgICAuYXR0cignZGF0YS1sZy1pZCcsIHV1aWQpXHJcbiAgICAgICAgICAgICAgICAgICAgLm9uKFwiY2xpY2subGdjdXN0b20taXRlbS1cIiArIHV1aWQsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjdXJyZW50SXRlbUluZGV4ID0gX3RoaXMuc2V0dGluZ3MuaW5kZXggfHwgaW5kZXg7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMub3BlbkdhbGxlcnkoY3VycmVudEl0ZW1JbmRleCwgZWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgdmFyIHRoaXNfMSA9IHRoaXM7XHJcbiAgICAgICAgICAgIC8vIFVzaW5nIGZvciBsb29wIGluc3RlYWQgb2YgdXNpbmcgYnViYmxpbmcgYXMgdGhlIGl0ZW1zIGNhbiBiZSBhbnkgaHRtbCBlbGVtZW50LlxyXG4gICAgICAgICAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgdGhpcy5pdGVtcy5sZW5ndGg7IGluZGV4KyspIHtcclxuICAgICAgICAgICAgICAgIF9sb29wXzEoaW5kZXgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBNb2R1bGUgY29uc3RydWN0b3JcclxuICAgICAgICAgKiBNb2R1bGVzIGFyZSBidWlsZCBpbmNyZW1lbnRhbGx5LlxyXG4gICAgICAgICAqIEdhbGxlcnkgc2hvdWxkIGJlIG9wZW5lZCBvbmx5IG9uY2UgYWxsIHRoZSBtb2R1bGVzIGFyZSBpbml0aWFsaXplZC5cclxuICAgICAgICAgKiB1c2UgbW9kdWxlQnVpbGRUaW1lb3V0IHRvIG1ha2Ugc3VyZSB0aGlzXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgTGlnaHRHYWxsZXJ5LnByb3RvdHlwZS5idWlsZE1vZHVsZXMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0dGluZ3MucGx1Z2lucy5mb3JFYWNoKGZ1bmN0aW9uIChwbHVnaW4pIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLnBsdWdpbnMucHVzaChuZXcgcGx1Z2luKF90aGlzLCAkTEcpKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBMaWdodEdhbGxlcnkucHJvdG90eXBlLnZhbGlkYXRlTGljZW5zZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLnNldHRpbmdzLmxpY2Vuc2VLZXkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1BsZWFzZSBwcm92aWRlIGEgdmFsaWQgbGljZW5zZSBrZXknKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLnNldHRpbmdzLmxpY2Vuc2VLZXkgPT09ICcwMDAwLTAwMDAtMDAwLTAwMDAnKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJsaWdodEdhbGxlcnk6IFwiICsgdGhpcy5zZXR0aW5ncy5saWNlbnNlS2V5ICsgXCIgbGljZW5zZSBrZXkgaXMgbm90IHZhbGlkIGZvciBwcm9kdWN0aW9uIHVzZVwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgTGlnaHRHYWxsZXJ5LnByb3RvdHlwZS5nZXRTbGlkZUl0ZW0gPSBmdW5jdGlvbiAoaW5kZXgpIHtcclxuICAgICAgICAgICAgcmV0dXJuICRMRyh0aGlzLmdldFNsaWRlSXRlbUlkKGluZGV4KSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBMaWdodEdhbGxlcnkucHJvdG90eXBlLmdldFNsaWRlSXRlbUlkID0gZnVuY3Rpb24gKGluZGV4KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBcIiNsZy1pdGVtLVwiICsgdGhpcy5sZ0lkICsgXCItXCIgKyBpbmRleDtcclxuICAgICAgICB9O1xyXG4gICAgICAgIExpZ2h0R2FsbGVyeS5wcm90b3R5cGUuZ2V0SWROYW1lID0gZnVuY3Rpb24gKGlkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBpZCArIFwiLVwiICsgdGhpcy5sZ0lkO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgTGlnaHRHYWxsZXJ5LnByb3RvdHlwZS5nZXRFbGVtZW50QnlJZCA9IGZ1bmN0aW9uIChpZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gJExHKFwiI1wiICsgdGhpcy5nZXRJZE5hbWUoaWQpKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIExpZ2h0R2FsbGVyeS5wcm90b3R5cGUubWFuYWdlU2luZ2xlU2xpZGVDbGFzc05hbWUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmdhbGxlcnlJdGVtcy5sZW5ndGggPCAyKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm91dGVyLmFkZENsYXNzKCdsZy1zaW5nbGUtaXRlbScpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vdXRlci5yZW1vdmVDbGFzcygnbGctc2luZ2xlLWl0ZW0nKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgTGlnaHRHYWxsZXJ5LnByb3RvdHlwZS5idWlsZFN0cnVjdHVyZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAgICAgdmFyIGNvbnRhaW5lciA9IHRoaXMuJGNvbnRhaW5lciAmJiB0aGlzLiRjb250YWluZXIuZ2V0KCk7XHJcbiAgICAgICAgICAgIGlmIChjb250YWluZXIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgY29udHJvbHMgPSAnJztcclxuICAgICAgICAgICAgdmFyIHN1Ykh0bWxDb250ID0gJyc7XHJcbiAgICAgICAgICAgIC8vIENyZWF0ZSBjb250cm9sc1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5jb250cm9scykge1xyXG4gICAgICAgICAgICAgICAgY29udHJvbHMgPSBcIjxidXR0b24gdHlwZT1cXFwiYnV0dG9uXFxcIiBpZD1cXFwiXCIgKyB0aGlzLmdldElkTmFtZSgnbGctcHJldicpICsgXCJcXFwiIGFyaWEtbGFiZWw9XFxcIlwiICsgdGhpcy5zZXR0aW5ncy5zdHJpbmdzWydwcmV2aW91c1NsaWRlJ10gKyBcIlxcXCIgY2xhc3M9XFxcImxnLXByZXYgbGctaWNvblxcXCI+IFwiICsgdGhpcy5zZXR0aW5ncy5wcmV2SHRtbCArIFwiIDwvYnV0dG9uPlxcbiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XFxcImJ1dHRvblxcXCIgaWQ9XFxcIlwiICsgdGhpcy5nZXRJZE5hbWUoJ2xnLW5leHQnKSArIFwiXFxcIiBhcmlhLWxhYmVsPVxcXCJcIiArIHRoaXMuc2V0dGluZ3Muc3RyaW5nc1snbmV4dFNsaWRlJ10gKyBcIlxcXCIgY2xhc3M9XFxcImxnLW5leHQgbGctaWNvblxcXCI+IFwiICsgdGhpcy5zZXR0aW5ncy5uZXh0SHRtbCArIFwiIDwvYnV0dG9uPlwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmFwcGVuZFN1Ykh0bWxUbyAhPT0gJy5sZy1pdGVtJykge1xyXG4gICAgICAgICAgICAgICAgc3ViSHRtbENvbnQgPVxyXG4gICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibGctc3ViLWh0bWxcIiByb2xlPVwic3RhdHVzXCIgYXJpYS1saXZlPVwicG9saXRlXCI+PC9kaXY+JztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgYWRkQ2xhc3NlcyA9ICcnO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5hbGxvd01lZGlhT3ZlcmxhcCkge1xyXG4gICAgICAgICAgICAgICAgLy8gRG8gbm90IHJlbW92ZSBzcGFjZSBiZWZvcmUgbGFzdCBzaW5nbGUgcXVvdGVcclxuICAgICAgICAgICAgICAgIGFkZENsYXNzZXMgKz0gJ2xnLW1lZGlhLW92ZXJsYXAgJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgYXJpYUxhYmVsbGVkYnkgPSB0aGlzLnNldHRpbmdzLmFyaWFMYWJlbGxlZGJ5XHJcbiAgICAgICAgICAgICAgICA/ICdhcmlhLWxhYmVsbGVkYnk9XCInICsgdGhpcy5zZXR0aW5ncy5hcmlhTGFiZWxsZWRieSArICdcIidcclxuICAgICAgICAgICAgICAgIDogJyc7XHJcbiAgICAgICAgICAgIHZhciBhcmlhRGVzY3JpYmVkYnkgPSB0aGlzLnNldHRpbmdzLmFyaWFEZXNjcmliZWRieVxyXG4gICAgICAgICAgICAgICAgPyAnYXJpYS1kZXNjcmliZWRieT1cIicgKyB0aGlzLnNldHRpbmdzLmFyaWFEZXNjcmliZWRieSArICdcIidcclxuICAgICAgICAgICAgICAgIDogJyc7XHJcbiAgICAgICAgICAgIHZhciBjb250YWluZXJDbGFzc05hbWUgPSBcImxnLWNvbnRhaW5lciBcIiArIHRoaXMuc2V0dGluZ3MuYWRkQ2xhc3MgKyBcIiBcIiArIChkb2N1bWVudC5ib2R5ICE9PSB0aGlzLnNldHRpbmdzLmNvbnRhaW5lciA/ICdsZy1pbmxpbmUnIDogJycpO1xyXG4gICAgICAgICAgICB2YXIgY2xvc2VJY29uID0gdGhpcy5zZXR0aW5ncy5jbG9zYWJsZSAmJiB0aGlzLnNldHRpbmdzLnNob3dDbG9zZUljb25cclxuICAgICAgICAgICAgICAgID8gXCI8YnV0dG9uIHR5cGU9XFxcImJ1dHRvblxcXCIgYXJpYS1sYWJlbD1cXFwiXCIgKyB0aGlzLnNldHRpbmdzLnN0cmluZ3NbJ2Nsb3NlR2FsbGVyeSddICsgXCJcXFwiIGlkPVxcXCJcIiArIHRoaXMuZ2V0SWROYW1lKCdsZy1jbG9zZScpICsgXCJcXFwiIGNsYXNzPVxcXCJsZy1jbG9zZSBsZy1pY29uXFxcIj48L2J1dHRvbj5cIlxyXG4gICAgICAgICAgICAgICAgOiAnJztcclxuICAgICAgICAgICAgdmFyIG1heGltaXplSWNvbiA9IHRoaXMuc2V0dGluZ3Muc2hvd01heGltaXplSWNvblxyXG4gICAgICAgICAgICAgICAgPyBcIjxidXR0b24gdHlwZT1cXFwiYnV0dG9uXFxcIiBhcmlhLWxhYmVsPVxcXCJcIiArIHRoaXMuc2V0dGluZ3Muc3RyaW5nc1sndG9nZ2xlTWF4aW1pemUnXSArIFwiXFxcIiBpZD1cXFwiXCIgKyB0aGlzLmdldElkTmFtZSgnbGctbWF4aW1pemUnKSArIFwiXFxcIiBjbGFzcz1cXFwibGctbWF4aW1pemUgbGctaWNvblxcXCI+PC9idXR0b24+XCJcclxuICAgICAgICAgICAgICAgIDogJyc7XHJcbiAgICAgICAgICAgIHZhciB0ZW1wbGF0ZSA9IFwiXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJcIiArIGNvbnRhaW5lckNsYXNzTmFtZSArIFwiXFxcIiBpZD1cXFwiXCIgKyB0aGlzLmdldElkTmFtZSgnbGctY29udGFpbmVyJykgKyBcIlxcXCIgdGFiaW5kZXg9XFxcIi0xXFxcIiBhcmlhLW1vZGFsPVxcXCJ0cnVlXFxcIiBcIiArIGFyaWFMYWJlbGxlZGJ5ICsgXCIgXCIgKyBhcmlhRGVzY3JpYmVkYnkgKyBcIiByb2xlPVxcXCJkaWFsb2dcXFwiXFxuICAgICAgICA+XFxuICAgICAgICAgICAgPGRpdiBpZD1cXFwiXCIgKyB0aGlzLmdldElkTmFtZSgnbGctYmFja2Ryb3AnKSArIFwiXFxcIiBjbGFzcz1cXFwibGctYmFja2Ryb3BcXFwiPjwvZGl2PlxcblxcbiAgICAgICAgICAgIDxkaXYgaWQ9XFxcIlwiICsgdGhpcy5nZXRJZE5hbWUoJ2xnLW91dGVyJykgKyBcIlxcXCIgY2xhc3M9XFxcImxnLW91dGVyIGxnLXVzZS1jc3MzIGxnLWNzczMgbGctaGlkZS1pdGVtcyBcIiArIGFkZENsYXNzZXMgKyBcIiBcXFwiPlxcblxcbiAgICAgICAgICAgICAgPGRpdiBpZD1cXFwiXCIgKyB0aGlzLmdldElkTmFtZSgnbGctY29udGVudCcpICsgXCJcXFwiIGNsYXNzPVxcXCJsZy1jb250ZW50XFxcIj5cXG4gICAgICAgICAgICAgICAgPGRpdiBpZD1cXFwiXCIgKyB0aGlzLmdldElkTmFtZSgnbGctaW5uZXInKSArIFwiXFxcIiBjbGFzcz1cXFwibGctaW5uZXJcXFwiPlxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgXCIgKyBjb250cm9scyArIFwiXFxuICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgPGRpdiBpZD1cXFwiXCIgKyB0aGlzLmdldElkTmFtZSgnbGctdG9vbGJhcicpICsgXCJcXFwiIGNsYXNzPVxcXCJsZy10b29sYmFyIGxnLWdyb3VwXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIFwiICsgbWF4aW1pemVJY29uICsgXCJcXG4gICAgICAgICAgICAgICAgICAgIFwiICsgY2xvc2VJY29uICsgXCJcXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgXCIgKyAodGhpcy5zZXR0aW5ncy5hcHBlbmRTdWJIdG1sVG8gPT09ICcubGctb3V0ZXInXHJcbiAgICAgICAgICAgICAgICA/IHN1Ykh0bWxDb250XHJcbiAgICAgICAgICAgICAgICA6ICcnKSArIFwiXFxuICAgICAgICAgICAgICAgIDxkaXYgaWQ9XFxcIlwiICsgdGhpcy5nZXRJZE5hbWUoJ2xnLWNvbXBvbmVudHMnKSArIFwiXFxcIiBjbGFzcz1cXFwibGctY29tcG9uZW50c1xcXCI+XFxuICAgICAgICAgICAgICAgICAgICBcIiArICh0aGlzLnNldHRpbmdzLmFwcGVuZFN1Ykh0bWxUbyA9PT0gJy5sZy1zdWItaHRtbCdcclxuICAgICAgICAgICAgICAgID8gc3ViSHRtbENvbnRcclxuICAgICAgICAgICAgICAgIDogJycpICsgXCJcXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgICAgIFwiO1xyXG4gICAgICAgICAgICAkTEcodGhpcy5zZXR0aW5ncy5jb250YWluZXIpLmFwcGVuZCh0ZW1wbGF0ZSk7XHJcbiAgICAgICAgICAgIGlmIChkb2N1bWVudC5ib2R5ICE9PSB0aGlzLnNldHRpbmdzLmNvbnRhaW5lcikge1xyXG4gICAgICAgICAgICAgICAgJExHKHRoaXMuc2V0dGluZ3MuY29udGFpbmVyKS5jc3MoJ3Bvc2l0aW9uJywgJ3JlbGF0aXZlJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5vdXRlciA9IHRoaXMuZ2V0RWxlbWVudEJ5SWQoJ2xnLW91dGVyJyk7XHJcbiAgICAgICAgICAgIHRoaXMuJGxnQ29tcG9uZW50cyA9IHRoaXMuZ2V0RWxlbWVudEJ5SWQoJ2xnLWNvbXBvbmVudHMnKTtcclxuICAgICAgICAgICAgdGhpcy4kYmFja2Ryb3AgPSB0aGlzLmdldEVsZW1lbnRCeUlkKCdsZy1iYWNrZHJvcCcpO1xyXG4gICAgICAgICAgICB0aGlzLiRjb250YWluZXIgPSB0aGlzLmdldEVsZW1lbnRCeUlkKCdsZy1jb250YWluZXInKTtcclxuICAgICAgICAgICAgdGhpcy4kaW5uZXIgPSB0aGlzLmdldEVsZW1lbnRCeUlkKCdsZy1pbm5lcicpO1xyXG4gICAgICAgICAgICB0aGlzLiRjb250ZW50ID0gdGhpcy5nZXRFbGVtZW50QnlJZCgnbGctY29udGVudCcpO1xyXG4gICAgICAgICAgICB0aGlzLiR0b29sYmFyID0gdGhpcy5nZXRFbGVtZW50QnlJZCgnbGctdG9vbGJhcicpO1xyXG4gICAgICAgICAgICB0aGlzLiRiYWNrZHJvcC5jc3MoJ3RyYW5zaXRpb24tZHVyYXRpb24nLCB0aGlzLnNldHRpbmdzLmJhY2tkcm9wRHVyYXRpb24gKyAnbXMnKTtcclxuICAgICAgICAgICAgdmFyIG91dGVyQ2xhc3NOYW1lcyA9IHRoaXMuc2V0dGluZ3MubW9kZSArIFwiIFwiO1xyXG4gICAgICAgICAgICB0aGlzLm1hbmFnZVNpbmdsZVNsaWRlQ2xhc3NOYW1lKCk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmVuYWJsZURyYWcpIHtcclxuICAgICAgICAgICAgICAgIG91dGVyQ2xhc3NOYW1lcyArPSAnbGctZ3JhYiAnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMub3V0ZXIuYWRkQ2xhc3Mob3V0ZXJDbGFzc05hbWVzKTtcclxuICAgICAgICAgICAgdGhpcy4kaW5uZXIuY3NzKCd0cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbicsIHRoaXMuc2V0dGluZ3MuZWFzaW5nKTtcclxuICAgICAgICAgICAgdGhpcy4kaW5uZXIuY3NzKCd0cmFuc2l0aW9uLWR1cmF0aW9uJywgdGhpcy5zZXR0aW5ncy5zcGVlZCArICdtcycpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5kb3dubG9hZCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy4kdG9vbGJhci5hcHBlbmQoXCI8YSBpZD1cXFwiXCIgKyB0aGlzLmdldElkTmFtZSgnbGctZG93bmxvYWQnKSArIFwiXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCIgcmVsPVxcXCJub29wZW5lclxcXCIgYXJpYS1sYWJlbD1cXFwiXCIgKyB0aGlzLnNldHRpbmdzLnN0cmluZ3NbJ2Rvd25sb2FkJ10gKyBcIlxcXCIgZG93bmxvYWQgY2xhc3M9XFxcImxnLWRvd25sb2FkIGxnLWljb25cXFwiPjwvYT5cIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5jb3VudGVyKCk7XHJcbiAgICAgICAgICAgICRMRyh3aW5kb3cpLm9uKFwicmVzaXplLmxnLmdsb2JhbFwiICsgdGhpcy5sZ0lkICsgXCIgb3JpZW50YXRpb25jaGFuZ2UubGcuZ2xvYmFsXCIgKyB0aGlzLmxnSWQsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLnJlZnJlc2hPblJlc2l6ZSgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdGhpcy5oaWRlQmFycygpO1xyXG4gICAgICAgICAgICB0aGlzLm1hbmFnZUNsb3NlR2FsbGVyeSgpO1xyXG4gICAgICAgICAgICB0aGlzLnRvZ2dsZU1heGltaXplKCk7XHJcbiAgICAgICAgICAgIHRoaXMuaW5pdE1vZHVsZXMoKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIExpZ2h0R2FsbGVyeS5wcm90b3R5cGUucmVmcmVzaE9uUmVzaXplID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5sZ09wZW5lZCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRHYWxsZXJ5SXRlbSA9IHRoaXMuZ2FsbGVyeUl0ZW1zW3RoaXMuaW5kZXhdO1xyXG4gICAgICAgICAgICAgICAgdmFyIF9fc2xpZGVWaWRlb0luZm8gPSBjdXJyZW50R2FsbGVyeUl0ZW0uX19zbGlkZVZpZGVvSW5mbztcclxuICAgICAgICAgICAgICAgIHRoaXMubWVkaWFDb250YWluZXJQb3NpdGlvbiA9IHRoaXMuZ2V0TWVkaWFDb250YWluZXJQb3NpdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgdmFyIF9hID0gdGhpcy5tZWRpYUNvbnRhaW5lclBvc2l0aW9uLCB0b3BfMSA9IF9hLnRvcCwgYm90dG9tID0gX2EuYm90dG9tO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50SW1hZ2VTaXplID0gdXRpbHMuZ2V0U2l6ZSh0aGlzLml0ZW1zW3RoaXMuaW5kZXhdLCB0aGlzLm91dGVyLCB0b3BfMSArIGJvdHRvbSwgX19zbGlkZVZpZGVvSW5mbyAmJiB0aGlzLnNldHRpbmdzLnZpZGVvTWF4U2l6ZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoX19zbGlkZVZpZGVvSW5mbykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVzaXplVmlkZW9TbGlkZSh0aGlzLmluZGV4LCB0aGlzLmN1cnJlbnRJbWFnZVNpemUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuem9vbUZyb21PcmlnaW4gJiYgIXRoaXMuaXNEdW1teUltYWdlUmVtb3ZlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBpbWdTdHlsZSA9IHRoaXMuZ2V0RHVtbXlJbWdTdHlsZXModGhpcy5jdXJyZW50SW1hZ2VTaXplKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm91dGVyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5maW5kKCcubGctY3VycmVudCAubGctZHVtbXktaW1nJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmZpcnN0KClcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3N0eWxlJywgaW1nU3R5bGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5MR2VsLnRyaWdnZXIobEdFdmVudHMuY29udGFpbmVyUmVzaXplKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgTGlnaHRHYWxsZXJ5LnByb3RvdHlwZS5yZXNpemVWaWRlb1NsaWRlID0gZnVuY3Rpb24gKGluZGV4LCBpbWFnZVNpemUpIHtcclxuICAgICAgICAgICAgdmFyIGxnVmlkZW9TdHlsZSA9IHRoaXMuZ2V0VmlkZW9Db250U3R5bGUoaW1hZ2VTaXplKTtcclxuICAgICAgICAgICAgdmFyIGN1cnJlbnRTbGlkZSA9IHRoaXMuZ2V0U2xpZGVJdGVtKGluZGV4KTtcclxuICAgICAgICAgICAgY3VycmVudFNsaWRlLmZpbmQoJy5sZy12aWRlby1jb250JykuYXR0cignc3R5bGUnLCBsZ1ZpZGVvU3R5bGUpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVXBkYXRlIHNsaWRlcyBkeW5hbWljYWxseS5cclxuICAgICAgICAgKiBBZGQsIGVkaXQgb3IgZGVsZXRlIHNsaWRlcyBkeW5hbWljYWxseSB3aGVuIGxpZ2h0R2FsbGVyeSBpcyBvcGVuZWQuXHJcbiAgICAgICAgICogTW9kaWZ5IHRoZSBjdXJyZW50IGdhbGxlcnkgaXRlbXMgYW5kIHBhc3MgaXQgdmlhIHVwZGF0ZVNsaWRlcyBtZXRob2RcclxuICAgICAgICAgKiBAbm90ZVxyXG4gICAgICAgICAqIC0gRG8gbm90IG11dGF0ZSBleGlzdGluZyBsaWdodEdhbGxlcnkgaXRlbXMgZGlyZWN0bHkuXHJcbiAgICAgICAgICogLSBBbHdheXMgcGFzcyBuZXcgbGlzdCBvZiBnYWxsZXJ5IGl0ZW1zXHJcbiAgICAgICAgICogLSBZb3UgbmVlZCB0byB0YWtlIGNhcmUgb2YgdGh1bWJuYWlscyBvdXRzaWRlIHRoZSBnYWxsZXJ5IGlmIGFueVxyXG4gICAgICAgICAqIC0gdXNlciB0aGlzIG1ldGhvZCBvbmx5IGlmIHlvdSB3YW50IHRvIHVwZGF0ZSBzbGlkZXMgd2hlbiB0aGUgZ2FsbGVyeSBpcyBvcGVuZWQuIE90aGVyd2lzZSwgdXNlIGByZWZyZXNoKClgIG1ldGhvZC5cclxuICAgICAgICAgKiBAcGFyYW0gaXRlbXMgR2FsbGVyeSBpdGVtc1xyXG4gICAgICAgICAqIEBwYXJhbSBpbmRleCBBZnRlciB0aGUgdXBkYXRlIG9wZXJhdGlvbiwgd2hpY2ggc2xpZGUgZ2FsbGVyeSBzaG91bGQgbmF2aWdhdGUgdG9cclxuICAgICAgICAgKiBAY2F0ZWdvcnkgbEdQdWJsaWNNZXRob2RzXHJcbiAgICAgICAgICogQGV4YW1wbGVcclxuICAgICAgICAgKiBjb25zdCBwbHVnaW4gPSBsaWdodEdhbGxlcnkoKTtcclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIC8vIEFkZGluZyBzbGlkZXMgZHluYW1pY2FsbHlcclxuICAgICAgICAgKiBsZXQgZ2FsbGVyeUl0ZW1zID0gW1xyXG4gICAgICAgICAqIC8vIEFjY2VzcyBleGlzdGluZyBsaWdodEdhbGxlcnkgaXRlbXNcclxuICAgICAgICAgKiAvLyBnYWxsZXJ5SXRlbXMgYXJlIGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGVkIGludGVybmFsbHkgZnJvbSB0aGUgZ2FsbGVyeSBIVE1MIG1hcmt1cFxyXG4gICAgICAgICAqIC8vIG9yIGRpcmVjdGx5IGZyb20gZ2FsbGVyeUl0ZW1zIHdoZW4gZHluYW1pYyBnYWxsZXJ5IGlzIHVzZWRcclxuICAgICAgICAgKiAgIC4uLnBsdWdpbi5nYWxsZXJ5SXRlbXMsXHJcbiAgICAgICAgICogICAgIC4uLltcclxuICAgICAgICAgKiAgICAgICB7XHJcbiAgICAgICAgICogICAgICAgICBzcmM6ICdpbWcvaW1nLTEucG5nJyxcclxuICAgICAgICAgKiAgICAgICAgICAgdGh1bWI6ICdpbWcvdGh1bWIxLnBuZycsXHJcbiAgICAgICAgICogICAgICAgICB9LFxyXG4gICAgICAgICAqICAgICBdLFxyXG4gICAgICAgICAqICAgXTtcclxuICAgICAgICAgKiAgIHBsdWdpbi51cGRhdGVTbGlkZXMoXHJcbiAgICAgICAgICogICAgIGdhbGxlcnlJdGVtcyxcclxuICAgICAgICAgKiAgICAgcGx1Z2luLmluZGV4LFxyXG4gICAgICAgICAqICAgKTtcclxuICAgICAgICAgKlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogLy8gUmVtb3ZlIHNsaWRlcyBkeW5hbWljYWxseVxyXG4gICAgICAgICAqIGdhbGxlcnlJdGVtcyA9IEpTT04ucGFyc2UoXHJcbiAgICAgICAgICogICBKU09OLnN0cmluZ2lmeSh1cGRhdGVTbGlkZUluc3RhbmNlLmdhbGxlcnlJdGVtcyksXHJcbiAgICAgICAgICogKTtcclxuICAgICAgICAgKiBnYWxsZXJ5SXRlbXMuc2hpZnQoKTtcclxuICAgICAgICAgKiB1cGRhdGVTbGlkZUluc3RhbmNlLnVwZGF0ZVNsaWRlcyhnYWxsZXJ5SXRlbXMsIDEpO1xyXG4gICAgICAgICAqIEBzZWUgPGEgaHJlZj1cIi9kZW1vcy91cGRhdGUtc2xpZGVzL1wiPkRlbW88L2E+XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgTGlnaHRHYWxsZXJ5LnByb3RvdHlwZS51cGRhdGVTbGlkZXMgPSBmdW5jdGlvbiAoaXRlbXMsIGluZGV4KSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmluZGV4ID4gaXRlbXMubGVuZ3RoIC0gMSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pbmRleCA9IGl0ZW1zLmxlbmd0aCAtIDE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGl0ZW1zLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pbmRleCA9IDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCFpdGVtcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2xvc2VHYWxsZXJ5KCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIGN1cnJlbnRTcmMgPSB0aGlzLmdhbGxlcnlJdGVtc1tpbmRleF0uc3JjO1xyXG4gICAgICAgICAgICB0aGlzLmdhbGxlcnlJdGVtcyA9IGl0ZW1zO1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUNvbnRyb2xzKCk7XHJcbiAgICAgICAgICAgIHRoaXMuJGlubmVyLmVtcHR5KCk7XHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudEl0ZW1zSW5Eb20gPSBbXTtcclxuICAgICAgICAgICAgdmFyIF9pbmRleCA9IDA7XHJcbiAgICAgICAgICAgIC8vIEZpbmQgdGhlIGN1cnJlbnQgaW5kZXggYmFzZWQgb24gc291cmNlIHZhbHVlIG9mIHRoZSBzbGlkZVxyXG4gICAgICAgICAgICB0aGlzLmdhbGxlcnlJdGVtcy5zb21lKGZ1bmN0aW9uIChnYWxsZXJ5SXRlbSwgaXRlbUluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZ2FsbGVyeUl0ZW0uc3JjID09PSBjdXJyZW50U3JjKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX2luZGV4ID0gaXRlbUluZGV4O1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdGhpcy5jdXJyZW50SXRlbXNJbkRvbSA9IHRoaXMub3JnYW5pemVTbGlkZUl0ZW1zKF9pbmRleCwgLTEpO1xyXG4gICAgICAgICAgICB0aGlzLmxvYWRDb250ZW50KF9pbmRleCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIHRoaXMuZ2V0U2xpZGVJdGVtKF9pbmRleCkuYWRkQ2xhc3MoJ2xnLWN1cnJlbnQnKTtcclxuICAgICAgICAgICAgdGhpcy5pbmRleCA9IF9pbmRleDtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVDdXJyZW50Q291bnRlcihfaW5kZXgpO1xyXG4gICAgICAgICAgICB0aGlzLkxHZWwudHJpZ2dlcihsR0V2ZW50cy51cGRhdGVTbGlkZXMpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLy8gR2V0IGdhbGxlcnkgaXRlbXMgYmFzZWQgb24gbXVsdGlwbGUgY29uZGl0aW9uc1xyXG4gICAgICAgIExpZ2h0R2FsbGVyeS5wcm90b3R5cGUuZ2V0SXRlbXMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIC8vIEdhbGxlcnkgaXRlbXNcclxuICAgICAgICAgICAgdGhpcy5pdGVtcyA9IFtdO1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuc2V0dGluZ3MuZHluYW1pYykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3Muc2VsZWN0b3IgPT09ICd0aGlzJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXRlbXMucHVzaCh0aGlzLmVsKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuc2V0dGluZ3Muc2VsZWN0b3IpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMuc2V0dGluZ3Muc2VsZWN0b3IgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnNldHRpbmdzLnNlbGVjdFdpdGhpbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNlbGVjdFdpdGhpbiA9ICRMRyh0aGlzLnNldHRpbmdzLnNlbGVjdFdpdGhpbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLml0ZW1zID0gc2VsZWN0V2l0aGluXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmZpbmQodGhpcy5zZXR0aW5ncy5zZWxlY3RvcilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZ2V0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLml0ZW1zID0gdGhpcy5lbC5xdWVyeVNlbGVjdG9yQWxsKHRoaXMuc2V0dGluZ3Muc2VsZWN0b3IpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLml0ZW1zID0gdGhpcy5zZXR0aW5ncy5zZWxlY3RvcjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLml0ZW1zID0gdGhpcy5lbC5jaGlsZHJlbjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB1dGlscy5nZXREeW5hbWljT3B0aW9ucyh0aGlzLml0ZW1zLCB0aGlzLnNldHRpbmdzLmV4dHJhUHJvcHMsIHRoaXMuc2V0dGluZ3MuZ2V0Q2FwdGlvbkZyb21UaXRsZU9yQWx0LCB0aGlzLnNldHRpbmdzLmV4VGh1bWJJbWFnZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zZXR0aW5ncy5keW5hbWljRWwgfHwgW107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIE9wZW4gbGlnaHRHYWxsZXJ5LlxyXG4gICAgICAgICAqIE9wZW4gZ2FsbGVyeSB3aXRoIHNwZWNpZmljIHNsaWRlIGJ5IHBhc3NpbmcgaW5kZXggb2YgdGhlIHNsaWRlIGFzIHBhcmFtZXRlci5cclxuICAgICAgICAgKiBAY2F0ZWdvcnkgbEdQdWJsaWNNZXRob2RzXHJcbiAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IGluZGV4ICAtIGluZGV4IG9mIHRoZSBzbGlkZVxyXG4gICAgICAgICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnQgLSBXaGljaCBpbWFnZSBsaWdodEdhbGxlcnkgc2hvdWxkIHpvb20gZnJvbVxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQGV4YW1wbGVcclxuICAgICAgICAgKiBjb25zdCAkZHluYW1pY0dhbGxlcnkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZHluYW1pYy1nYWxsZXJ5LWRlbW8nKTtcclxuICAgICAgICAgKiBjb25zdCBkeW5hbWljR2FsbGVyeSA9IGxpZ2h0R2FsbGVyeSgkZHluYW1pY0dhbGxlcnksIHtcclxuICAgICAgICAgKiAgICAgZHluYW1pYzogdHJ1ZSxcclxuICAgICAgICAgKiAgICAgZHluYW1pY0VsOiBbXHJcbiAgICAgICAgICogICAgICAgICB7XHJcbiAgICAgICAgICogICAgICAgICAgICAgIHNyYzogJ2ltZy8xLmpwZycsXHJcbiAgICAgICAgICogICAgICAgICAgICAgIHRodW1iOiAnaW1nL3RodW1iLTEuanBnJyxcclxuICAgICAgICAgKiAgICAgICAgICAgICAgc3ViSHRtbDogJzxoND5JbWFnZSAxIHRpdGxlPC9oND48cD5JbWFnZSAxIGRlc2NyaXB0aW9ucy48L3A+JyxcclxuICAgICAgICAgKiAgICAgICAgIH0sXHJcbiAgICAgICAgICogICAgICAgICAuLi5cclxuICAgICAgICAgKiAgICAgXSxcclxuICAgICAgICAgKiB9KTtcclxuICAgICAgICAgKiAkZHluYW1pY0dhbGxlcnkuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICogICAgIC8vIFN0YXJ0cyB3aXRoIHRoaXJkIGl0ZW0uKE9wdGlvbmFsKS5cclxuICAgICAgICAgKiAgICAgLy8gVGhpcyBpcyB1c2VmdWwgaWYgeW91IHdhbnQgdXNlIGR5bmFtaWMgbW9kZSB3aXRoXHJcbiAgICAgICAgICogICAgIC8vIGN1c3RvbSB0aHVtYm5haWxzICh0aHVtYm5haWxzIG91dHNpZGUgZ2FsbGVyeSksXHJcbiAgICAgICAgICogICAgIGR5bmFtaWNHYWxsZXJ5Lm9wZW5HYWxsZXJ5KDIpO1xyXG4gICAgICAgICAqIH0pO1xyXG4gICAgICAgICAqXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgTGlnaHRHYWxsZXJ5LnByb3RvdHlwZS5vcGVuR2FsbGVyeSA9IGZ1bmN0aW9uIChpbmRleCwgZWxlbWVudCkge1xyXG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgICAgICBpZiAoaW5kZXggPT09IHZvaWQgMCkgeyBpbmRleCA9IHRoaXMuc2V0dGluZ3MuaW5kZXg7IH1cclxuICAgICAgICAgICAgLy8gcHJldmVudCBhY2NpZGVudGFsIGRvdWJsZSBleGVjdXRpb25cclxuICAgICAgICAgICAgaWYgKHRoaXMubGdPcGVuZWQpXHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIHRoaXMubGdPcGVuZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLm91dGVyLmdldCgpLmZvY3VzKCk7XHJcbiAgICAgICAgICAgIHRoaXMub3V0ZXIucmVtb3ZlQ2xhc3MoJ2xnLWhpZGUtaXRlbXMnKTtcclxuICAgICAgICAgICAgLy8gQWRkIGRpc3BsYXkgYmxvY2ssIGJ1dCBzdGlsbCBoYXMgb3BhY2l0eSAwXHJcbiAgICAgICAgICAgIHRoaXMuJGNvbnRhaW5lci5hZGRDbGFzcygnbGctc2hvdycpO1xyXG4gICAgICAgICAgICB2YXIgaXRlbXNUb0JlSW5zZXJ0ZWRUb0RvbSA9IHRoaXMuZ2V0SXRlbXNUb0JlSW5zZXJ0ZWRUb0RvbShpbmRleCwgaW5kZXgpO1xyXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRJdGVtc0luRG9tID0gaXRlbXNUb0JlSW5zZXJ0ZWRUb0RvbTtcclxuICAgICAgICAgICAgdmFyIGl0ZW1zID0gJyc7XHJcbiAgICAgICAgICAgIGl0ZW1zVG9CZUluc2VydGVkVG9Eb20uZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgICAgICAgICAgaXRlbXMgPSBpdGVtcyArIChcIjxkaXYgaWQ9XFxcIlwiICsgaXRlbSArIFwiXFxcIiBjbGFzcz1cXFwibGctaXRlbVxcXCI+PC9kaXY+XCIpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdGhpcy4kaW5uZXIuYXBwZW5kKGl0ZW1zKTtcclxuICAgICAgICAgICAgdGhpcy5hZGRIdG1sKGluZGV4KTtcclxuICAgICAgICAgICAgdmFyIHRyYW5zZm9ybSA9ICcnO1xyXG4gICAgICAgICAgICB0aGlzLm1lZGlhQ29udGFpbmVyUG9zaXRpb24gPSB0aGlzLmdldE1lZGlhQ29udGFpbmVyUG9zaXRpb24oKTtcclxuICAgICAgICAgICAgdmFyIF9hID0gdGhpcy5tZWRpYUNvbnRhaW5lclBvc2l0aW9uLCB0b3AgPSBfYS50b3AsIGJvdHRvbSA9IF9hLmJvdHRvbTtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLnNldHRpbmdzLmFsbG93TWVkaWFPdmVybGFwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldE1lZGlhQ29udGFpbmVyUG9zaXRpb24odG9wLCBib3R0b20pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBfX3NsaWRlVmlkZW9JbmZvID0gdGhpcy5nYWxsZXJ5SXRlbXNbaW5kZXhdLl9fc2xpZGVWaWRlb0luZm87XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnpvb21Gcm9tT3JpZ2luICYmIGVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudEltYWdlU2l6ZSA9IHV0aWxzLmdldFNpemUoZWxlbWVudCwgdGhpcy5vdXRlciwgdG9wICsgYm90dG9tLCBfX3NsaWRlVmlkZW9JbmZvICYmIHRoaXMuc2V0dGluZ3MudmlkZW9NYXhTaXplKTtcclxuICAgICAgICAgICAgICAgIHRyYW5zZm9ybSA9IHV0aWxzLmdldFRyYW5zZm9ybShlbGVtZW50LCB0aGlzLm91dGVyLCB0b3AsIGJvdHRvbSwgdGhpcy5jdXJyZW50SW1hZ2VTaXplKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoIXRoaXMuem9vbUZyb21PcmlnaW4gfHwgIXRyYW5zZm9ybSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vdXRlci5hZGRDbGFzcyh0aGlzLnNldHRpbmdzLnN0YXJ0Q2xhc3MpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5nZXRTbGlkZUl0ZW0oaW5kZXgpLnJlbW92ZUNsYXNzKCdsZy1jb21wbGV0ZScpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciB0aW1lb3V0ID0gdGhpcy5zZXR0aW5ncy56b29tRnJvbU9yaWdpblxyXG4gICAgICAgICAgICAgICAgPyAxMDBcclxuICAgICAgICAgICAgICAgIDogdGhpcy5zZXR0aW5ncy5iYWNrZHJvcER1cmF0aW9uO1xyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLm91dGVyLmFkZENsYXNzKCdsZy1jb21wb25lbnRzLW9wZW4nKTtcclxuICAgICAgICAgICAgfSwgdGltZW91dCk7XHJcbiAgICAgICAgICAgIHRoaXMuaW5kZXggPSBpbmRleDtcclxuICAgICAgICAgICAgdGhpcy5MR2VsLnRyaWdnZXIobEdFdmVudHMuYmVmb3JlT3Blbik7XHJcbiAgICAgICAgICAgIC8vIGFkZCBjbGFzcyBsZy1jdXJyZW50IHRvIHJlbW92ZSBpbml0aWFsIHRyYW5zaXRpb25cclxuICAgICAgICAgICAgdGhpcy5nZXRTbGlkZUl0ZW0oaW5kZXgpLmFkZENsYXNzKCdsZy1jdXJyZW50Jyk7XHJcbiAgICAgICAgICAgIHRoaXMubEdhbGxlcnlPbiA9IGZhbHNlO1xyXG4gICAgICAgICAgICAvLyBTdG9yZSB0aGUgY3VycmVudCBzY3JvbGwgdG9wIHZhbHVlIHRvIHNjcm9sbCBiYWNrIGFmdGVyIGNsb3NpbmcgdGhlIGdhbGxlcnkuLlxyXG4gICAgICAgICAgICB0aGlzLnByZXZTY3JvbGxUb3AgPSAkTEcod2luZG93KS5zY3JvbGxUb3AoKTtcclxuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBOZWVkIHRvIGNoZWNrIGJvdGggem9vbUZyb21PcmlnaW4gYW5kIHRyYW5zZm9ybSB2YWx1ZXMgYXMgd2UgbmVlZCB0byBzZXQgc2V0IHRoZVxyXG4gICAgICAgICAgICAgICAgLy8gZGVmYXVsdCBvcGVuaW5nIGFuaW1hdGlvbiBpZiB1c2VyIG1pc3NlZCB0byBhZGQgdGhlIGxnLXNpemUgYXR0cmlidXRlXHJcbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMuem9vbUZyb21PcmlnaW4gJiYgdHJhbnNmb3JtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRTbGlkZV8xID0gX3RoaXMuZ2V0U2xpZGVJdGVtKGluZGV4KTtcclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50U2xpZGVfMS5jc3MoJ3RyYW5zZm9ybScsIHRyYW5zZm9ybSk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRTbGlkZV8xXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ2xnLXN0YXJ0LXByb2dyZXNzIGxnLXN0YXJ0LWVuZC1wcm9ncmVzcycpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuY3NzKCd0cmFuc2l0aW9uLWR1cmF0aW9uJywgX3RoaXMuc2V0dGluZ3Muc3RhcnRBbmltYXRpb25EdXJhdGlvbiArICdtcycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5vdXRlci5hZGRDbGFzcygnbGctem9vbS1mcm9tLWltYWdlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRTbGlkZV8xLmNzcygndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZTNkKDAsIDAsIDApJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgMTAwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLiRiYWNrZHJvcC5hZGRDbGFzcygnaW4nKTtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy4kY29udGFpbmVyLmFkZENsYXNzKCdsZy1zaG93LWluJyk7XHJcbiAgICAgICAgICAgICAgICB9LCAxMCk7XHJcbiAgICAgICAgICAgICAgICAvLyBsZy12aXNpYmxlIGNsYXNzIHJlc2V0cyBnYWxsZXJ5IG9wYWNpdHkgdG8gMVxyXG4gICAgICAgICAgICAgICAgaWYgKCFfdGhpcy56b29tRnJvbU9yaWdpbiB8fCAhdHJhbnNmb3JtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLm91dGVyLmFkZENsYXNzKCdsZy12aXNpYmxlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgX3RoaXMuc2V0dGluZ3MuYmFja2Ryb3BEdXJhdGlvbik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBpbml0aWF0ZSBzbGlkZSBmdW5jdGlvblxyXG4gICAgICAgICAgICAgICAgX3RoaXMuc2xpZGUoaW5kZXgsIGZhbHNlLCBmYWxzZSwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuTEdlbC50cmlnZ2VyKGxHRXZlbnRzLmFmdGVyT3Blbik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBpZiAoZG9jdW1lbnQuYm9keSA9PT0gdGhpcy5zZXR0aW5ncy5jb250YWluZXIpIHtcclxuICAgICAgICAgICAgICAgICRMRygnaHRtbCcpLmFkZENsYXNzKCdsZy1vbicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBOb3RlIC0gQ2hhbmdpbmcgdGhlIHBvc2l0aW9uIG9mIHRoZSBtZWRpYSBvbiBldmVyeSBzbGlkZSB0cmFuc2l0aW9uIGNyZWF0ZXMgYSBmbGlja2VyaW5nIGVmZmVjdC5cclxuICAgICAgICAgKiBUaGVyZWZvcmUswqBUaGUgaGVpZ2h0IG9mIHRoZSBjYXB0aW9uIGlzIGNhbGN1bGF0ZWQgZHluYW1pY2FsbHksIG9ubHkgb25jZSBiYXNlZCBvbiB0aGUgZmlyc3Qgc2xpZGUgY2FwdGlvbi5cclxuICAgICAgICAgKiBpZiB5b3UgaGF2ZSBkeW5hbWljIGNhcHRpb25zIGZvciBlYWNoIG1lZGlhLFxyXG4gICAgICAgICAqIHlvdSBjYW4gcHJvdmlkZSBhbiBhcHByb3ByaWF0ZSBoZWlnaHQgZm9yIHRoZSBjYXB0aW9ucyB2aWEgYWxsb3dNZWRpYU92ZXJsYXAgb3B0aW9uXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgTGlnaHRHYWxsZXJ5LnByb3RvdHlwZS5nZXRNZWRpYUNvbnRhaW5lclBvc2l0aW9uID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5hbGxvd01lZGlhT3ZlcmxhcCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICB0b3A6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgYm90dG9tOiAwLFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgdG9wID0gdGhpcy4kdG9vbGJhci5nZXQoKS5jbGllbnRIZWlnaHQgfHwgMDtcclxuICAgICAgICAgICAgdmFyIHN1Ykh0bWwgPSB0aGlzLm91dGVyLmZpbmQoJy5sZy1jb21wb25lbnRzIC5sZy1zdWItaHRtbCcpLmdldCgpO1xyXG4gICAgICAgICAgICB2YXIgY2FwdGlvbkhlaWdodCA9IHRoaXMuc2V0dGluZ3MuZGVmYXVsdENhcHRpb25IZWlnaHQgfHxcclxuICAgICAgICAgICAgICAgIChzdWJIdG1sICYmIHN1Ykh0bWwuY2xpZW50SGVpZ2h0KSB8fFxyXG4gICAgICAgICAgICAgICAgMDtcclxuICAgICAgICAgICAgdmFyIHRodW1iQ29udGFpbmVyID0gdGhpcy5vdXRlci5maW5kKCcubGctdGh1bWItb3V0ZXInKS5nZXQoKTtcclxuICAgICAgICAgICAgdmFyIHRodW1iSGVpZ2h0ID0gdGh1bWJDb250YWluZXIgPyB0aHVtYkNvbnRhaW5lci5jbGllbnRIZWlnaHQgOiAwO1xyXG4gICAgICAgICAgICB2YXIgYm90dG9tID0gdGh1bWJIZWlnaHQgKyBjYXB0aW9uSGVpZ2h0O1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgdG9wOiB0b3AsXHJcbiAgICAgICAgICAgICAgICBib3R0b206IGJvdHRvbSxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIExpZ2h0R2FsbGVyeS5wcm90b3R5cGUuc2V0TWVkaWFDb250YWluZXJQb3NpdGlvbiA9IGZ1bmN0aW9uICh0b3AsIGJvdHRvbSkge1xyXG4gICAgICAgICAgICBpZiAodG9wID09PSB2b2lkIDApIHsgdG9wID0gMDsgfVxyXG4gICAgICAgICAgICBpZiAoYm90dG9tID09PSB2b2lkIDApIHsgYm90dG9tID0gMDsgfVxyXG4gICAgICAgICAgICB0aGlzLiRjb250ZW50LmNzcygndG9wJywgdG9wICsgJ3B4JykuY3NzKCdib3R0b20nLCBib3R0b20gKyAncHgnKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIExpZ2h0R2FsbGVyeS5wcm90b3R5cGUuaGlkZUJhcnMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgICAgIC8vIEhpZGUgY29udHJvbGxlcnMgaWYgbW91c2UgZG9lc24ndCBtb3ZlIGZvciBzb21lIHBlcmlvZFxyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLm91dGVyLnJlbW92ZUNsYXNzKCdsZy1oaWRlLWl0ZW1zJyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMuc2V0dGluZ3MuaGlkZUJhcnNEZWxheSA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5vdXRlci5vbignbW91c2Vtb3ZlLmxnIGNsaWNrLmxnIHRvdWNoc3RhcnQubGcnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLm91dGVyLnJlbW92ZUNsYXNzKCdsZy1oaWRlLWl0ZW1zJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dChfdGhpcy5oaWRlQmFyVGltZW91dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRpbWVvdXQgd2lsbCBiZSBjbGVhcmVkIG9uIGVhY2ggc2xpZGUgbW92ZW1lbnQgYWxzb1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5oaWRlQmFyVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMub3V0ZXIuYWRkQ2xhc3MoJ2xnLWhpZGUtaXRlbXMnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgX3RoaXMuc2V0dGluZ3MuaGlkZUJhcnNEZWxheSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMub3V0ZXIudHJpZ2dlcignbW91c2Vtb3ZlLmxnJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sIHRoaXMuc2V0dGluZ3Muc2hvd0JhcnNBZnRlcik7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBMaWdodEdhbGxlcnkucHJvdG90eXBlLmluaXRQaWN0dXJlRmlsbCA9IGZ1bmN0aW9uICgkaW1nKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnNldHRpbmdzLnN1cHBvcnRMZWdhY3lCcm93c2VyKSB7XHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgIHBpY3R1cmVmaWxsKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudHM6IFskaW1nLmdldCgpXSxcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdsaWdodEdhbGxlcnkgOi0gSWYgeW91IHdhbnQgc3Jjc2V0IG9yIHBpY3R1cmUgdGFnIHRvIGJlIHN1cHBvcnRlZCBmb3Igb2xkZXIgYnJvd3NlciBwbGVhc2UgaW5jbHVkZSBwaWN0dXJlZmlsIGphdmFzY3JpcHQgbGlicmFyeSBpbiB5b3VyIGRvY3VtZW50LicpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAgQGRlc2MgQ3JlYXRlIGltYWdlIGNvdW50ZXJcclxuICAgICAgICAgKiAgRXg6IDEvMTBcclxuICAgICAgICAgKi9cclxuICAgICAgICBMaWdodEdhbGxlcnkucHJvdG90eXBlLmNvdW50ZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmNvdW50ZXIpIHtcclxuICAgICAgICAgICAgICAgIHZhciBjb3VudGVySHRtbCA9IFwiPGRpdiBjbGFzcz1cXFwibGctY291bnRlclxcXCIgcm9sZT1cXFwic3RhdHVzXFxcIiBhcmlhLWxpdmU9XFxcInBvbGl0ZVxcXCI+XFxuICAgICAgICAgICAgICAgIDxzcGFuIGlkPVxcXCJcIiArIHRoaXMuZ2V0SWROYW1lKCdsZy1jb3VudGVyLWN1cnJlbnQnKSArIFwiXFxcIiBjbGFzcz1cXFwibGctY291bnRlci1jdXJyZW50XFxcIj5cIiArICh0aGlzLmluZGV4ICsgMSkgKyBcIiA8L3NwYW4+IC9cXG4gICAgICAgICAgICAgICAgPHNwYW4gaWQ9XFxcIlwiICsgdGhpcy5nZXRJZE5hbWUoJ2xnLWNvdW50ZXItYWxsJykgKyBcIlxcXCIgY2xhc3M9XFxcImxnLWNvdW50ZXItYWxsXFxcIj5cIiArIHRoaXMuZ2FsbGVyeUl0ZW1zLmxlbmd0aCArIFwiIDwvc3Bhbj48L2Rpdj5cIjtcclxuICAgICAgICAgICAgICAgIHRoaXMub3V0ZXIuZmluZCh0aGlzLnNldHRpbmdzLmFwcGVuZENvdW50ZXJUbykuYXBwZW5kKGNvdW50ZXJIdG1sKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogIEBkZXNjIGFkZCBzdWItaHRtbCBpbnRvIHRoZSBzbGlkZVxyXG4gICAgICAgICAqICBAcGFyYW0ge051bWJlcn0gaW5kZXggLSBpbmRleCBvZiB0aGUgc2xpZGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBMaWdodEdhbGxlcnkucHJvdG90eXBlLmFkZEh0bWwgPSBmdW5jdGlvbiAoaW5kZXgpIHtcclxuICAgICAgICAgICAgdmFyIHN1Ykh0bWw7XHJcbiAgICAgICAgICAgIHZhciBzdWJIdG1sVXJsO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5nYWxsZXJ5SXRlbXNbaW5kZXhdLnN1Ykh0bWxVcmwpIHtcclxuICAgICAgICAgICAgICAgIHN1Ykh0bWxVcmwgPSB0aGlzLmdhbGxlcnlJdGVtc1tpbmRleF0uc3ViSHRtbFVybDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHN1Ykh0bWwgPSB0aGlzLmdhbGxlcnlJdGVtc1tpbmRleF0uc3ViSHRtbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoIXN1Ykh0bWxVcmwpIHtcclxuICAgICAgICAgICAgICAgIGlmIChzdWJIdG1sKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gZ2V0IGZpcnN0IGxldHRlciBvZiBzdWItaHRtbFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIGZpcnN0IGxldHRlciBzdGFydHMgd2l0aCAuIG9yICMgZ2V0IHRoZSBodG1sIGZvcm0gdGhlIGpRdWVyeSBvYmplY3RcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZkwgPSBzdWJIdG1sLnN1YnN0cmluZygwLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZkwgPT09ICcuJyB8fCBmTCA9PT0gJyMnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnNldHRpbmdzLnN1Ykh0bWxTZWxlY3RvclJlbGF0aXZlICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAhdGhpcy5zZXR0aW5ncy5keW5hbWljKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJIdG1sID0gJExHKHRoaXMuaXRlbXMpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmVxKGluZGV4KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5maW5kKHN1Ykh0bWwpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmZpcnN0KClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuaHRtbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViSHRtbCA9ICRMRyhzdWJIdG1sKS5maXJzdCgpLmh0bWwoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHN1Ykh0bWwgPSAnJztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5hcHBlbmRTdWJIdG1sVG8gIT09ICcubGctaXRlbScpIHtcclxuICAgICAgICAgICAgICAgIGlmIChzdWJIdG1sVXJsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vdXRlci5maW5kKCcubGctc3ViLWh0bWwnKS5sb2FkKHN1Ykh0bWxVcmwpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vdXRlci5maW5kKCcubGctc3ViLWh0bWwnKS5odG1sKHN1Ykh0bWwpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRTbGlkZSA9ICRMRyh0aGlzLmdldFNsaWRlSXRlbUlkKGluZGV4KSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoc3ViSHRtbFVybCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRTbGlkZS5sb2FkKHN1Ykh0bWxVcmwpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFNsaWRlLmFwcGVuZChcIjxkaXYgY2xhc3M9XFxcImxnLXN1Yi1odG1sXFxcIj5cIiArIHN1Ykh0bWwgKyBcIjwvZGl2PlwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBBZGQgbGctZW1wdHktaHRtbCBjbGFzcyBpZiB0aXRsZSBkb2Vzbid0IGV4aXN0XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc3ViSHRtbCAhPT0gJ3VuZGVmaW5lZCcgJiYgc3ViSHRtbCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHN1Ykh0bWwgPT09ICcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vdXRlclxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuZmluZCh0aGlzLnNldHRpbmdzLmFwcGVuZFN1Ykh0bWxUbylcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCdsZy1lbXB0eS1odG1sJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm91dGVyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5maW5kKHRoaXMuc2V0dGluZ3MuYXBwZW5kU3ViSHRtbFRvKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ2xnLWVtcHR5LWh0bWwnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLkxHZWwudHJpZ2dlcihsR0V2ZW50cy5hZnRlckFwcGVuZFN1Ykh0bWwsIHtcclxuICAgICAgICAgICAgICAgIGluZGV4OiBpbmRleCxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAgQGRlc2MgUHJlbG9hZCBzbGlkZXNcclxuICAgICAgICAgKiAgQHBhcmFtIHtOdW1iZXJ9IGluZGV4IC0gaW5kZXggb2YgdGhlIHNsaWRlXHJcbiAgICAgICAgICogQHRvZG8gcHJlbG9hZCBub3Qgd29ya2luZyBmb3IgdGhlIGZpcnN0IHNsaWRlLCBBbHNvLCBzaG91bGQgd29yayBmb3IgdGhlIGZpcnN0IGFuZCBsYXN0IHNsaWRlIGFzIHdlbGxcclxuICAgICAgICAgKi9cclxuICAgICAgICBMaWdodEdhbGxlcnkucHJvdG90eXBlLnByZWxvYWQgPSBmdW5jdGlvbiAoaW5kZXgpIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPD0gdGhpcy5zZXR0aW5ncy5wcmVsb2FkOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGlmIChpID49IHRoaXMuZ2FsbGVyeUl0ZW1zLmxlbmd0aCAtIGluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvYWRDb250ZW50KGluZGV4ICsgaSwgZmFsc2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAxOyBqIDw9IHRoaXMuc2V0dGluZ3MucHJlbG9hZDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggLSBqIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5sb2FkQ29udGVudChpbmRleCAtIGosIGZhbHNlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgTGlnaHRHYWxsZXJ5LnByb3RvdHlwZS5nZXREdW1teUltZ1N0eWxlcyA9IGZ1bmN0aW9uIChpbWFnZVNpemUpIHtcclxuICAgICAgICAgICAgaWYgKCFpbWFnZVNpemUpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgICAgICAgIHJldHVybiBcIndpZHRoOlwiICsgaW1hZ2VTaXplLndpZHRoICsgXCJweDtcXG4gICAgICAgICAgICAgICAgbWFyZ2luLWxlZnQ6IC1cIiArIGltYWdlU2l6ZS53aWR0aCAvIDIgKyBcInB4O1xcbiAgICAgICAgICAgICAgICBtYXJnaW4tdG9wOiAtXCIgKyBpbWFnZVNpemUuaGVpZ2h0IC8gMiArIFwicHg7XFxuICAgICAgICAgICAgICAgIGhlaWdodDpcIiArIGltYWdlU2l6ZS5oZWlnaHQgKyBcInB4XCI7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBMaWdodEdhbGxlcnkucHJvdG90eXBlLmdldFZpZGVvQ29udFN0eWxlID0gZnVuY3Rpb24gKGltYWdlU2l6ZSkge1xyXG4gICAgICAgICAgICBpZiAoIWltYWdlU2l6ZSlcclxuICAgICAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICAgICAgcmV0dXJuIFwid2lkdGg6XCIgKyBpbWFnZVNpemUud2lkdGggKyBcInB4O1xcbiAgICAgICAgICAgICAgICBoZWlnaHQ6XCIgKyBpbWFnZVNpemUuaGVpZ2h0ICsgXCJweFwiO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgTGlnaHRHYWxsZXJ5LnByb3RvdHlwZS5nZXREdW1teUltYWdlQ29udGVudCA9IGZ1bmN0aW9uICgkY3VycmVudFNsaWRlLCBpbmRleCwgYWx0KSB7XHJcbiAgICAgICAgICAgIHZhciAkY3VycmVudEl0ZW07XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5zZXR0aW5ncy5keW5hbWljKSB7XHJcbiAgICAgICAgICAgICAgICAkY3VycmVudEl0ZW0gPSAkTEcodGhpcy5pdGVtcykuZXEoaW5kZXgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICgkY3VycmVudEl0ZW0pIHtcclxuICAgICAgICAgICAgICAgIHZhciBfZHVtbXlJbWdTcmMgPSB2b2lkIDA7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuc2V0dGluZ3MuZXhUaHVtYkltYWdlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX2R1bW15SW1nU3JjID0gJGN1cnJlbnRJdGVtLmZpbmQoJ2ltZycpLmZpcnN0KCkuYXR0cignc3JjJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBfZHVtbXlJbWdTcmMgPSAkY3VycmVudEl0ZW0uYXR0cih0aGlzLnNldHRpbmdzLmV4VGh1bWJJbWFnZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoIV9kdW1teUltZ1NyYylcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgICAgICAgICAgICB2YXIgaW1nU3R5bGUgPSB0aGlzLmdldER1bW15SW1nU3R5bGVzKHRoaXMuY3VycmVudEltYWdlU2l6ZSk7XHJcbiAgICAgICAgICAgICAgICB2YXIgZHVtbXlJbWdDb250ZW50ID0gXCI8aW1nIFwiICsgYWx0ICsgXCIgc3R5bGU9XFxcIlwiICsgaW1nU3R5bGUgKyBcIlxcXCIgY2xhc3M9XFxcImxnLWR1bW15LWltZ1xcXCIgc3JjPVxcXCJcIiArIF9kdW1teUltZ1NyYyArIFwiXFxcIiAvPlwiO1xyXG4gICAgICAgICAgICAgICAgJGN1cnJlbnRTbGlkZS5hZGRDbGFzcygnbGctZmlyc3Qtc2xpZGUnKTtcclxuICAgICAgICAgICAgICAgIHRoaXMub3V0ZXIuYWRkQ2xhc3MoJ2xnLWZpcnN0LXNsaWRlLWxvYWRpbmcnKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBkdW1teUltZ0NvbnRlbnQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgTGlnaHRHYWxsZXJ5LnByb3RvdHlwZS5zZXRJbWdNYXJrdXAgPSBmdW5jdGlvbiAoc3JjLCAkY3VycmVudFNsaWRlLCBpbmRleCkge1xyXG4gICAgICAgICAgICB2YXIgY3VycmVudEdhbGxlcnlJdGVtID0gdGhpcy5nYWxsZXJ5SXRlbXNbaW5kZXhdO1xyXG4gICAgICAgICAgICB2YXIgYWx0ID0gY3VycmVudEdhbGxlcnlJdGVtLmFsdCwgc3Jjc2V0ID0gY3VycmVudEdhbGxlcnlJdGVtLnNyY3NldCwgc2l6ZXMgPSBjdXJyZW50R2FsbGVyeUl0ZW0uc2l6ZXMsIHNvdXJjZXMgPSBjdXJyZW50R2FsbGVyeUl0ZW0uc291cmNlcztcclxuICAgICAgICAgICAgLy8gVXNlIHRoZSB0aHVtYm5haWwgYXMgZHVtbXkgaW1hZ2Ugd2hpY2ggd2lsbCBiZSByZXNpemVkIHRvIGFjdHVhbCBpbWFnZSBzaXplIGFuZFxyXG4gICAgICAgICAgICAvLyBkaXNwbGF5ZWQgb24gdG9wIG9mIGFjdHVhbCBpbWFnZVxyXG4gICAgICAgICAgICB2YXIgaW1nQ29udGVudCA9ICcnO1xyXG4gICAgICAgICAgICB2YXIgYWx0QXR0ciA9IGFsdCA/ICdhbHQ9XCInICsgYWx0ICsgJ1wiJyA6ICcnO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5pc0ZpcnN0U2xpZGVXaXRoWm9vbUFuaW1hdGlvbigpKSB7XHJcbiAgICAgICAgICAgICAgICBpbWdDb250ZW50ID0gdGhpcy5nZXREdW1teUltYWdlQ29udGVudCgkY3VycmVudFNsaWRlLCBpbmRleCwgYWx0QXR0cik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpbWdDb250ZW50ID0gdXRpbHMuZ2V0SW1nTWFya3VwKGluZGV4LCBzcmMsIGFsdEF0dHIsIHNyY3NldCwgc2l6ZXMsIHNvdXJjZXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBpbWdNYXJrdXAgPSBcIjxwaWN0dXJlIGNsYXNzPVxcXCJsZy1pbWctd3JhcFxcXCI+IFwiICsgaW1nQ29udGVudCArIFwiPC9waWN0dXJlPlwiO1xyXG4gICAgICAgICAgICAkY3VycmVudFNsaWRlLnByZXBlbmQoaW1nTWFya3VwKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIExpZ2h0R2FsbGVyeS5wcm90b3R5cGUub25TbGlkZU9iamVjdExvYWQgPSBmdW5jdGlvbiAoJHNsaWRlLCBpc0hUTUw1VmlkZW9XaXRob3V0UG9zdGVyLCBvbkxvYWQsIG9uRXJyb3IpIHtcclxuICAgICAgICAgICAgdmFyIG1lZGlhT2JqZWN0ID0gJHNsaWRlLmZpbmQoJy5sZy1vYmplY3QnKS5maXJzdCgpO1xyXG4gICAgICAgICAgICBpZiAodXRpbHMuaXNJbWFnZUxvYWRlZChtZWRpYU9iamVjdC5nZXQoKSkgfHxcclxuICAgICAgICAgICAgICAgIGlzSFRNTDVWaWRlb1dpdGhvdXRQb3N0ZXIpIHtcclxuICAgICAgICAgICAgICAgIG9uTG9hZCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbWVkaWFPYmplY3Qub24oJ2xvYWQubGcgZXJyb3IubGcnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb25Mb2FkICYmIG9uTG9hZCgpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBtZWRpYU9iamVjdC5vbignZXJyb3IubGcnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb25FcnJvciAmJiBvbkVycm9yKCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcGFyYW0gJGVsIEN1cnJlbnQgc2xpZGUgaXRlbVxyXG4gICAgICAgICAqIEBwYXJhbSBpbmRleFxyXG4gICAgICAgICAqIEBwYXJhbSBkZWxheSBEZWxheSBpcyAwIGV4Y2VwdCBmaXJzdCB0aW1lXHJcbiAgICAgICAgICogQHBhcmFtIHNwZWVkIFNwZWVkIGlzIHNhbWUgYXMgZGVsYXksIGV4Y2VwdCBpdCBpcyAwIGlmIGdhbGxlcnkgaXMgb3BlbmVkIHZpYSBoYXNoIHBsdWdpblxyXG4gICAgICAgICAqIEBwYXJhbSBpc0ZpcnN0U2xpZGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBMaWdodEdhbGxlcnkucHJvdG90eXBlLm9uTGdPYmplY3RMb2FkID0gZnVuY3Rpb24gKGN1cnJlbnRTbGlkZSwgaW5kZXgsIGRlbGF5LCBzcGVlZCwgaXNGaXJzdFNsaWRlLCBpc0hUTUw1VmlkZW9XaXRob3V0UG9zdGVyKSB7XHJcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgICAgIHRoaXMub25TbGlkZU9iamVjdExvYWQoY3VycmVudFNsaWRlLCBpc0hUTUw1VmlkZW9XaXRob3V0UG9zdGVyLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy50cmlnZ2VyU2xpZGVJdGVtTG9hZChjdXJyZW50U2xpZGUsIGluZGV4LCBkZWxheSwgc3BlZWQsIGlzRmlyc3RTbGlkZSk7XHJcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGN1cnJlbnRTbGlkZS5hZGRDbGFzcygnbGctY29tcGxldGUgbGctY29tcGxldGVfJyk7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50U2xpZGUuaHRtbCgnPHNwYW4gY2xhc3M9XCJsZy1lcnJvci1tc2dcIj5Pb3BzLi4uIEZhaWxlZCB0byBsb2FkIGNvbnRlbnQuLi48L3NwYW4+Jyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgTGlnaHRHYWxsZXJ5LnByb3RvdHlwZS50cmlnZ2VyU2xpZGVJdGVtTG9hZCA9IGZ1bmN0aW9uICgkY3VycmVudFNsaWRlLCBpbmRleCwgZGVsYXksIHNwZWVkLCBpc0ZpcnN0U2xpZGUpIHtcclxuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAgICAgdmFyIGN1cnJlbnRHYWxsZXJ5SXRlbSA9IHRoaXMuZ2FsbGVyeUl0ZW1zW2luZGV4XTtcclxuICAgICAgICAgICAgLy8gQWRkaW5nIGRlbGF5IGZvciB2aWRlbyBzbGlkZXMgd2l0aG91dCBwb3N0ZXIgZm9yIGJldHRlciBwZXJmb3JtYW5jZSBhbmQgdXNlciBleHBlcmllbmNlXHJcbiAgICAgICAgICAgIC8vIFZpZGVvcyBzaG91bGQgc3RhcnQgcGxheWluZyBvbmNlIG9uY2UgdGhlIGdhbGxlcnkgaXMgY29tcGxldGVseSBsb2FkZWRcclxuICAgICAgICAgICAgdmFyIF9zcGVlZCA9IGlzRmlyc3RTbGlkZSAmJlxyXG4gICAgICAgICAgICAgICAgdGhpcy5nZXRTbGlkZVR5cGUoY3VycmVudEdhbGxlcnlJdGVtKSA9PT0gJ3ZpZGVvJyAmJlxyXG4gICAgICAgICAgICAgICAgIWN1cnJlbnRHYWxsZXJ5SXRlbS5wb3N0ZXJcclxuICAgICAgICAgICAgICAgID8gc3BlZWRcclxuICAgICAgICAgICAgICAgIDogMDtcclxuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAkY3VycmVudFNsaWRlLmFkZENsYXNzKCdsZy1jb21wbGV0ZSBsZy1jb21wbGV0ZV8nKTtcclxuICAgICAgICAgICAgICAgIF90aGlzLkxHZWwudHJpZ2dlcihsR0V2ZW50cy5zbGlkZUl0ZW1Mb2FkLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5kZXg6IGluZGV4LFxyXG4gICAgICAgICAgICAgICAgICAgIGRlbGF5OiBkZWxheSB8fCAwLFxyXG4gICAgICAgICAgICAgICAgICAgIGlzRmlyc3RTbGlkZTogaXNGaXJzdFNsaWRlLFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0sIF9zcGVlZCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBMaWdodEdhbGxlcnkucHJvdG90eXBlLmlzRmlyc3RTbGlkZVdpdGhab29tQW5pbWF0aW9uID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gISEoIXRoaXMubEdhbGxlcnlPbiAmJlxyXG4gICAgICAgICAgICAgICAgdGhpcy56b29tRnJvbU9yaWdpbiAmJlxyXG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50SW1hZ2VTaXplKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8vIEFkZCB2aWRlbyBzbGlkZUluZm9cclxuICAgICAgICBMaWdodEdhbGxlcnkucHJvdG90eXBlLmFkZFNsaWRlVmlkZW9JbmZvID0gZnVuY3Rpb24gKGl0ZW1zKSB7XHJcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgICAgIGl0ZW1zLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQsIGluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICBlbGVtZW50Ll9fc2xpZGVWaWRlb0luZm8gPSB1dGlscy5pc1ZpZGVvKGVsZW1lbnQuc3JjLCAhIWVsZW1lbnQudmlkZW8sIGluZGV4KTtcclxuICAgICAgICAgICAgICAgIGlmIChlbGVtZW50Ll9fc2xpZGVWaWRlb0luZm8gJiZcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5zZXR0aW5ncy5sb2FkWW91VHViZVBvc3RlciAmJlxyXG4gICAgICAgICAgICAgICAgICAgICFlbGVtZW50LnBvc3RlciAmJlxyXG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuX19zbGlkZVZpZGVvSW5mby55b3V0dWJlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5wb3N0ZXIgPSBcIi8vaW1nLnlvdXR1YmUuY29tL3ZpL1wiICsgZWxlbWVudC5fX3NsaWRlVmlkZW9JbmZvLnlvdXR1YmVbMV0gKyBcIi9tYXhyZXNkZWZhdWx0LmpwZ1wiO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqICBMb2FkIHNsaWRlIGNvbnRlbnQgaW50byBzbGlkZS5cclxuICAgICAgICAgKiAgVGhpcyBpcyB1c2VkIHRvIGxvYWQgY29udGVudCBpbnRvIHNsaWRlcyB0aGF0IGlzIG5vdCB2aXNpYmxlIHRvb1xyXG4gICAgICAgICAqICBAcGFyYW0ge051bWJlcn0gaW5kZXggLSBpbmRleCBvZiB0aGUgc2xpZGUuXHJcbiAgICAgICAgICogIEBwYXJhbSB7Qm9vbGVhbn0gcmVjIC0gaWYgdHJ1ZSBjYWxsIGxvYWRjb250ZW50KCkgZnVuY3Rpb24gYWdhaW4uXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgTGlnaHRHYWxsZXJ5LnByb3RvdHlwZS5sb2FkQ29udGVudCA9IGZ1bmN0aW9uIChpbmRleCwgcmVjKSB7XHJcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgICAgIHZhciBjdXJyZW50R2FsbGVyeUl0ZW0gPSB0aGlzLmdhbGxlcnlJdGVtc1tpbmRleF07XHJcbiAgICAgICAgICAgIHZhciAkY3VycmVudFNsaWRlID0gJExHKHRoaXMuZ2V0U2xpZGVJdGVtSWQoaW5kZXgpKTtcclxuICAgICAgICAgICAgdmFyIHBvc3RlciA9IGN1cnJlbnRHYWxsZXJ5SXRlbS5wb3N0ZXIsIHNyY3NldCA9IGN1cnJlbnRHYWxsZXJ5SXRlbS5zcmNzZXQsIHNpemVzID0gY3VycmVudEdhbGxlcnlJdGVtLnNpemVzLCBzb3VyY2VzID0gY3VycmVudEdhbGxlcnlJdGVtLnNvdXJjZXM7XHJcbiAgICAgICAgICAgIHZhciBzcmMgPSBjdXJyZW50R2FsbGVyeUl0ZW0uc3JjO1xyXG4gICAgICAgICAgICB2YXIgdmlkZW8gPSBjdXJyZW50R2FsbGVyeUl0ZW0udmlkZW87XHJcbiAgICAgICAgICAgIHZhciBfaHRtbDVWaWRlbyA9IHZpZGVvICYmIHR5cGVvZiB2aWRlbyA9PT0gJ3N0cmluZycgPyBKU09OLnBhcnNlKHZpZGVvKSA6IHZpZGVvO1xyXG4gICAgICAgICAgICBpZiAoY3VycmVudEdhbGxlcnlJdGVtLnJlc3BvbnNpdmUpIHtcclxuICAgICAgICAgICAgICAgIHZhciBzcmNEeUl0bXMgPSBjdXJyZW50R2FsbGVyeUl0ZW0ucmVzcG9uc2l2ZS5zcGxpdCgnLCcpO1xyXG4gICAgICAgICAgICAgICAgc3JjID0gdXRpbHMuZ2V0UmVzcG9uc2l2ZVNyYyhzcmNEeUl0bXMpIHx8IHNyYztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgdmlkZW9JbmZvID0gY3VycmVudEdhbGxlcnlJdGVtLl9fc2xpZGVWaWRlb0luZm87XHJcbiAgICAgICAgICAgIHZhciBsZ1ZpZGVvU3R5bGUgPSAnJztcclxuICAgICAgICAgICAgdmFyIGlmcmFtZSA9ICEhY3VycmVudEdhbGxlcnlJdGVtLmlmcmFtZTtcclxuICAgICAgICAgICAgdmFyIGlzRmlyc3RTbGlkZSA9ICF0aGlzLmxHYWxsZXJ5T247XHJcbiAgICAgICAgICAgIC8vIGRlbGF5IGZvciBhZGRpbmcgY29tcGxldGUgY2xhc3MuIGl0IGlzIDAgZXhjZXB0IGZpcnN0IHRpbWUuXHJcbiAgICAgICAgICAgIHZhciBkZWxheSA9IDA7XHJcbiAgICAgICAgICAgIGlmIChpc0ZpcnN0U2xpZGUpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnpvb21Gcm9tT3JpZ2luICYmIHRoaXMuY3VycmVudEltYWdlU2l6ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRlbGF5ID0gdGhpcy5zZXR0aW5ncy5zdGFydEFuaW1hdGlvbkR1cmF0aW9uICsgMTA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBkZWxheSA9IHRoaXMuc2V0dGluZ3MuYmFja2Ryb3BEdXJhdGlvbiArIDEwO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICghJGN1cnJlbnRTbGlkZS5oYXNDbGFzcygnbGctbG9hZGVkJykpIHtcclxuICAgICAgICAgICAgICAgIGlmICh2aWRlb0luZm8pIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgX2EgPSB0aGlzLm1lZGlhQ29udGFpbmVyUG9zaXRpb24sIHRvcF8yID0gX2EudG9wLCBib3R0b20gPSBfYS5ib3R0b207XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZpZGVvU2l6ZSA9IHV0aWxzLmdldFNpemUodGhpcy5pdGVtc1tpbmRleF0sIHRoaXMub3V0ZXIsIHRvcF8yICsgYm90dG9tLCB2aWRlb0luZm8gJiYgdGhpcy5zZXR0aW5ncy52aWRlb01heFNpemUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxnVmlkZW9TdHlsZSA9IHRoaXMuZ2V0VmlkZW9Db250U3R5bGUodmlkZW9TaXplKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChpZnJhbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbWFya3VwID0gdXRpbHMuZ2V0SWZyYW1lTWFya3VwKHRoaXMuc2V0dGluZ3MuaWZyYW1lV2lkdGgsIHRoaXMuc2V0dGluZ3MuaWZyYW1lSGVpZ2h0LCB0aGlzLnNldHRpbmdzLmlmcmFtZU1heFdpZHRoLCB0aGlzLnNldHRpbmdzLmlmcmFtZU1heEhlaWdodCwgc3JjLCBjdXJyZW50R2FsbGVyeUl0ZW0uaWZyYW1lVGl0bGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICRjdXJyZW50U2xpZGUucHJlcGVuZChtYXJrdXApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAocG9zdGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGR1bW15SW1nID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGhhc1N0YXJ0QW5pbWF0aW9uID0gaXNGaXJzdFNsaWRlICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuem9vbUZyb21PcmlnaW4gJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50SW1hZ2VTaXplO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChoYXNTdGFydEFuaW1hdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkdW1teUltZyA9IHRoaXMuZ2V0RHVtbXlJbWFnZUNvbnRlbnQoJGN1cnJlbnRTbGlkZSwgaW5kZXgsICcnKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1hcmt1cCA9IHV0aWxzLmdldFZpZGVvUG9zdGVyTWFya3VwKHBvc3RlciwgZHVtbXlJbWcgfHwgJycsIGxnVmlkZW9TdHlsZSwgdGhpcy5zZXR0aW5ncy5zdHJpbmdzWydwbGF5VmlkZW8nXSwgdmlkZW9JbmZvKTtcclxuICAgICAgICAgICAgICAgICAgICAkY3VycmVudFNsaWRlLnByZXBlbmQobWFya3VwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHZpZGVvSW5mbykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBtYXJrdXAgPSBcIjxkaXYgY2xhc3M9XFxcImxnLXZpZGVvLWNvbnQgXFxcIiBzdHlsZT1cXFwiXCIgKyBsZ1ZpZGVvU3R5bGUgKyBcIlxcXCI+PC9kaXY+XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgJGN1cnJlbnRTbGlkZS5wcmVwZW5kKG1hcmt1cCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldEltZ01hcmt1cChzcmMsICRjdXJyZW50U2xpZGUsIGluZGV4KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc3Jjc2V0IHx8IHNvdXJjZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyICRpbWcgPSAkY3VycmVudFNsaWRlLmZpbmQoJy5sZy1vYmplY3QnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbml0UGljdHVyZUZpbGwoJGltZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHBvc3RlciB8fCB2aWRlb0luZm8pIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLkxHZWwudHJpZ2dlcihsR0V2ZW50cy5oYXNWaWRlbywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRleDogaW5kZXgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNyYzogc3JjLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBodG1sNVZpZGVvOiBfaHRtbDVWaWRlbyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGFzUG9zdGVyOiAhIXBvc3RlcixcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuTEdlbC50cmlnZ2VyKGxHRXZlbnRzLmFmdGVyQXBwZW5kU2xpZGUsIHsgaW5kZXg6IGluZGV4IH0pO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubEdhbGxlcnlPbiAmJlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0dGluZ3MuYXBwZW5kU3ViSHRtbFRvID09PSAnLmxnLWl0ZW0nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRIdG1sKGluZGV4KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBGb3IgZmlyc3QgdGltZSBhZGQgc29tZSBkZWxheSBmb3IgZGlzcGxheWluZyB0aGUgc3RhcnQgYW5pbWF0aW9uLlxyXG4gICAgICAgICAgICB2YXIgX3NwZWVkID0gMDtcclxuICAgICAgICAgICAgLy8gRG8gbm90IGNoYW5nZSB0aGUgZGVsYXkgdmFsdWUgYmVjYXVzZSBpdCBpcyByZXF1aXJlZCBmb3Igem9vbSBwbHVnaW4uXHJcbiAgICAgICAgICAgIC8vIElmIGdhbGxlcnkgb3BlbmVkIGZyb20gZGlyZWN0IHVybCAoaGFzaCkgc3BlZWQgdmFsdWUgc2hvdWxkIGJlIDBcclxuICAgICAgICAgICAgaWYgKGRlbGF5ICYmICEkTEcoZG9jdW1lbnQuYm9keSkuaGFzQ2xhc3MoJ2xnLWZyb20taGFzaCcpKSB7XHJcbiAgICAgICAgICAgICAgICBfc3BlZWQgPSBkZWxheTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBPbmx5IGZvciBmaXJzdCBzbGlkZSBhbmQgem9vbUZyb21PcmlnaW4gaXMgZW5hYmxlZFxyXG4gICAgICAgICAgICBpZiAodGhpcy5pc0ZpcnN0U2xpZGVXaXRoWm9vbUFuaW1hdGlvbigpKSB7XHJcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAkY3VycmVudFNsaWRlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnbGctc3RhcnQtZW5kLXByb2dyZXNzIGxnLXN0YXJ0LXByb2dyZXNzJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ3N0eWxlJyk7XHJcbiAgICAgICAgICAgICAgICB9LCB0aGlzLnNldHRpbmdzLnN0YXJ0QW5pbWF0aW9uRHVyYXRpb24gKyAxMDApO1xyXG4gICAgICAgICAgICAgICAgaWYgKCEkY3VycmVudFNsaWRlLmhhc0NsYXNzKCdsZy1sb2FkZWQnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMuZ2V0U2xpZGVUeXBlKGN1cnJlbnRHYWxsZXJ5SXRlbSkgPT09ICdpbWFnZScpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjdXJyZW50U2xpZGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZmluZCgnLmxnLWltZy13cmFwJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKHV0aWxzLmdldEltZ01hcmt1cChpbmRleCwgc3JjLCAnJywgc3Jjc2V0LCBzaXplcywgY3VycmVudEdhbGxlcnlJdGVtLnNvdXJjZXMpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzcmNzZXQgfHwgc291cmNlcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciAkaW1nID0gJGN1cnJlbnRTbGlkZS5maW5kKCcubGctb2JqZWN0Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuaW5pdFBpY3R1cmVGaWxsKCRpbWcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfdGhpcy5nZXRTbGlkZVR5cGUoY3VycmVudEdhbGxlcnlJdGVtKSA9PT0gJ2ltYWdlJyB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKF90aGlzLmdldFNsaWRlVHlwZShjdXJyZW50R2FsbGVyeUl0ZW0pID09PSAndmlkZW8nICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zdGVyKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMub25MZ09iamVjdExvYWQoJGN1cnJlbnRTbGlkZSwgaW5kZXgsIGRlbGF5LCBfc3BlZWQsIHRydWUsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGxvYWQgcmVtYWluaW5nIHNsaWRlcyBvbmNlIHRoZSBzbGlkZSBpcyBjb21wbGV0ZWx5IGxvYWRlZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMub25TbGlkZU9iamVjdExvYWQoJGN1cnJlbnRTbGlkZSwgISEodmlkZW9JbmZvICYmIHZpZGVvSW5mby5odG1sNSAmJiAhcG9zdGVyKSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmxvYWRDb250ZW50T25GaXJzdFNsaWRlTG9hZChpbmRleCwgJGN1cnJlbnRTbGlkZSwgX3NwZWVkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5sb2FkQ29udGVudE9uRmlyc3RTbGlkZUxvYWQoaW5kZXgsICRjdXJyZW50U2xpZGUsIF9zcGVlZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0sIHRoaXMuc2V0dGluZ3Muc3RhcnRBbmltYXRpb25EdXJhdGlvbiArIDEwMCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gU0xpZGUgY29udGVudCBoYXMgYmVlbiBhZGRlZCB0byBkb21cclxuICAgICAgICAgICAgJGN1cnJlbnRTbGlkZS5hZGRDbGFzcygnbGctbG9hZGVkJyk7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5pc0ZpcnN0U2xpZGVXaXRoWm9vbUFuaW1hdGlvbigpIHx8XHJcbiAgICAgICAgICAgICAgICAodGhpcy5nZXRTbGlkZVR5cGUoY3VycmVudEdhbGxlcnlJdGVtKSA9PT0gJ3ZpZGVvJyAmJiAhcG9zdGVyKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vbkxnT2JqZWN0TG9hZCgkY3VycmVudFNsaWRlLCBpbmRleCwgZGVsYXksIF9zcGVlZCwgaXNGaXJzdFNsaWRlLCAhISh2aWRlb0luZm8gJiYgdmlkZW9JbmZvLmh0bWw1ICYmICFwb3N0ZXIpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBXaGVuIGdhbGxlcnkgaXMgb3BlbmVkIG9uY2UgY29udGVudCBpcyBsb2FkZWQgKHNlY29uZCB0aW1lKSBuZWVkIHRvIGFkZCBsZy1jb21wbGV0ZSBjbGFzcyBmb3IgY3NzIHN0eWxpbmdcclxuICAgICAgICAgICAgaWYgKCghdGhpcy56b29tRnJvbU9yaWdpbiB8fCAhdGhpcy5jdXJyZW50SW1hZ2VTaXplKSAmJlxyXG4gICAgICAgICAgICAgICAgJGN1cnJlbnRTbGlkZS5oYXNDbGFzcygnbGctY29tcGxldGVfJykgJiZcclxuICAgICAgICAgICAgICAgICF0aGlzLmxHYWxsZXJ5T24pIHtcclxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRjdXJyZW50U2xpZGUuYWRkQ2xhc3MoJ2xnLWNvbXBsZXRlJyk7XHJcbiAgICAgICAgICAgICAgICB9LCB0aGlzLnNldHRpbmdzLmJhY2tkcm9wRHVyYXRpb24pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIENvbnRlbnQgbG9hZGVkXHJcbiAgICAgICAgICAgIC8vIE5lZWQgdG8gc2V0IGxHYWxsZXJ5T24gYmVmb3JlIGNhbGxpbmcgcHJlbG9hZCBmdW5jdGlvblxyXG4gICAgICAgICAgICB0aGlzLmxHYWxsZXJ5T24gPSB0cnVlO1xyXG4gICAgICAgICAgICBpZiAocmVjID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoISRjdXJyZW50U2xpZGUuaGFzQ2xhc3MoJ2xnLWNvbXBsZXRlXycpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJGN1cnJlbnRTbGlkZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuZmluZCgnLmxnLW9iamVjdCcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5maXJzdCgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5vbignbG9hZC5sZyBlcnJvci5sZycsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMucHJlbG9hZChpbmRleCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByZWxvYWQoaW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzYyBSZW1vdmUgZHVtbXkgaW1hZ2UgY29udGVudCBhbmQgbG9hZCBuZXh0IHNsaWRlc1xyXG4gICAgICAgICAqIENhbGxlZCBvbmx5IGZvciB0aGUgZmlyc3QgdGltZSBpZiB6b29tRnJvbU9yaWdpbiBhbmltYXRpb24gaXMgZW5hYmxlZFxyXG4gICAgICAgICAqIEBwYXJhbSBpbmRleFxyXG4gICAgICAgICAqIEBwYXJhbSAkY3VycmVudFNsaWRlXHJcbiAgICAgICAgICogQHBhcmFtIHNwZWVkXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgTGlnaHRHYWxsZXJ5LnByb3RvdHlwZS5sb2FkQ29udGVudE9uRmlyc3RTbGlkZUxvYWQgPSBmdW5jdGlvbiAoaW5kZXgsICRjdXJyZW50U2xpZGUsIHNwZWVkKSB7XHJcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgJGN1cnJlbnRTbGlkZS5maW5kKCcubGctZHVtbXktaW1nJykucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgICAgICAkY3VycmVudFNsaWRlLnJlbW92ZUNsYXNzKCdsZy1maXJzdC1zbGlkZScpO1xyXG4gICAgICAgICAgICAgICAgX3RoaXMub3V0ZXIucmVtb3ZlQ2xhc3MoJ2xnLWZpcnN0LXNsaWRlLWxvYWRpbmcnKTtcclxuICAgICAgICAgICAgICAgIF90aGlzLmlzRHVtbXlJbWFnZVJlbW92ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgX3RoaXMucHJlbG9hZChpbmRleCk7XHJcbiAgICAgICAgICAgIH0sIHNwZWVkICsgMzAwKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIExpZ2h0R2FsbGVyeS5wcm90b3R5cGUuZ2V0SXRlbXNUb0JlSW5zZXJ0ZWRUb0RvbSA9IGZ1bmN0aW9uIChpbmRleCwgcHJldkluZGV4LCBudW1iZXJPZkl0ZW1zKSB7XHJcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgICAgIGlmIChudW1iZXJPZkl0ZW1zID09PSB2b2lkIDApIHsgbnVtYmVyT2ZJdGVtcyA9IDA7IH1cclxuICAgICAgICAgICAgdmFyIGl0ZW1zVG9CZUluc2VydGVkVG9Eb20gPSBbXTtcclxuICAgICAgICAgICAgLy8gTWluaW11bSAyIGl0ZW1zIHNob3VsZCBiZSB0aGVyZVxyXG4gICAgICAgICAgICB2YXIgcG9zc2libGVOdW1iZXJPZkl0ZW1zID0gTWF0aC5tYXgobnVtYmVyT2ZJdGVtcywgMyk7XHJcbiAgICAgICAgICAgIHBvc3NpYmxlTnVtYmVyT2ZJdGVtcyA9IE1hdGgubWluKHBvc3NpYmxlTnVtYmVyT2ZJdGVtcywgdGhpcy5nYWxsZXJ5SXRlbXMubGVuZ3RoKTtcclxuICAgICAgICAgICAgdmFyIHByZXZJbmRleEl0ZW0gPSBcImxnLWl0ZW0tXCIgKyB0aGlzLmxnSWQgKyBcIi1cIiArIHByZXZJbmRleDtcclxuICAgICAgICAgICAgaWYgKHRoaXMuZ2FsbGVyeUl0ZW1zLmxlbmd0aCA8PSAzKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmdhbGxlcnlJdGVtcy5mb3JFYWNoKGZ1bmN0aW9uIChfZWxlbWVudCwgaW5kZXgpIHtcclxuICAgICAgICAgICAgICAgICAgICBpdGVtc1RvQmVJbnNlcnRlZFRvRG9tLnB1c2goXCJsZy1pdGVtLVwiICsgX3RoaXMubGdJZCArIFwiLVwiICsgaW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaXRlbXNUb0JlSW5zZXJ0ZWRUb0RvbTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoaW5kZXggPCAodGhpcy5nYWxsZXJ5SXRlbXMubGVuZ3RoIC0gMSkgLyAyKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpZHggPSBpbmRleDsgaWR4ID4gaW5kZXggLSBwb3NzaWJsZU51bWJlck9mSXRlbXMgLyAyICYmIGlkeCA+PSAwOyBpZHgtLSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGl0ZW1zVG9CZUluc2VydGVkVG9Eb20ucHVzaChcImxnLWl0ZW0tXCIgKyB0aGlzLmxnSWQgKyBcIi1cIiArIGlkeCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB2YXIgbnVtYmVyT2ZFeGlzdGluZ0l0ZW1zID0gaXRlbXNUb0JlSW5zZXJ0ZWRUb0RvbS5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpZHggPSAwOyBpZHggPCBwb3NzaWJsZU51bWJlck9mSXRlbXMgLSBudW1iZXJPZkV4aXN0aW5nSXRlbXM7IGlkeCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaXRlbXNUb0JlSW5zZXJ0ZWRUb0RvbS5wdXNoKFwibGctaXRlbS1cIiArIHRoaXMubGdJZCArIFwiLVwiICsgKGluZGV4ICsgaWR4ICsgMSkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaWR4ID0gaW5kZXg7IGlkeCA8PSB0aGlzLmdhbGxlcnlJdGVtcy5sZW5ndGggLSAxICYmXHJcbiAgICAgICAgICAgICAgICAgICAgaWR4IDwgaW5kZXggKyBwb3NzaWJsZU51bWJlck9mSXRlbXMgLyAyOyBpZHgrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGl0ZW1zVG9CZUluc2VydGVkVG9Eb20ucHVzaChcImxnLWl0ZW0tXCIgKyB0aGlzLmxnSWQgKyBcIi1cIiArIGlkeCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB2YXIgbnVtYmVyT2ZFeGlzdGluZ0l0ZW1zID0gaXRlbXNUb0JlSW5zZXJ0ZWRUb0RvbS5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpZHggPSAwOyBpZHggPCBwb3NzaWJsZU51bWJlck9mSXRlbXMgLSBudW1iZXJPZkV4aXN0aW5nSXRlbXM7IGlkeCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaXRlbXNUb0JlSW5zZXJ0ZWRUb0RvbS5wdXNoKFwibGctaXRlbS1cIiArIHRoaXMubGdJZCArIFwiLVwiICsgKGluZGV4IC0gaWR4IC0gMSkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmxvb3ApIHtcclxuICAgICAgICAgICAgICAgIGlmIChpbmRleCA9PT0gdGhpcy5nYWxsZXJ5SXRlbXMubGVuZ3RoIC0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGl0ZW1zVG9CZUluc2VydGVkVG9Eb20ucHVzaChcImxnLWl0ZW0tXCIgKyB0aGlzLmxnSWQgKyBcIi1cIiArIDApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaW5kZXggPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBpdGVtc1RvQmVJbnNlcnRlZFRvRG9tLnB1c2goXCJsZy1pdGVtLVwiICsgdGhpcy5sZ0lkICsgXCItXCIgKyAodGhpcy5nYWxsZXJ5SXRlbXMubGVuZ3RoIC0gMSkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChpdGVtc1RvQmVJbnNlcnRlZFRvRG9tLmluZGV4T2YocHJldkluZGV4SXRlbSkgPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICBpdGVtc1RvQmVJbnNlcnRlZFRvRG9tLnB1c2goXCJsZy1pdGVtLVwiICsgdGhpcy5sZ0lkICsgXCItXCIgKyBwcmV2SW5kZXgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBpdGVtc1RvQmVJbnNlcnRlZFRvRG9tO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgTGlnaHRHYWxsZXJ5LnByb3RvdHlwZS5vcmdhbml6ZVNsaWRlSXRlbXMgPSBmdW5jdGlvbiAoaW5kZXgsIHByZXZJbmRleCkge1xyXG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgICAgICB2YXIgaXRlbXNUb0JlSW5zZXJ0ZWRUb0RvbSA9IHRoaXMuZ2V0SXRlbXNUb0JlSW5zZXJ0ZWRUb0RvbShpbmRleCwgcHJldkluZGV4LCB0aGlzLnNldHRpbmdzLm51bWJlck9mU2xpZGVJdGVtc0luRG9tKTtcclxuICAgICAgICAgICAgaXRlbXNUb0JlSW5zZXJ0ZWRUb0RvbS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMuY3VycmVudEl0ZW1zSW5Eb20uaW5kZXhPZihpdGVtKSA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy4kaW5uZXIuYXBwZW5kKFwiPGRpdiBpZD1cXFwiXCIgKyBpdGVtICsgXCJcXFwiIGNsYXNzPVxcXCJsZy1pdGVtXFxcIj48L2Rpdj5cIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRJdGVtc0luRG9tLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgICAgICAgICAgICAgIGlmIChpdGVtc1RvQmVJbnNlcnRlZFRvRG9tLmluZGV4T2YoaXRlbSkgPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJExHKFwiI1wiICsgaXRlbSkucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gaXRlbXNUb0JlSW5zZXJ0ZWRUb0RvbTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEdldCBwcmV2aW91cyBpbmRleCBvZiB0aGUgc2xpZGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBMaWdodEdhbGxlcnkucHJvdG90eXBlLmdldFByZXZpb3VzU2xpZGVJbmRleCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHByZXZJbmRleCA9IDA7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgY3VycmVudEl0ZW1JZCA9IHRoaXMub3V0ZXJcclxuICAgICAgICAgICAgICAgICAgICAuZmluZCgnLmxnLWN1cnJlbnQnKVxyXG4gICAgICAgICAgICAgICAgICAgIC5maXJzdCgpXHJcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2lkJyk7XHJcbiAgICAgICAgICAgICAgICBwcmV2SW5kZXggPSBwYXJzZUludChjdXJyZW50SXRlbUlkLnNwbGl0KCctJylbM10pIHx8IDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICBwcmV2SW5kZXggPSAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBwcmV2SW5kZXg7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBMaWdodEdhbGxlcnkucHJvdG90eXBlLnNldERvd25sb2FkVmFsdWUgPSBmdW5jdGlvbiAoaW5kZXgpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MuZG93bmxvYWQpIHtcclxuICAgICAgICAgICAgICAgIHZhciBjdXJyZW50R2FsbGVyeUl0ZW0gPSB0aGlzLmdhbGxlcnlJdGVtc1tpbmRleF07XHJcbiAgICAgICAgICAgICAgICB2YXIgaGlkZURvd25sb2FkQnRuID0gY3VycmVudEdhbGxlcnlJdGVtLmRvd25sb2FkVXJsID09PSBmYWxzZSB8fFxyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRHYWxsZXJ5SXRlbS5kb3dubG9hZFVybCA9PT0gJ2ZhbHNlJztcclxuICAgICAgICAgICAgICAgIGlmIChoaWRlRG93bmxvYWRCdG4pIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm91dGVyLmFkZENsYXNzKCdsZy1oaWRlLWRvd25sb2FkJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgJGRvd25sb2FkID0gdGhpcy5nZXRFbGVtZW50QnlJZCgnbGctZG93bmxvYWQnKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm91dGVyLnJlbW92ZUNsYXNzKCdsZy1oaWRlLWRvd25sb2FkJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJGRvd25sb2FkLmF0dHIoJ2hyZWYnLCBjdXJyZW50R2FsbGVyeUl0ZW0uZG93bmxvYWRVcmwgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudEdhbGxlcnlJdGVtLnNyYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRHYWxsZXJ5SXRlbS5kb3dubG9hZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkZG93bmxvYWQuYXR0cignZG93bmxvYWQnLCBjdXJyZW50R2FsbGVyeUl0ZW0uZG93bmxvYWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgTGlnaHRHYWxsZXJ5LnByb3RvdHlwZS5tYWtlU2xpZGVBbmltYXRpb24gPSBmdW5jdGlvbiAoZGlyZWN0aW9uLCBjdXJyZW50U2xpZGVJdGVtLCBwcmV2aW91c1NsaWRlSXRlbSkge1xyXG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5sR2FsbGVyeU9uKSB7XHJcbiAgICAgICAgICAgICAgICBwcmV2aW91c1NsaWRlSXRlbS5hZGRDbGFzcygnbGctc2xpZGUtcHJvZ3Jlc3MnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIC8vIHJlbW92ZSBhbGwgdHJhbnNpdGlvbnNcclxuICAgICAgICAgICAgICAgIF90aGlzLm91dGVyLmFkZENsYXNzKCdsZy1uby10cmFucycpO1xyXG4gICAgICAgICAgICAgICAgX3RoaXMub3V0ZXJcclxuICAgICAgICAgICAgICAgICAgICAuZmluZCgnLmxnLWl0ZW0nKVxyXG4gICAgICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnbGctcHJldi1zbGlkZSBsZy1uZXh0LXNsaWRlJyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGlyZWN0aW9uID09PSAncHJldicpIHtcclxuICAgICAgICAgICAgICAgICAgICAvL3ByZXZzbGlkZVxyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRTbGlkZUl0ZW0uYWRkQ2xhc3MoJ2xnLXByZXYtc2xpZGUnKTtcclxuICAgICAgICAgICAgICAgICAgICBwcmV2aW91c1NsaWRlSXRlbS5hZGRDbGFzcygnbGctbmV4dC1zbGlkZScpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gbmV4dCBzbGlkZVxyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRTbGlkZUl0ZW0uYWRkQ2xhc3MoJ2xnLW5leHQtc2xpZGUnKTtcclxuICAgICAgICAgICAgICAgICAgICBwcmV2aW91c1NsaWRlSXRlbS5hZGRDbGFzcygnbGctcHJldi1zbGlkZScpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gZ2l2ZSA1MCBtcyBmb3IgYnJvd3NlciB0byBhZGQvcmVtb3ZlIGNsYXNzXHJcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5vdXRlci5maW5kKCcubGctaXRlbScpLnJlbW92ZUNsYXNzKCdsZy1jdXJyZW50Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFNsaWRlSXRlbS5hZGRDbGFzcygnbGctY3VycmVudCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHJlc2V0IGFsbCB0cmFuc2l0aW9uc1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLm91dGVyLnJlbW92ZUNsYXNzKCdsZy1uby10cmFucycpO1xyXG4gICAgICAgICAgICAgICAgfSwgNTApO1xyXG4gICAgICAgICAgICB9LCB0aGlzLmxHYWxsZXJ5T24gPyB0aGlzLnNldHRpbmdzLnNsaWRlRGVsYXkgOiAwKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEdvdG8gYSBzcGVjaWZpYyBzbGlkZS5cclxuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gaW5kZXggLSBpbmRleCBvZiB0aGUgc2xpZGVcclxuICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGZyb21Ub3VjaCAtIHRydWUgaWYgc2xpZGUgZnVuY3Rpb24gY2FsbGVkIHZpYSB0b3VjaCBldmVudCBvciBtb3VzZSBkcmFnXHJcbiAgICAgICAgICogQHBhcmFtIHtCb29sZWFufSBmcm9tVGh1bWIgLSB0cnVlIGlmIHNsaWRlIGZ1bmN0aW9uIGNhbGxlZCB2aWEgdGh1bWJuYWlsIGNsaWNrXHJcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IGRpcmVjdGlvbiAtIERpcmVjdGlvbiBvZiB0aGUgc2xpZGUobmV4dC9wcmV2KVxyXG4gICAgICAgICAqIEBjYXRlZ29yeSBsR1B1YmxpY01ldGhvZHNcclxuICAgICAgICAgKiBAZXhhbXBsZVxyXG4gICAgICAgICAqICBjb25zdCBwbHVnaW4gPSBsaWdodEdhbGxlcnkoKTtcclxuICAgICAgICAgKiAgLy8gdG8gZ28gdG8gM3JkIHNsaWRlXHJcbiAgICAgICAgICogIHBsdWdpbi5zbGlkZSgyKTtcclxuICAgICAgICAgKlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIExpZ2h0R2FsbGVyeS5wcm90b3R5cGUuc2xpZGUgPSBmdW5jdGlvbiAoaW5kZXgsIGZyb21Ub3VjaCwgZnJvbVRodW1iLCBkaXJlY3Rpb24pIHtcclxuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAgICAgdmFyIHByZXZJbmRleCA9IHRoaXMuZ2V0UHJldmlvdXNTbGlkZUluZGV4KCk7XHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudEl0ZW1zSW5Eb20gPSB0aGlzLm9yZ2FuaXplU2xpZGVJdGVtcyhpbmRleCwgcHJldkluZGV4KTtcclxuICAgICAgICAgICAgLy8gUHJldmVudCBtdWx0aXBsZSBjYWxsLCBSZXF1aXJlZCBmb3IgaHNoIHBsdWdpblxyXG4gICAgICAgICAgICBpZiAodGhpcy5sR2FsbGVyeU9uICYmIHByZXZJbmRleCA9PT0gaW5kZXgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgbnVtYmVyT2ZHYWxsZXJ5SXRlbXMgPSB0aGlzLmdhbGxlcnlJdGVtcy5sZW5ndGg7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5sZ0J1c3kpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmNvdW50ZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUN1cnJlbnRDb3VudGVyKGluZGV4KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHZhciBjdXJyZW50U2xpZGVJdGVtID0gdGhpcy5nZXRTbGlkZUl0ZW0oaW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgdmFyIHByZXZpb3VzU2xpZGVJdGVtXzEgPSB0aGlzLmdldFNsaWRlSXRlbShwcmV2SW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRHYWxsZXJ5SXRlbSA9IHRoaXMuZ2FsbGVyeUl0ZW1zW2luZGV4XTtcclxuICAgICAgICAgICAgICAgIHZhciB2aWRlb0luZm8gPSBjdXJyZW50R2FsbGVyeUl0ZW0uX19zbGlkZVZpZGVvSW5mbztcclxuICAgICAgICAgICAgICAgIHRoaXMub3V0ZXIuYXR0cignZGF0YS1sZy1zbGlkZS10eXBlJywgdGhpcy5nZXRTbGlkZVR5cGUoY3VycmVudEdhbGxlcnlJdGVtKSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldERvd25sb2FkVmFsdWUoaW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHZpZGVvSW5mbykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBfYSA9IHRoaXMubWVkaWFDb250YWluZXJQb3NpdGlvbiwgdG9wXzMgPSBfYS50b3AsIGJvdHRvbSA9IF9hLmJvdHRvbTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdmlkZW9TaXplID0gdXRpbHMuZ2V0U2l6ZSh0aGlzLml0ZW1zW2luZGV4XSwgdGhpcy5vdXRlciwgdG9wXzMgKyBib3R0b20sIHZpZGVvSW5mbyAmJiB0aGlzLnNldHRpbmdzLnZpZGVvTWF4U2l6ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXNpemVWaWRlb1NsaWRlKGluZGV4LCB2aWRlb1NpemUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5MR2VsLnRyaWdnZXIobEdFdmVudHMuYmVmb3JlU2xpZGUsIHtcclxuICAgICAgICAgICAgICAgICAgICBwcmV2SW5kZXg6IHByZXZJbmRleCxcclxuICAgICAgICAgICAgICAgICAgICBpbmRleDogaW5kZXgsXHJcbiAgICAgICAgICAgICAgICAgICAgZnJvbVRvdWNoOiAhIWZyb21Ub3VjaCxcclxuICAgICAgICAgICAgICAgICAgICBmcm9tVGh1bWI6ICEhZnJvbVRodW1iLFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxnQnVzeSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5oaWRlQmFyVGltZW91dCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFycm93RGlzYWJsZShpbmRleCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWRpcmVjdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCA8IHByZXZJbmRleCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkaXJlY3Rpb24gPSAncHJldic7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGluZGV4ID4gcHJldkluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpcmVjdGlvbiA9ICduZXh0JztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoIWZyb21Ub3VjaCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWFrZVNsaWRlQW5pbWF0aW9uKGRpcmVjdGlvbiwgY3VycmVudFNsaWRlSXRlbSwgcHJldmlvdXNTbGlkZUl0ZW1fMSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm91dGVyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5maW5kKCcubGctaXRlbScpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnbGctcHJldi1zbGlkZSBsZy1jdXJyZW50IGxnLW5leHQtc2xpZGUnKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdG91Y2hQcmV2ID0gdm9pZCAwO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0b3VjaE5leHQgPSB2b2lkIDA7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG51bWJlck9mR2FsbGVyeUl0ZW1zID4gMikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b3VjaFByZXYgPSBpbmRleCAtIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvdWNoTmV4dCA9IGluZGV4ICsgMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluZGV4ID09PSAwICYmIHByZXZJbmRleCA9PT0gbnVtYmVyT2ZHYWxsZXJ5SXRlbXMgLSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBuZXh0IHNsaWRlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3VjaE5leHQgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG91Y2hQcmV2ID0gbnVtYmVyT2ZHYWxsZXJ5SXRlbXMgLSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGluZGV4ID09PSBudW1iZXJPZkdhbGxlcnlJdGVtcyAtIDEgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZJbmRleCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcHJldiBzbGlkZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG91Y2hOZXh0ID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdWNoUHJldiA9IG51bWJlck9mR2FsbGVyeUl0ZW1zIC0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG91Y2hQcmV2ID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG91Y2hOZXh0ID0gMTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gJ3ByZXYnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ2V0U2xpZGVJdGVtKHRvdWNoTmV4dCkuYWRkQ2xhc3MoJ2xnLW5leHQtc2xpZGUnKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ2V0U2xpZGVJdGVtKHRvdWNoUHJldikuYWRkQ2xhc3MoJ2xnLXByZXYtc2xpZGUnKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFNsaWRlSXRlbS5hZGRDbGFzcygnbGctY3VycmVudCcpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gRG8gbm90IHB1dCBsb2FkIGNvbnRlbnQgaW4gc2V0IHRpbWVvdXQgYXMgaXQgbmVlZHMgdG8gbG9hZCBpbW1lZGlhdGVseSB3aGVuIHRoZSBnYWxsZXJ5IGlzIG9wZW5lZFxyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmxHYWxsZXJ5T24pIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmxvYWRDb250ZW50KGluZGV4LCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5sb2FkQ29udGVudChpbmRleCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFkZCB0aXRsZSBpZiB0aGlzLnNldHRpbmdzLmFwcGVuZFN1Ykh0bWxUbyA9PT0gbGctc3ViLWh0bWxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLnNldHRpbmdzLmFwcGVuZFN1Ykh0bWxUbyAhPT0gJy5sZy1pdGVtJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuYWRkSHRtbChpbmRleCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9LCB0aGlzLnNldHRpbmdzLnNwZWVkICsgNTAgKyAoZnJvbVRvdWNoID8gMCA6IHRoaXMuc2V0dGluZ3Muc2xpZGVEZWxheSkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMubGdCdXN5ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJldmlvdXNTbGlkZUl0ZW1fMS5yZW1vdmVDbGFzcygnbGctc2xpZGUtcHJvZ3Jlc3MnKTtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5MR2VsLnRyaWdnZXIobEdFdmVudHMuYWZ0ZXJTbGlkZSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmV2SW5kZXg6IHByZXZJbmRleCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXg6IGluZGV4LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmcm9tVG91Y2g6IGZyb21Ub3VjaCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZnJvbVRodW1iOiBmcm9tVGh1bWIsXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9LCAodGhpcy5sR2FsbGVyeU9uID8gdGhpcy5zZXR0aW5ncy5zcGVlZCArIDEwMCA6IDEwMCkgKyAoZnJvbVRvdWNoID8gMCA6IHRoaXMuc2V0dGluZ3Muc2xpZGVEZWxheSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuaW5kZXggPSBpbmRleDtcclxuICAgICAgICB9O1xyXG4gICAgICAgIExpZ2h0R2FsbGVyeS5wcm90b3R5cGUudXBkYXRlQ3VycmVudENvdW50ZXIgPSBmdW5jdGlvbiAoaW5kZXgpIHtcclxuICAgICAgICAgICAgdGhpcy5nZXRFbGVtZW50QnlJZCgnbGctY291bnRlci1jdXJyZW50JykuaHRtbChpbmRleCArIDEgKyAnJyk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBMaWdodEdhbGxlcnkucHJvdG90eXBlLnVwZGF0ZUNvdW50ZXJUb3RhbCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhpcy5nZXRFbGVtZW50QnlJZCgnbGctY291bnRlci1hbGwnKS5odG1sKHRoaXMuZ2FsbGVyeUl0ZW1zLmxlbmd0aCArICcnKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIExpZ2h0R2FsbGVyeS5wcm90b3R5cGUuZ2V0U2xpZGVUeXBlID0gZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgICAgICAgICAgaWYgKGl0ZW0uX19zbGlkZVZpZGVvSW5mbykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICd2aWRlbyc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoaXRlbS5pZnJhbWUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAnaWZyYW1lJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAnaW1hZ2UnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBMaWdodEdhbGxlcnkucHJvdG90eXBlLnRvdWNoTW92ZSA9IGZ1bmN0aW9uIChzdGFydENvb3JkcywgZW5kQ29vcmRzLCBlKSB7XHJcbiAgICAgICAgICAgIHZhciBkaXN0YW5jZVggPSBlbmRDb29yZHMucGFnZVggLSBzdGFydENvb3Jkcy5wYWdlWDtcclxuICAgICAgICAgICAgdmFyIGRpc3RhbmNlWSA9IGVuZENvb3Jkcy5wYWdlWSAtIHN0YXJ0Q29vcmRzLnBhZ2VZO1xyXG4gICAgICAgICAgICB2YXIgYWxsb3dTd2lwZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zd2lwZURpcmVjdGlvbikge1xyXG4gICAgICAgICAgICAgICAgYWxsb3dTd2lwZSA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoTWF0aC5hYnMoZGlzdGFuY2VYKSA+IDE1KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zd2lwZURpcmVjdGlvbiA9ICdob3Jpem9udGFsJztcclxuICAgICAgICAgICAgICAgICAgICBhbGxvd1N3aXBlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKE1hdGguYWJzKGRpc3RhbmNlWSkgPiAxNSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3dpcGVEaXJlY3Rpb24gPSAndmVydGljYWwnO1xyXG4gICAgICAgICAgICAgICAgICAgIGFsbG93U3dpcGUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICghYWxsb3dTd2lwZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciAkY3VycmVudFNsaWRlID0gdGhpcy5nZXRTbGlkZUl0ZW0odGhpcy5pbmRleCk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnN3aXBlRGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCcpIHtcclxuICAgICAgICAgICAgICAgIGUgPT09IG51bGwgfHwgZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgLy8gcmVzZXQgb3BhY2l0eSBhbmQgdHJhbnNpdGlvbiBkdXJhdGlvblxyXG4gICAgICAgICAgICAgICAgdGhpcy5vdXRlci5hZGRDbGFzcygnbGctZHJhZ2dpbmcnKTtcclxuICAgICAgICAgICAgICAgIC8vIG1vdmUgY3VycmVudCBzbGlkZVxyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRUcmFuc2xhdGUoJGN1cnJlbnRTbGlkZSwgZGlzdGFuY2VYLCAwKTtcclxuICAgICAgICAgICAgICAgIC8vIG1vdmUgbmV4dCBhbmQgcHJldiBzbGlkZSB3aXRoIGN1cnJlbnQgc2xpZGVcclxuICAgICAgICAgICAgICAgIHZhciB3aWR0aCA9ICRjdXJyZW50U2xpZGUuZ2V0KCkub2Zmc2V0V2lkdGg7XHJcbiAgICAgICAgICAgICAgICB2YXIgc2xpZGVXaWR0aEFtb3VudCA9ICh3aWR0aCAqIDE1KSAvIDEwMDtcclxuICAgICAgICAgICAgICAgIHZhciBndXR0ZXIgPSBzbGlkZVdpZHRoQW1vdW50IC0gTWF0aC5hYnMoKGRpc3RhbmNlWCAqIDEwKSAvIDEwMCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldFRyYW5zbGF0ZSh0aGlzLm91dGVyLmZpbmQoJy5sZy1wcmV2LXNsaWRlJykuZmlyc3QoKSwgLXdpZHRoICsgZGlzdGFuY2VYIC0gZ3V0dGVyLCAwKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0VHJhbnNsYXRlKHRoaXMub3V0ZXIuZmluZCgnLmxnLW5leHQtc2xpZGUnKS5maXJzdCgpLCB3aWR0aCArIGRpc3RhbmNlWCArIGd1dHRlciwgMCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5zd2lwZURpcmVjdGlvbiA9PT0gJ3ZlcnRpY2FsJykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3Muc3dpcGVUb0Nsb3NlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZSA9PT0gbnVsbCB8fCBlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kY29udGFpbmVyLmFkZENsYXNzKCdsZy1kcmFnZ2luZy12ZXJ0aWNhbCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBvcGFjaXR5ID0gMSAtIE1hdGguYWJzKGRpc3RhbmNlWSkgLyB3aW5kb3cuaW5uZXJIZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kYmFja2Ryb3AuY3NzKCdvcGFjaXR5Jywgb3BhY2l0eSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNjYWxlID0gMSAtIE1hdGguYWJzKGRpc3RhbmNlWSkgLyAod2luZG93LmlubmVyV2lkdGggKiAyKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFRyYW5zbGF0ZSgkY3VycmVudFNsaWRlLCAwLCBkaXN0YW5jZVksIHNjYWxlLCBzY2FsZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKE1hdGguYWJzKGRpc3RhbmNlWSkgPiAxMDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vdXRlclxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCdsZy1oaWRlLWl0ZW1zJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnbGctY29tcG9uZW50cy1vcGVuJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBMaWdodEdhbGxlcnkucHJvdG90eXBlLnRvdWNoRW5kID0gZnVuY3Rpb24gKGVuZENvb3Jkcywgc3RhcnRDb29yZHMsIGV2ZW50KSB7XHJcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgICAgIHZhciBkaXN0YW5jZTtcclxuICAgICAgICAgICAgLy8ga2VlcCBzbGlkZSBhbmltYXRpb24gZm9yIGFueSBtb2RlIHdoaWxlIGRyYWdnL3N3aXBlXHJcbiAgICAgICAgICAgIGlmICh0aGlzLnNldHRpbmdzLm1vZGUgIT09ICdsZy1zbGlkZScpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMub3V0ZXIuYWRkQ2xhc3MoJ2xnLXNsaWRlJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gc2V0IHRyYW5zaXRpb24gZHVyYXRpb25cclxuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy4kY29udGFpbmVyLnJlbW92ZUNsYXNzKCdsZy1kcmFnZ2luZy12ZXJ0aWNhbCcpO1xyXG4gICAgICAgICAgICAgICAgX3RoaXMub3V0ZXJcclxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ2xnLWRyYWdnaW5nIGxnLWhpZGUtaXRlbXMnKVxyXG4gICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnbGctY29tcG9uZW50cy1vcGVuJyk7XHJcbiAgICAgICAgICAgICAgICB2YXIgdHJpZ2dlckNsaWNrID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5zd2lwZURpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGlzdGFuY2UgPSBlbmRDb29yZHMucGFnZVggLSBzdGFydENvb3Jkcy5wYWdlWDtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZGlzdGFuY2VBYnMgPSBNYXRoLmFicyhlbmRDb29yZHMucGFnZVggLSBzdGFydENvb3Jkcy5wYWdlWCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRpc3RhbmNlIDwgMCAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkaXN0YW5jZUFicyA+IF90aGlzLnNldHRpbmdzLnN3aXBlVGhyZXNob2xkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmdvVG9OZXh0U2xpZGUodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyaWdnZXJDbGljayA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChkaXN0YW5jZSA+IDAgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGlzdGFuY2VBYnMgPiBfdGhpcy5zZXR0aW5ncy5zd2lwZVRocmVzaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5nb1RvUHJldlNsaWRlKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyQ2xpY2sgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChfdGhpcy5zd2lwZURpcmVjdGlvbiA9PT0gJ3ZlcnRpY2FsJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGRpc3RhbmNlID0gTWF0aC5hYnMoZW5kQ29vcmRzLnBhZ2VZIC0gc3RhcnRDb29yZHMucGFnZVkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChfdGhpcy5zZXR0aW5ncy5jbG9zYWJsZSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5zZXR0aW5ncy5zd2lwZVRvQ2xvc2UgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGlzdGFuY2UgPiAxMDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuY2xvc2VHYWxsZXJ5KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLiRiYWNrZHJvcC5jc3MoJ29wYWNpdHknLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5vdXRlci5maW5kKCcubGctaXRlbScpLnJlbW92ZUF0dHIoJ3N0eWxlJyk7XHJcbiAgICAgICAgICAgICAgICBpZiAodHJpZ2dlckNsaWNrICYmXHJcbiAgICAgICAgICAgICAgICAgICAgTWF0aC5hYnMoZW5kQ29vcmRzLnBhZ2VYIC0gc3RhcnRDb29yZHMucGFnZVgpIDwgNSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFRyaWdnZXIgY2xpY2sgaWYgZGlzdGFuY2UgaXMgbGVzcyB0aGFuIDUgcGl4XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9ICRMRyhldmVudC50YXJnZXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChfdGhpcy5pc1Bvc3RlckVsZW1lbnQodGFyZ2V0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5MR2VsLnRyaWdnZXIobEdFdmVudHMucG9zdGVyQ2xpY2spO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIF90aGlzLnN3aXBlRGlyZWN0aW9uID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgLy8gcmVtb3ZlIHNsaWRlIGNsYXNzIG9uY2UgZHJhZy9zd2lwZSBpcyBjb21wbGV0ZWQgaWYgbW9kZSBpcyBub3Qgc2xpZGVcclxuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIV90aGlzLm91dGVyLmhhc0NsYXNzKCdsZy1kcmFnZ2luZycpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuc2V0dGluZ3MubW9kZSAhPT0gJ2xnLXNsaWRlJykge1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLm91dGVyLnJlbW92ZUNsYXNzKCdsZy1zbGlkZScpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LCB0aGlzLnNldHRpbmdzLnNwZWVkICsgMTAwKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIExpZ2h0R2FsbGVyeS5wcm90b3R5cGUuZW5hYmxlU3dpcGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgICAgIHZhciBzdGFydENvb3JkcyA9IHt9O1xyXG4gICAgICAgICAgICB2YXIgZW5kQ29vcmRzID0ge307XHJcbiAgICAgICAgICAgIHZhciBpc01vdmVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHZhciBpc1N3aXBpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MuZW5hYmxlU3dpcGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuJGlubmVyLm9uKCd0b3VjaHN0YXJ0LmxnJywgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5kcmFnT3JTd2lwZUVuYWJsZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciAkaXRlbSA9IF90aGlzLmdldFNsaWRlSXRlbShfdGhpcy5pbmRleCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCgkTEcoZS50YXJnZXQpLmhhc0NsYXNzKCdsZy1pdGVtJykgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGl0ZW0uZ2V0KCkuY29udGFpbnMoZS50YXJnZXQpKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAhX3RoaXMub3V0ZXIuaGFzQ2xhc3MoJ2xnLXpvb21lZCcpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICFfdGhpcy5sZ0J1c3kgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgZS50YXJnZXRUb3VjaGVzLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpc1N3aXBpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy50b3VjaEFjdGlvbiA9ICdzd2lwZSc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLm1hbmFnZVN3aXBlQ2xhc3MoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRDb29yZHMgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWdlWDogZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VYLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFnZVk6IGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuJGlubmVyLm9uKCd0b3VjaG1vdmUubGcnLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc1N3aXBpbmcgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMudG91Y2hBY3Rpb24gPT09ICdzd2lwZScgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgZS50YXJnZXRUb3VjaGVzLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmRDb29yZHMgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWdlWDogZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VYLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFnZVk6IGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMudG91Y2hNb3ZlKHN0YXJ0Q29vcmRzLCBlbmRDb29yZHMsIGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpc01vdmVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuJGlubmVyLm9uKCd0b3VjaGVuZC5sZycsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChfdGhpcy50b3VjaEFjdGlvbiA9PT0gJ3N3aXBlJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNNb3ZlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNNb3ZlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMudG91Y2hFbmQoZW5kQ29vcmRzLCBzdGFydENvb3JkcywgZXZlbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGlzU3dpcGluZykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9ICRMRyhldmVudC50YXJnZXQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLmlzUG9zdGVyRWxlbWVudCh0YXJnZXQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuTEdlbC50cmlnZ2VyKGxHRXZlbnRzLnBvc3RlckNsaWNrKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy50b3VjaEFjdGlvbiA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXNTd2lwaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIExpZ2h0R2FsbGVyeS5wcm90b3R5cGUuZW5hYmxlRHJhZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAgICAgdmFyIHN0YXJ0Q29vcmRzID0ge307XHJcbiAgICAgICAgICAgIHZhciBlbmRDb29yZHMgPSB7fTtcclxuICAgICAgICAgICAgdmFyIGlzRHJhZ2luZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICB2YXIgaXNNb3ZlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5lbmFibGVEcmFnKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm91dGVyLm9uKCdtb3VzZWRvd24ubGcnLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmRyYWdPclN3aXBlRW5hYmxlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyICRpdGVtID0gX3RoaXMuZ2V0U2xpZGVJdGVtKF90aGlzLmluZGV4KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJExHKGUudGFyZ2V0KS5oYXNDbGFzcygnbGctaXRlbScpIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRpdGVtLmdldCgpLmNvbnRhaW5zKGUudGFyZ2V0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIV90aGlzLm91dGVyLmhhc0NsYXNzKCdsZy16b29tZWQnKSAmJiAhX3RoaXMubGdCdXN5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIV90aGlzLmxnQnVzeSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLm1hbmFnZVN3aXBlQ2xhc3MoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydENvb3JkcyA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFnZVg6IGUucGFnZVgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2VZOiBlLnBhZ2VZLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNEcmFnaW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAqKiBGaXggZm9yIHdlYmtpdCBjdXJzb3IgaXNzdWUgaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTI2NzIzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMub3V0ZXIuZ2V0KCkuc2Nyb2xsTGVmdCArPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLm91dGVyLmdldCgpLnNjcm9sbExlZnQgLT0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAqXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMub3V0ZXJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCdsZy1ncmFiJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCdsZy1ncmFiYmluZycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLkxHZWwudHJpZ2dlcihsR0V2ZW50cy5kcmFnU3RhcnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAkTEcod2luZG93KS5vbihcIm1vdXNlbW92ZS5sZy5nbG9iYWxcIiArIHRoaXMubGdJZCwgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNEcmFnaW5nICYmIF90aGlzLmxnT3BlbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzTW92ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmRDb29yZHMgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWdlWDogZS5wYWdlWCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2VZOiBlLnBhZ2VZLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy50b3VjaE1vdmUoc3RhcnRDb29yZHMsIGVuZENvb3Jkcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLkxHZWwudHJpZ2dlcihsR0V2ZW50cy5kcmFnTW92ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAkTEcod2luZG93KS5vbihcIm1vdXNldXAubGcuZ2xvYmFsXCIgKyB0aGlzLmxnSWQsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghX3RoaXMubGdPcGVuZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0ID0gJExHKGV2ZW50LnRhcmdldCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzTW92ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXNNb3ZlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy50b3VjaEVuZChlbmRDb29yZHMsIHN0YXJ0Q29vcmRzLCBldmVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLkxHZWwudHJpZ2dlcihsR0V2ZW50cy5kcmFnRW5kKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoX3RoaXMuaXNQb3N0ZXJFbGVtZW50KHRhcmdldCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuTEdlbC50cmlnZ2VyKGxHRXZlbnRzLnBvc3RlckNsaWNrKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gUHJldmVudCBleGVjdXRpb24gb24gY2xpY2tcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNEcmFnaW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzRHJhZ2luZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5vdXRlci5yZW1vdmVDbGFzcygnbGctZ3JhYmJpbmcnKS5hZGRDbGFzcygnbGctZ3JhYicpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBMaWdodEdhbGxlcnkucHJvdG90eXBlLnRyaWdnZXJQb3N0ZXJDbGljayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAgICAgdGhpcy4kaW5uZXIub24oJ2NsaWNrLmxnJywgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIV90aGlzLmRyYWdPclN3aXBlRW5hYmxlZCAmJlxyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmlzUG9zdGVyRWxlbWVudCgkTEcoZXZlbnQudGFyZ2V0KSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5MR2VsLnRyaWdnZXIobEdFdmVudHMucG9zdGVyQ2xpY2spO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIExpZ2h0R2FsbGVyeS5wcm90b3R5cGUubWFuYWdlU3dpcGVDbGFzcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIF90b3VjaE5leHQgPSB0aGlzLmluZGV4ICsgMTtcclxuICAgICAgICAgICAgdmFyIF90b3VjaFByZXYgPSB0aGlzLmluZGV4IC0gMTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MubG9vcCAmJiB0aGlzLmdhbGxlcnlJdGVtcy5sZW5ndGggPiAyKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pbmRleCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIF90b3VjaFByZXYgPSB0aGlzLmdhbGxlcnlJdGVtcy5sZW5ndGggLSAxO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5pbmRleCA9PT0gdGhpcy5nYWxsZXJ5SXRlbXMubGVuZ3RoIC0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIF90b3VjaE5leHQgPSAwO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMub3V0ZXIuZmluZCgnLmxnLWl0ZW0nKS5yZW1vdmVDbGFzcygnbGctbmV4dC1zbGlkZSBsZy1wcmV2LXNsaWRlJyk7XHJcbiAgICAgICAgICAgIGlmIChfdG91Y2hQcmV2ID4gLTEpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZ2V0U2xpZGVJdGVtKF90b3VjaFByZXYpLmFkZENsYXNzKCdsZy1wcmV2LXNsaWRlJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5nZXRTbGlkZUl0ZW0oX3RvdWNoTmV4dCkuYWRkQ2xhc3MoJ2xnLW5leHQtc2xpZGUnKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEdvIHRvIG5leHQgc2xpZGVcclxuICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGZyb21Ub3VjaCAtIHRydWUgaWYgc2xpZGUgZnVuY3Rpb24gY2FsbGVkIHZpYSB0b3VjaCBldmVudFxyXG4gICAgICAgICAqIEBjYXRlZ29yeSBsR1B1YmxpY01ldGhvZHNcclxuICAgICAgICAgKiBAZXhhbXBsZVxyXG4gICAgICAgICAqICBjb25zdCBwbHVnaW4gPSBsaWdodEdhbGxlcnkoKTtcclxuICAgICAgICAgKiAgcGx1Z2luLmdvVG9OZXh0U2xpZGUoKTtcclxuICAgICAgICAgKiBAc2VlIDxhIGhyZWY9XCIvZGVtb3MvbWV0aG9kcy9cIj5EZW1vPC9hPlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIExpZ2h0R2FsbGVyeS5wcm90b3R5cGUuZ29Ub05leHRTbGlkZSA9IGZ1bmN0aW9uIChmcm9tVG91Y2gpIHtcclxuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAgICAgdmFyIF9sb29wID0gdGhpcy5zZXR0aW5ncy5sb29wO1xyXG4gICAgICAgICAgICBpZiAoZnJvbVRvdWNoICYmIHRoaXMuZ2FsbGVyeUl0ZW1zLmxlbmd0aCA8IDMpIHtcclxuICAgICAgICAgICAgICAgIF9sb29wID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCF0aGlzLmxnQnVzeSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaW5kZXggKyAxIDwgdGhpcy5nYWxsZXJ5SXRlbXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbmRleCsrO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuTEdlbC50cmlnZ2VyKGxHRXZlbnRzLmJlZm9yZU5leHRTbGlkZSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRleDogdGhpcy5pbmRleCxcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNsaWRlKHRoaXMuaW5kZXgsICEhZnJvbVRvdWNoLCBmYWxzZSwgJ25leHQnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChfbG9vcCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmluZGV4ID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5MR2VsLnRyaWdnZXIobEdFdmVudHMuYmVmb3JlTmV4dFNsaWRlLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleDogdGhpcy5pbmRleCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2xpZGUodGhpcy5pbmRleCwgISFmcm9tVG91Y2gsIGZhbHNlLCAnbmV4dCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0aGlzLnNldHRpbmdzLnNsaWRlRW5kQW5pbWF0aW9uICYmICFmcm9tVG91Y2gpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vdXRlci5hZGRDbGFzcygnbGctcmlnaHQtZW5kJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMub3V0ZXIucmVtb3ZlQ2xhc3MoJ2xnLXJpZ2h0LWVuZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCA0MDApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogR28gdG8gcHJldmlvdXMgc2xpZGVzXHJcbiAgICAgICAgICogQHBhcmFtIHtCb29sZWFufSBmcm9tVG91Y2ggLSB0cnVlIGlmIHNsaWRlIGZ1bmN0aW9uIGNhbGxlZCB2aWEgdG91Y2ggZXZlbnRcclxuICAgICAgICAgKiBAY2F0ZWdvcnkgbEdQdWJsaWNNZXRob2RzXHJcbiAgICAgICAgICogQGV4YW1wbGVcclxuICAgICAgICAgKiAgY29uc3QgcGx1Z2luID0gbGlnaHRHYWxsZXJ5KHt9KTtcclxuICAgICAgICAgKiAgcGx1Z2luLmdvVG9QcmV2U2xpZGUoKTtcclxuICAgICAgICAgKiBAc2VlIDxhIGhyZWY9XCIvZGVtb3MvbWV0aG9kcy9cIj5EZW1vPC9hPlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgTGlnaHRHYWxsZXJ5LnByb3RvdHlwZS5nb1RvUHJldlNsaWRlID0gZnVuY3Rpb24gKGZyb21Ub3VjaCkge1xyXG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgICAgICB2YXIgX2xvb3AgPSB0aGlzLnNldHRpbmdzLmxvb3A7XHJcbiAgICAgICAgICAgIGlmIChmcm9tVG91Y2ggJiYgdGhpcy5nYWxsZXJ5SXRlbXMubGVuZ3RoIDwgMykge1xyXG4gICAgICAgICAgICAgICAgX2xvb3AgPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoIXRoaXMubGdCdXN5KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pbmRleCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmluZGV4LS07XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5MR2VsLnRyaWdnZXIobEdFdmVudHMuYmVmb3JlUHJldlNsaWRlLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4OiB0aGlzLmluZGV4LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmcm9tVG91Y2g6IGZyb21Ub3VjaCxcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNsaWRlKHRoaXMuaW5kZXgsICEhZnJvbVRvdWNoLCBmYWxzZSwgJ3ByZXYnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChfbG9vcCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmluZGV4ID0gdGhpcy5nYWxsZXJ5SXRlbXMubGVuZ3RoIC0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5MR2VsLnRyaWdnZXIobEdFdmVudHMuYmVmb3JlUHJldlNsaWRlLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleDogdGhpcy5pbmRleCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyb21Ub3VjaDogZnJvbVRvdWNoLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zbGlkZSh0aGlzLmluZGV4LCAhIWZyb21Ub3VjaCwgZmFsc2UsICdwcmV2Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuc2V0dGluZ3Muc2xpZGVFbmRBbmltYXRpb24gJiYgIWZyb21Ub3VjaCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm91dGVyLmFkZENsYXNzKCdsZy1sZWZ0LWVuZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLm91dGVyLnJlbW92ZUNsYXNzKCdsZy1sZWZ0LWVuZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCA0MDApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgTGlnaHRHYWxsZXJ5LnByb3RvdHlwZS5rZXlQcmVzcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAgICAgJExHKHdpbmRvdykub24oXCJrZXlkb3duLmxnLmdsb2JhbFwiICsgdGhpcy5sZ0lkLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLmxnT3BlbmVkICYmXHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuc2V0dGluZ3MuZXNjS2V5ID09PSB0cnVlICYmXHJcbiAgICAgICAgICAgICAgICAgICAgZS5rZXlDb2RlID09PSAyNykge1xyXG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMuc2V0dGluZ3MuYWxsb3dNZWRpYU92ZXJsYXAgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMub3V0ZXIuaGFzQ2xhc3MoJ2xnLWNhbi10b2dnbGUnKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5vdXRlci5oYXNDbGFzcygnbGctY29tcG9uZW50cy1vcGVuJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMub3V0ZXIucmVtb3ZlQ2xhc3MoJ2xnLWNvbXBvbmVudHMtb3BlbicpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuY2xvc2VHYWxsZXJ5KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLmxnT3BlbmVkICYmIF90aGlzLmdhbGxlcnlJdGVtcy5sZW5ndGggPiAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUua2V5Q29kZSA9PT0gMzcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5nb1RvUHJldlNsaWRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlLmtleUNvZGUgPT09IDM5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuZ29Ub05leHRTbGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBMaWdodEdhbGxlcnkucHJvdG90eXBlLmFycm93ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgICAgICB0aGlzLmdldEVsZW1lbnRCeUlkKCdsZy1wcmV2Jykub24oJ2NsaWNrLmxnJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuZ29Ub1ByZXZTbGlkZSgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdGhpcy5nZXRFbGVtZW50QnlJZCgnbGctbmV4dCcpLm9uKCdjbGljay5sZycsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLmdvVG9OZXh0U2xpZGUoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBMaWdodEdhbGxlcnkucHJvdG90eXBlLmFycm93RGlzYWJsZSA9IGZ1bmN0aW9uIChpbmRleCkge1xyXG4gICAgICAgICAgICAvLyBEaXNhYmxlIGFycm93cyBpZiBzZXR0aW5ncy5oaWRlQ29udHJvbE9uRW5kIGlzIHRydWVcclxuICAgICAgICAgICAgaWYgKCF0aGlzLnNldHRpbmdzLmxvb3AgJiYgdGhpcy5zZXR0aW5ncy5oaWRlQ29udHJvbE9uRW5kKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgJHByZXYgPSB0aGlzLmdldEVsZW1lbnRCeUlkKCdsZy1wcmV2Jyk7XHJcbiAgICAgICAgICAgICAgICB2YXIgJG5leHQgPSB0aGlzLmdldEVsZW1lbnRCeUlkKCdsZy1uZXh0Jyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggKyAxID09PSB0aGlzLmdhbGxlcnlJdGVtcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAkbmV4dC5hdHRyKCdkaXNhYmxlZCcsICdkaXNhYmxlZCcpLmFkZENsYXNzKCdkaXNhYmxlZCcpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJG5leHQucmVtb3ZlQXR0cignZGlzYWJsZWQnKS5yZW1vdmVDbGFzcygnZGlzYWJsZWQnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChpbmRleCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRwcmV2LmF0dHIoJ2Rpc2FibGVkJywgJ2Rpc2FibGVkJykuYWRkQ2xhc3MoJ2Rpc2FibGVkJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAkcHJldi5yZW1vdmVBdHRyKCdkaXNhYmxlZCcpLnJlbW92ZUNsYXNzKCdkaXNhYmxlZCcpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBMaWdodEdhbGxlcnkucHJvdG90eXBlLnNldFRyYW5zbGF0ZSA9IGZ1bmN0aW9uICgkZWwsIHhWYWx1ZSwgeVZhbHVlLCBzY2FsZVgsIHNjYWxlWSkge1xyXG4gICAgICAgICAgICBpZiAoc2NhbGVYID09PSB2b2lkIDApIHsgc2NhbGVYID0gMTsgfVxyXG4gICAgICAgICAgICBpZiAoc2NhbGVZID09PSB2b2lkIDApIHsgc2NhbGVZID0gMTsgfVxyXG4gICAgICAgICAgICAkZWwuY3NzKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlM2QoJyArXHJcbiAgICAgICAgICAgICAgICB4VmFsdWUgK1xyXG4gICAgICAgICAgICAgICAgJ3B4LCAnICtcclxuICAgICAgICAgICAgICAgIHlWYWx1ZSArXHJcbiAgICAgICAgICAgICAgICAncHgsIDBweCkgc2NhbGUzZCgnICtcclxuICAgICAgICAgICAgICAgIHNjYWxlWCArXHJcbiAgICAgICAgICAgICAgICAnLCAnICtcclxuICAgICAgICAgICAgICAgIHNjYWxlWSArXHJcbiAgICAgICAgICAgICAgICAnLCAxKScpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgTGlnaHRHYWxsZXJ5LnByb3RvdHlwZS5tb3VzZXdoZWVsID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgICAgICB2YXIgbGFzdENhbGwgPSAwO1xyXG4gICAgICAgICAgICB0aGlzLm91dGVyLm9uKCd3aGVlbC5sZycsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWUuZGVsdGFZIHx8IF90aGlzLmdhbGxlcnlJdGVtcy5sZW5ndGggPCAyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgdmFyIG5vdyA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKG5vdyAtIGxhc3RDYWxsIDwgMTAwMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGxhc3RDYWxsID0gbm93O1xyXG4gICAgICAgICAgICAgICAgaWYgKGUuZGVsdGFZID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmdvVG9OZXh0U2xpZGUoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGUuZGVsdGFZIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmdvVG9QcmV2U2xpZGUoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBMaWdodEdhbGxlcnkucHJvdG90eXBlLmlzU2xpZGVFbGVtZW50ID0gZnVuY3Rpb24gKHRhcmdldCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKHRhcmdldC5oYXNDbGFzcygnbGctb3V0ZXInKSB8fFxyXG4gICAgICAgICAgICAgICAgdGFyZ2V0Lmhhc0NsYXNzKCdsZy1pdGVtJykgfHxcclxuICAgICAgICAgICAgICAgIHRhcmdldC5oYXNDbGFzcygnbGctaW1nLXdyYXAnKSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBMaWdodEdhbGxlcnkucHJvdG90eXBlLmlzUG9zdGVyRWxlbWVudCA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcclxuICAgICAgICAgICAgdmFyIHBsYXlCdXR0b24gPSB0aGlzLmdldFNsaWRlSXRlbSh0aGlzLmluZGV4KVxyXG4gICAgICAgICAgICAgICAgLmZpbmQoJy5sZy12aWRlby1wbGF5LWJ1dHRvbicpXHJcbiAgICAgICAgICAgICAgICAuZ2V0KCk7XHJcbiAgICAgICAgICAgIHJldHVybiAodGFyZ2V0Lmhhc0NsYXNzKCdsZy12aWRlby1wb3N0ZXInKSB8fFxyXG4gICAgICAgICAgICAgICAgdGFyZ2V0Lmhhc0NsYXNzKCdsZy12aWRlby1wbGF5LWJ1dHRvbicpIHx8XHJcbiAgICAgICAgICAgICAgICAocGxheUJ1dHRvbiAmJiBwbGF5QnV0dG9uLmNvbnRhaW5zKHRhcmdldC5nZXQoKSkpKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIE1heGltaXplIG1pbmltaXplIGlubGluZSBnYWxsZXJ5LlxyXG4gICAgICAgICAqIEBjYXRlZ29yeSBsR1B1YmxpY01ldGhvZHNcclxuICAgICAgICAgKi9cclxuICAgICAgICBMaWdodEdhbGxlcnkucHJvdG90eXBlLnRvZ2dsZU1heGltaXplID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgICAgICB0aGlzLmdldEVsZW1lbnRCeUlkKCdsZy1tYXhpbWl6ZScpLm9uKCdjbGljay5sZycsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLiRjb250YWluZXIudG9nZ2xlQ2xhc3MoJ2xnLWlubGluZScpO1xyXG4gICAgICAgICAgICAgICAgX3RoaXMucmVmcmVzaE9uUmVzaXplKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgTGlnaHRHYWxsZXJ5LnByb3RvdHlwZS5pbnZhbGlkYXRlSXRlbXMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLml0ZW1zLmxlbmd0aDsgaW5kZXgrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSB0aGlzLml0ZW1zW2luZGV4XTtcclxuICAgICAgICAgICAgICAgIHZhciAkZWxlbWVudCA9ICRMRyhlbGVtZW50KTtcclxuICAgICAgICAgICAgICAgICRlbGVtZW50Lm9mZihcImNsaWNrLmxnY3VzdG9tLWl0ZW0tXCIgKyAkZWxlbWVudC5hdHRyKCdkYXRhLWxnLWlkJykpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBMaWdodEdhbGxlcnkucHJvdG90eXBlLm1hbmFnZUNsb3NlR2FsbGVyeSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAgICAgaWYgKCF0aGlzLnNldHRpbmdzLmNsb3NhYmxlKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB2YXIgbW91c2Vkb3duID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuZ2V0RWxlbWVudEJ5SWQoJ2xnLWNsb3NlJykub24oJ2NsaWNrLmxnJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuY2xvc2VHYWxsZXJ5KCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5jbG9zZU9uVGFwKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBJZiB5b3UgZHJhZyB0aGUgc2xpZGUgYW5kIHJlbGVhc2Ugb3V0c2lkZSBnYWxsZXJ5IGdldHMgY2xvc2Ugb24gY2hyb21lXHJcbiAgICAgICAgICAgICAgICAvLyBmb3IgcHJldmVudGluZyB0aGlzIGNoZWNrIG1vdXNlZG93biBhbmQgbW91c2V1cCBoYXBwZW5lZCBvbiAubGctaXRlbSBvciBsZy1vdXRlclxyXG4gICAgICAgICAgICAgICAgdGhpcy5vdXRlci5vbignbW91c2Vkb3duLmxnJywgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0ID0gJExHKGUudGFyZ2V0KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMuaXNTbGlkZUVsZW1lbnQodGFyZ2V0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb3VzZWRvd24gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW91c2Vkb3duID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm91dGVyLm9uKCdtb3VzZW1vdmUubGcnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbW91c2Vkb3duID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHRoaXMub3V0ZXIub24oJ21vdXNldXAubGcnLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0YXJnZXQgPSAkTEcoZS50YXJnZXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChfdGhpcy5pc1NsaWRlRWxlbWVudCh0YXJnZXQpICYmIG1vdXNlZG93bikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIV90aGlzLm91dGVyLmhhc0NsYXNzKCdsZy1kcmFnZ2luZycpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5jbG9zZUdhbGxlcnkoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDbG9zZSBsaWdodEdhbGxlcnkgaWYgaXQgaXMgb3BlbmVkLlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIElmIGNsb3NhYmxlIGlzIGZhbHNlIGluIHRoZSBzZXR0aW5ncywgeW91IG5lZWQgdG8gcGFzcyB0cnVlIHZpYSBjbG9zZUdhbGxlcnkgbWV0aG9kIHRvIGZvcmNlIGNsb3NlIGdhbGxlcnlcclxuICAgICAgICAgKiBAcmV0dXJuIHJldHVybnMgdGhlIGVzdGltYXRlZCB0aW1lIHRvIGNsb3NlIGdhbGxlcnkgY29tcGxldGVseSBpbmNsdWRpbmcgdGhlIGNsb3NlIGFuaW1hdGlvbiBkdXJhdGlvblxyXG4gICAgICAgICAqIEBjYXRlZ29yeSBsR1B1YmxpY01ldGhvZHNcclxuICAgICAgICAgKiBAZXhhbXBsZVxyXG4gICAgICAgICAqICBjb25zdCBwbHVnaW4gPSBsaWdodEdhbGxlcnkoKTtcclxuICAgICAgICAgKiAgcGx1Z2luLmNsb3NlR2FsbGVyeSgpO1xyXG4gICAgICAgICAqXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgTGlnaHRHYWxsZXJ5LnByb3RvdHlwZS5jbG9zZUdhbGxlcnkgPSBmdW5jdGlvbiAoZm9yY2UpIHtcclxuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmxnT3BlbmVkIHx8ICghdGhpcy5zZXR0aW5ncy5jbG9zYWJsZSAmJiAhZm9yY2UpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLkxHZWwudHJpZ2dlcihsR0V2ZW50cy5iZWZvcmVDbG9zZSk7XHJcbiAgICAgICAgICAgICRMRyh3aW5kb3cpLnNjcm9sbFRvcCh0aGlzLnByZXZTY3JvbGxUb3ApO1xyXG4gICAgICAgICAgICB2YXIgY3VycmVudEl0ZW0gPSB0aGlzLml0ZW1zW3RoaXMuaW5kZXhdO1xyXG4gICAgICAgICAgICB2YXIgdHJhbnNmb3JtO1xyXG4gICAgICAgICAgICBpZiAodGhpcy56b29tRnJvbU9yaWdpbiAmJiBjdXJyZW50SXRlbSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIF9hID0gdGhpcy5tZWRpYUNvbnRhaW5lclBvc2l0aW9uLCB0b3BfNCA9IF9hLnRvcCwgYm90dG9tID0gX2EuYm90dG9tO1xyXG4gICAgICAgICAgICAgICAgdmFyIF9iID0gdGhpcy5nYWxsZXJ5SXRlbXNbdGhpcy5pbmRleF0sIF9fc2xpZGVWaWRlb0luZm8gPSBfYi5fX3NsaWRlVmlkZW9JbmZvLCBwb3N0ZXIgPSBfYi5wb3N0ZXI7XHJcbiAgICAgICAgICAgICAgICB2YXIgaW1hZ2VTaXplID0gdXRpbHMuZ2V0U2l6ZShjdXJyZW50SXRlbSwgdGhpcy5vdXRlciwgdG9wXzQgKyBib3R0b20sIF9fc2xpZGVWaWRlb0luZm8gJiYgcG9zdGVyICYmIHRoaXMuc2V0dGluZ3MudmlkZW9NYXhTaXplKTtcclxuICAgICAgICAgICAgICAgIHRyYW5zZm9ybSA9IHV0aWxzLmdldFRyYW5zZm9ybShjdXJyZW50SXRlbSwgdGhpcy5vdXRlciwgdG9wXzQsIGJvdHRvbSwgaW1hZ2VTaXplKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy56b29tRnJvbU9yaWdpbiAmJiB0cmFuc2Zvcm0pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMub3V0ZXIuYWRkQ2xhc3MoJ2xnLWNsb3NpbmcgbGctem9vbS1mcm9tLWltYWdlJyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmdldFNsaWRlSXRlbSh0aGlzLmluZGV4KVxyXG4gICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnbGctc3RhcnQtZW5kLXByb2dyZXNzJylcclxuICAgICAgICAgICAgICAgICAgICAuY3NzKCd0cmFuc2l0aW9uLWR1cmF0aW9uJywgdGhpcy5zZXR0aW5ncy5zdGFydEFuaW1hdGlvbkR1cmF0aW9uICsgJ21zJylcclxuICAgICAgICAgICAgICAgICAgICAuY3NzKCd0cmFuc2Zvcm0nLCB0cmFuc2Zvcm0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vdXRlci5hZGRDbGFzcygnbGctaGlkZS1pdGVtcycpO1xyXG4gICAgICAgICAgICAgICAgLy8gbGctem9vbS1mcm9tLWltYWdlIGlzIHVzZWQgZm9yIHNldHRpbmcgdGhlIG9wYWNpdHkgdG8gMSBpZiB6b29tRnJvbU9yaWdpbiBpcyB0cnVlXHJcbiAgICAgICAgICAgICAgICAvLyBJZiB0aGUgY2xvc2luZyBpdGVtIGRvZXNuJ3QgaGF2ZSB0aGUgbGctc2l6ZSBhdHRyaWJ1dGUsIHJlbW92ZSB0aGlzIGNsYXNzIHRvIGF2b2lkIHRoZSBjbG9zaW5nIGNzcyBjb25mbGljdHNcclxuICAgICAgICAgICAgICAgIHRoaXMub3V0ZXIucmVtb3ZlQ2xhc3MoJ2xnLXpvb20tZnJvbS1pbWFnZScpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIFVuYmluZCBhbGwgZXZlbnRzIGFkZGVkIGJ5IGxpZ2h0R2FsbGVyeVxyXG4gICAgICAgICAgICAvLyBAdG9kb1xyXG4gICAgICAgICAgICAvL3RoaXMuJGVsLm9mZignLmxnLnRtJyk7XHJcbiAgICAgICAgICAgIHRoaXMuZGVzdHJveU1vZHVsZXMoKTtcclxuICAgICAgICAgICAgdGhpcy5sR2FsbGVyeU9uID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuaXNEdW1teUltYWdlUmVtb3ZlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLnpvb21Gcm9tT3JpZ2luID0gdGhpcy5zZXR0aW5ncy56b29tRnJvbU9yaWdpbjtcclxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuaGlkZUJhclRpbWVvdXQpO1xyXG4gICAgICAgICAgICB0aGlzLmhpZGVCYXJUaW1lb3V0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICRMRygnaHRtbCcpLnJlbW92ZUNsYXNzKCdsZy1vbicpO1xyXG4gICAgICAgICAgICB0aGlzLm91dGVyLnJlbW92ZUNsYXNzKCdsZy12aXNpYmxlIGxnLWNvbXBvbmVudHMtb3BlbicpO1xyXG4gICAgICAgICAgICAvLyBSZXNldHRpbmcgb3BhY2l0eSB0byAwIGlzZCByZXF1aXJlZCBhcyAgdmVydGljYWwgc3dpcGUgdG8gY2xvc2UgZnVuY3Rpb24gYWRkcyBpbmxpbmUgb3BhY2l0eS5cclxuICAgICAgICAgICAgdGhpcy4kYmFja2Ryb3AucmVtb3ZlQ2xhc3MoJ2luJykuY3NzKCdvcGFjaXR5JywgMCk7XHJcbiAgICAgICAgICAgIHZhciByZW1vdmVUaW1lb3V0ID0gdGhpcy56b29tRnJvbU9yaWdpbiAmJiB0cmFuc2Zvcm1cclxuICAgICAgICAgICAgICAgID8gTWF0aC5tYXgodGhpcy5zZXR0aW5ncy5zdGFydEFuaW1hdGlvbkR1cmF0aW9uLCB0aGlzLnNldHRpbmdzLmJhY2tkcm9wRHVyYXRpb24pXHJcbiAgICAgICAgICAgICAgICA6IHRoaXMuc2V0dGluZ3MuYmFja2Ryb3BEdXJhdGlvbjtcclxuICAgICAgICAgICAgdGhpcy4kY29udGFpbmVyLnJlbW92ZUNsYXNzKCdsZy1zaG93LWluJyk7XHJcbiAgICAgICAgICAgIC8vIE9uY2UgdGhlIGNsb3NpZ24gYW5pbWF0aW9uIGlzIGNvbXBsZXRlZCBhbmQgZ2FsbGVyeSBpcyBpbnZpc2libGVcclxuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMuem9vbUZyb21PcmlnaW4gJiYgdHJhbnNmb3JtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMub3V0ZXIucmVtb3ZlQ2xhc3MoJ2xnLXpvb20tZnJvbS1pbWFnZScpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgX3RoaXMuJGNvbnRhaW5lci5yZW1vdmVDbGFzcygnbGctc2hvdycpO1xyXG4gICAgICAgICAgICAgICAgLy8gTmVlZCB0byByZW1vdmUgaW5saW5lIG9wYWNpdHkgYXMgaXQgaXMgdXNlZCBpbiB0aGUgc3R5bGVzaGVldCBhcyB3ZWxsXHJcbiAgICAgICAgICAgICAgICBfdGhpcy4kYmFja2Ryb3BcclxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignc3R5bGUnKVxyXG4gICAgICAgICAgICAgICAgICAgIC5jc3MoJ3RyYW5zaXRpb24tZHVyYXRpb24nLCBfdGhpcy5zZXR0aW5ncy5iYWNrZHJvcER1cmF0aW9uICsgJ21zJyk7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5vdXRlci5yZW1vdmVDbGFzcyhcImxnLWNsb3NpbmcgXCIgKyBfdGhpcy5zZXR0aW5ncy5zdGFydENsYXNzKTtcclxuICAgICAgICAgICAgICAgIF90aGlzLmdldFNsaWRlSXRlbShfdGhpcy5pbmRleCkucmVtb3ZlQ2xhc3MoJ2xnLXN0YXJ0LWVuZC1wcm9ncmVzcycpO1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuJGlubmVyLmVtcHR5KCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMubGdPcGVuZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5MR2VsLnRyaWdnZXIobEdFdmVudHMuYWZ0ZXJDbG9zZSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZTogX3RoaXMsXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMub3V0ZXIuZ2V0KCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5vdXRlci5nZXQoKS5ibHVyKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5sZ09wZW5lZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9LCByZW1vdmVUaW1lb3V0ICsgMTAwKTtcclxuICAgICAgICAgICAgcmV0dXJuIHJlbW92ZVRpbWVvdXQgKyAxMDA7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBMaWdodEdhbGxlcnkucHJvdG90eXBlLmluaXRNb2R1bGVzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0aGlzLnBsdWdpbnMuZm9yRWFjaChmdW5jdGlvbiAobW9kdWxlKSB7XHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgIG1vZHVsZS5pbml0KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwibGlnaHRHYWxsZXJ5Oi0gbWFrZSBzdXJlIGxpZ2h0R2FsbGVyeSBtb2R1bGUgaXMgcHJvcGVybHkgaW5pdGlhdGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIExpZ2h0R2FsbGVyeS5wcm90b3R5cGUuZGVzdHJveU1vZHVsZXMgPSBmdW5jdGlvbiAoZGVzdHJveSkge1xyXG4gICAgICAgICAgICB0aGlzLnBsdWdpbnMuZm9yRWFjaChmdW5jdGlvbiAobW9kdWxlKSB7XHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkZXN0cm95KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZHVsZS5kZXN0cm95KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2R1bGUuY2xvc2VHYWxsZXJ5ICYmIG1vZHVsZS5jbG9zZUdhbGxlcnkoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwibGlnaHRHYWxsZXJ5Oi0gbWFrZSBzdXJlIGxpZ2h0R2FsbGVyeSBtb2R1bGUgaXMgcHJvcGVybHkgZGVzdHJveWVkXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFJlZnJlc2ggbGlnaHRHYWxsZXJ5IHdpdGggbmV3IHNldCBvZiBjaGlsZHJlbi5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBUaGlzIGlzIHVzZWZ1bCB0byB1cGRhdGUgdGhlIGdhbGxlcnkgd2hlbiB0aGUgY2hpbGQgZWxlbWVudHMgYXJlIGNoYW5nZWQgd2l0aG91dCBjYWxsaW5nIGRlc3Ryb3kgbWV0aG9kLlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogSWYgeW91IGFyZSB1c2luZyBkeW5hbWljIG1vZGUsIHlvdSBjYW4gcGFzcyB0aGUgbW9kaWZpZWQgYXJyYXkgb2YgZHluYW1pY0VsIGFzIHRoZSBmaXJzdCBwYXJhbWV0ZXIgdG8gcmVmcmVzaCB0aGUgZHluYW1pYyBnYWxsZXJ5XHJcbiAgICAgICAgICogQHNlZSA8YSBocmVmPVwiL2RlbW9zL2R5bmFtaWMtbW9kZS9cIj5EZW1vPC9hPlxyXG4gICAgICAgICAqIEBjYXRlZ29yeSBsR1B1YmxpY01ldGhvZHNcclxuICAgICAgICAgKiBAZXhhbXBsZVxyXG4gICAgICAgICAqICBjb25zdCBwbHVnaW4gPSBsaWdodEdhbGxlcnkoKTtcclxuICAgICAgICAgKiAgLy8gRGVsZXRlIG9yIGFkZCBjaGlsZHJlbiwgdGhlbiBjYWxsXHJcbiAgICAgICAgICogIHBsdWdpbi5yZWZyZXNoKCk7XHJcbiAgICAgICAgICpcclxuICAgICAgICAgKi9cclxuICAgICAgICBMaWdodEdhbGxlcnkucHJvdG90eXBlLnJlZnJlc2ggPSBmdW5jdGlvbiAoZ2FsbGVyeUl0ZW1zKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5zZXR0aW5ncy5keW5hbWljKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmludmFsaWRhdGVJdGVtcygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChnYWxsZXJ5SXRlbXMpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZ2FsbGVyeUl0ZW1zID0gZ2FsbGVyeUl0ZW1zO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5nYWxsZXJ5SXRlbXMgPSB0aGlzLmdldEl0ZW1zKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy51cGRhdGVDb250cm9scygpO1xyXG4gICAgICAgICAgICB0aGlzLm9wZW5HYWxsZXJ5T25JdGVtQ2xpY2soKTtcclxuICAgICAgICAgICAgdGhpcy5MR2VsLnRyaWdnZXIobEdFdmVudHMudXBkYXRlU2xpZGVzKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIExpZ2h0R2FsbGVyeS5wcm90b3R5cGUudXBkYXRlQ29udHJvbHMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYWRkU2xpZGVWaWRlb0luZm8odGhpcy5nYWxsZXJ5SXRlbXMpO1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUNvdW50ZXJUb3RhbCgpO1xyXG4gICAgICAgICAgICB0aGlzLm1hbmFnZVNpbmdsZVNsaWRlQ2xhc3NOYW1lKCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBEZXN0cm95IGxpZ2h0R2FsbGVyeS5cclxuICAgICAgICAgKiBEZXN0cm95IGxpZ2h0R2FsbGVyeSBhbmQgaXRzIHBsdWdpbiBpbnN0YW5jZXMgY29tcGxldGVseVxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFRoaXMgbWV0aG9kIGFsc28gY2FsbHMgQ2xvc2VHYWxsZXJ5IGZ1bmN0aW9uIGludGVybmFsbHkuIFJldHVybnMgdGhlIHRpbWUgdGFrZXMgdG8gY29tcGxldGVseSBjbG9zZSBhbmQgZGVzdHJveSB0aGUgaW5zdGFuY2UuXHJcbiAgICAgICAgICogSW4gY2FzZSBpZiB5b3Ugd2FudCB0byByZS1pbml0aWFsaXplIGxpZ2h0R2FsbGVyeSByaWdodCBhZnRlciBkZXN0cm95aW5nIGl0LCBpbml0aWFsaXplIGl0IG9ubHkgb25jZSB0aGUgZGVzdHJveSBwcm9jZXNzIGlzIGNvbXBsZXRlZC5cclxuICAgICAgICAgKiBZb3UgY2FuIHVzZSByZWZyZXNoIG1ldGhvZCBtb3N0IG9mIHRoZSB0aW1lcy5cclxuICAgICAgICAgKiBAY2F0ZWdvcnkgbEdQdWJsaWNNZXRob2RzXHJcbiAgICAgICAgICogQGV4YW1wbGVcclxuICAgICAgICAgKiAgY29uc3QgcGx1Z2luID0gbGlnaHRHYWxsZXJ5KCk7XHJcbiAgICAgICAgICogIHBsdWdpbi5kZXN0cm95KCk7XHJcbiAgICAgICAgICpcclxuICAgICAgICAgKi9cclxuICAgICAgICBMaWdodEdhbGxlcnkucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgICAgIHZhciBjbG9zZVRpbWVvdXQgPSB0aGlzLmNsb3NlR2FsbGVyeSh0cnVlKTtcclxuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5kZXN0cm95TW9kdWxlcyh0cnVlKTtcclxuICAgICAgICAgICAgICAgIGlmICghX3RoaXMuc2V0dGluZ3MuZHluYW1pYykge1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmludmFsaWRhdGVJdGVtcygpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgJExHKHdpbmRvdykub2ZmKFwiLmxnLmdsb2JhbFwiICsgX3RoaXMubGdJZCk7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5MR2VsLm9mZignLmxnJyk7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy4kY29udGFpbmVyLnJlbW92ZSgpO1xyXG4gICAgICAgICAgICB9LCBjbG9zZVRpbWVvdXQpO1xyXG4gICAgICAgICAgICByZXR1cm4gY2xvc2VUaW1lb3V0O1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIExpZ2h0R2FsbGVyeTtcclxuICAgIH0oKSk7XG5cbiAgICBmdW5jdGlvbiBsaWdodEdhbGxlcnkoZWwsIG9wdGlvbnMpIHtcclxuICAgICAgICByZXR1cm4gbmV3IExpZ2h0R2FsbGVyeShlbCwgb3B0aW9ucyk7XHJcbiAgICB9XG5cbiAgICByZXR1cm4gbGlnaHRHYWxsZXJ5O1xuXG59KSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGlnaHRnYWxsZXJ5LnVtZC5qcy5tYXBcbiIsIi8qIVxuICogbGlnaHRnYWxsZXJ5IHwgMi40LjAtYmV0YS4wIHwgRGVjZW1iZXIgMTJ0aCAyMDIxXG4gKiBodHRwOi8vd3d3LmxpZ2h0Z2FsbGVyeWpzLmNvbS9cbiAqIENvcHlyaWdodCAoYykgMjAyMCBTYWNoaW4gTmVyYXZhdGg7XG4gKiBAbGljZW5zZSBHUEx2M1xuICovXG5cbihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCkgOlxuICAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShmYWN0b3J5KSA6XG4gICAgKGdsb2JhbCA9IHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbFRoaXMgOiBnbG9iYWwgfHwgc2VsZiwgZ2xvYmFsLmxnVGh1bWJuYWlsID0gZmFjdG9yeSgpKTtcbn0odGhpcywgKGZ1bmN0aW9uICgpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLyohICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAgICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cclxuXHJcbiAgICBQZXJtaXNzaW9uIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBhbmQvb3IgZGlzdHJpYnV0ZSB0aGlzIHNvZnR3YXJlIGZvciBhbnlcclxuICAgIHB1cnBvc2Ugd2l0aCBvciB3aXRob3V0IGZlZSBpcyBoZXJlYnkgZ3JhbnRlZC5cclxuXHJcbiAgICBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiIEFORCBUSEUgQVVUSE9SIERJU0NMQUlNUyBBTEwgV0FSUkFOVElFUyBXSVRIXHJcbiAgICBSRUdBUkQgVE8gVEhJUyBTT0ZUV0FSRSBJTkNMVURJTkcgQUxMIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFlcclxuICAgIEFORCBGSVRORVNTLiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SIEJFIExJQUJMRSBGT1IgQU5ZIFNQRUNJQUwsIERJUkVDVCxcclxuICAgIElORElSRUNULCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgT1IgQU5ZIERBTUFHRVMgV0hBVFNPRVZFUiBSRVNVTFRJTkcgRlJPTVxyXG4gICAgTE9TUyBPRiBVU0UsIERBVEEgT1IgUFJPRklUUywgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIE5FR0xJR0VOQ0UgT1JcclxuICAgIE9USEVSIFRPUlRJT1VTIEFDVElPTiwgQVJJU0lORyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBVU0UgT1JcclxuICAgIFBFUkZPUk1BTkNFIE9GIFRISVMgU09GVFdBUkUuXHJcbiAgICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xyXG5cclxuICAgIHZhciBfX2Fzc2lnbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiBfX2Fzc2lnbih0KSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSkgdFtwXSA9IHNbcF07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHQ7XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuICAgIH07XG5cbiAgICB2YXIgdGh1bWJuYWlsc1NldHRpbmdzID0ge1xyXG4gICAgICAgIHRodW1ibmFpbDogdHJ1ZSxcclxuICAgICAgICBhbmltYXRlVGh1bWI6IHRydWUsXHJcbiAgICAgICAgY3VycmVudFBhZ2VyUG9zaXRpb246ICdtaWRkbGUnLFxyXG4gICAgICAgIGFsaWduVGh1bWJuYWlsczogJ21pZGRsZScsXHJcbiAgICAgICAgdGh1bWJXaWR0aDogMTAwLFxyXG4gICAgICAgIHRodW1iSGVpZ2h0OiAnODBweCcsXHJcbiAgICAgICAgdGh1bWJNYXJnaW46IDUsXHJcbiAgICAgICAgYXBwZW5kVGh1bWJuYWlsc1RvOiAnLmxnLWNvbXBvbmVudHMnLFxyXG4gICAgICAgIHRvZ2dsZVRodW1iOiBmYWxzZSxcclxuICAgICAgICBlbmFibGVUaHVtYkRyYWc6IHRydWUsXHJcbiAgICAgICAgZW5hYmxlVGh1bWJTd2lwZTogdHJ1ZSxcclxuICAgICAgICB0aHVtYm5haWxTd2lwZVRocmVzaG9sZDogMTAsXHJcbiAgICAgICAgbG9hZFlvdVR1YmVUaHVtYm5haWw6IHRydWUsXHJcbiAgICAgICAgeW91VHViZVRodW1iU2l6ZTogMSxcclxuICAgICAgICB0aHVtYm5haWxQbHVnaW5TdHJpbmdzOiB7IHRvZ2dsZVRodW1ibmFpbHM6ICdUb2dnbGUgdGh1bWJuYWlscycgfSxcclxuICAgIH07XG5cbiAgICAvKipcclxuICAgICAqIExpc3Qgb2YgbGlnaHRHYWxsZXJ5IGV2ZW50c1xyXG4gICAgICogQWxsIGV2ZW50cyBzaG91bGQgYmUgZG9jdW1lbnRlZCBoZXJlXHJcbiAgICAgKiBCZWxvdyBpbnRlcmZhY2VzIGFyZSB1c2VkIHRvIGJ1aWxkIHRoZSB3ZWJzaXRlIGRvY3VtZW50YXRpb25zXHJcbiAgICAgKiAqL1xyXG4gICAgdmFyIGxHRXZlbnRzID0ge1xyXG4gICAgICAgIGFmdGVyQXBwZW5kU2xpZGU6ICdsZ0FmdGVyQXBwZW5kU2xpZGUnLFxyXG4gICAgICAgIGluaXQ6ICdsZ0luaXQnLFxyXG4gICAgICAgIGhhc1ZpZGVvOiAnbGdIYXNWaWRlbycsXHJcbiAgICAgICAgY29udGFpbmVyUmVzaXplOiAnbGdDb250YWluZXJSZXNpemUnLFxyXG4gICAgICAgIHVwZGF0ZVNsaWRlczogJ2xnVXBkYXRlU2xpZGVzJyxcclxuICAgICAgICBhZnRlckFwcGVuZFN1Ykh0bWw6ICdsZ0FmdGVyQXBwZW5kU3ViSHRtbCcsXHJcbiAgICAgICAgYmVmb3JlT3BlbjogJ2xnQmVmb3JlT3BlbicsXHJcbiAgICAgICAgYWZ0ZXJPcGVuOiAnbGdBZnRlck9wZW4nLFxyXG4gICAgICAgIHNsaWRlSXRlbUxvYWQ6ICdsZ1NsaWRlSXRlbUxvYWQnLFxyXG4gICAgICAgIGJlZm9yZVNsaWRlOiAnbGdCZWZvcmVTbGlkZScsXHJcbiAgICAgICAgYWZ0ZXJTbGlkZTogJ2xnQWZ0ZXJTbGlkZScsXHJcbiAgICAgICAgcG9zdGVyQ2xpY2s6ICdsZ1Bvc3RlckNsaWNrJyxcclxuICAgICAgICBkcmFnU3RhcnQ6ICdsZ0RyYWdTdGFydCcsXHJcbiAgICAgICAgZHJhZ01vdmU6ICdsZ0RyYWdNb3ZlJyxcclxuICAgICAgICBkcmFnRW5kOiAnbGdEcmFnRW5kJyxcclxuICAgICAgICBiZWZvcmVOZXh0U2xpZGU6ICdsZ0JlZm9yZU5leHRTbGlkZScsXHJcbiAgICAgICAgYmVmb3JlUHJldlNsaWRlOiAnbGdCZWZvcmVQcmV2U2xpZGUnLFxyXG4gICAgICAgIGJlZm9yZUNsb3NlOiAnbGdCZWZvcmVDbG9zZScsXHJcbiAgICAgICAgYWZ0ZXJDbG9zZTogJ2xnQWZ0ZXJDbG9zZScsXHJcbiAgICAgICAgcm90YXRlTGVmdDogJ2xnUm90YXRlTGVmdCcsXHJcbiAgICAgICAgcm90YXRlUmlnaHQ6ICdsZ1JvdGF0ZVJpZ2h0JyxcclxuICAgICAgICBmbGlwSG9yaXpvbnRhbDogJ2xnRmxpcEhvcml6b250YWwnLFxyXG4gICAgICAgIGZsaXBWZXJ0aWNhbDogJ2xnRmxpcFZlcnRpY2FsJyxcclxuICAgICAgICBhdXRvcGxheTogJ2xnQXV0b3BsYXknLFxyXG4gICAgICAgIGF1dG9wbGF5U3RhcnQ6ICdsZ0F1dG9wbGF5U3RhcnQnLFxyXG4gICAgICAgIGF1dG9wbGF5U3RvcDogJ2xnQXV0b3BsYXlTdG9wJyxcclxuICAgIH07XG5cbiAgICB2YXIgVGh1bWJuYWlsID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIFRodW1ibmFpbChpbnN0YW5jZSwgJExHKSB7XHJcbiAgICAgICAgICAgIHRoaXMudGh1bWJPdXRlcldpZHRoID0gMDtcclxuICAgICAgICAgICAgdGhpcy50aHVtYlRvdGFsV2lkdGggPSAwO1xyXG4gICAgICAgICAgICB0aGlzLnRyYW5zbGF0ZVggPSAwO1xyXG4gICAgICAgICAgICB0aGlzLnRodW1iQ2xpY2thYmxlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIC8vIGdldCBsaWdodEdhbGxlcnkgY29yZSBwbHVnaW4gaW5zdGFuY2VcclxuICAgICAgICAgICAgdGhpcy5jb3JlID0gaW5zdGFuY2U7XHJcbiAgICAgICAgICAgIHRoaXMuJExHID0gJExHO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcbiAgICAgICAgVGh1bWJuYWlsLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAvLyBleHRlbmQgbW9kdWxlIGRlZmF1bHQgc2V0dGluZ3Mgd2l0aCBsaWdodEdhbGxlcnkgY29yZSBzZXR0aW5nc1xyXG4gICAgICAgICAgICB0aGlzLnNldHRpbmdzID0gX19hc3NpZ24oX19hc3NpZ24oe30sIHRodW1ibmFpbHNTZXR0aW5ncyksIHRoaXMuY29yZS5zZXR0aW5ncyk7XHJcbiAgICAgICAgICAgIHRoaXMudGh1bWJPdXRlcldpZHRoID0gMDtcclxuICAgICAgICAgICAgdGhpcy50aHVtYlRvdGFsV2lkdGggPVxyXG4gICAgICAgICAgICAgICAgdGhpcy5jb3JlLmdhbGxlcnlJdGVtcy5sZW5ndGggKlxyXG4gICAgICAgICAgICAgICAgICAgICh0aGlzLnNldHRpbmdzLnRodW1iV2lkdGggKyB0aGlzLnNldHRpbmdzLnRodW1iTWFyZ2luKTtcclxuICAgICAgICAgICAgLy8gVGh1bWJuYWlsIGFuaW1hdGlvbiB2YWx1ZVxyXG4gICAgICAgICAgICB0aGlzLnRyYW5zbGF0ZVggPSAwO1xyXG4gICAgICAgICAgICB0aGlzLnNldEFuaW1hdGVUaHVtYlN0eWxlcygpO1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuY29yZS5zZXR0aW5ncy5hbGxvd01lZGlhT3ZlcmxhcCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXR0aW5ncy50b2dnbGVUaHVtYiA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnNldHRpbmdzLnRodW1ibmFpbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5idWlsZCgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MuYW5pbWF0ZVRodW1iKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MuZW5hYmxlVGh1bWJEcmFnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW5hYmxlVGh1bWJEcmFnKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmVuYWJsZVRodW1iU3dpcGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbmFibGVUaHVtYlN3aXBlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudGh1bWJDbGlja2FibGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudGh1bWJDbGlja2FibGUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy50b2dnbGVUaHVtYkJhcigpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy50aHVtYktleVByZXNzKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIFRodW1ibmFpbC5wcm90b3R5cGUuYnVpbGQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0VGh1bWJNYXJrdXAoKTtcclxuICAgICAgICAgICAgdGhpcy5tYW5hZ2VBY3RpdmVDbGFzc09uU2xpZGVDaGFuZ2UoKTtcclxuICAgICAgICAgICAgdGhpcy4kbGdUaHVtYi5maXJzdCgpLm9uKCdjbGljay5sZyB0b3VjaGVuZC5sZycsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgJHRhcmdldCA9IF90aGlzLiRMRyhlLnRhcmdldCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoISR0YXJnZXQuaGFzQXR0cmlidXRlKCdkYXRhLWxnLWl0ZW0taWQnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIEluIElFOSBhbmQgYmVsbG93IHRvdWNoIGRvZXMgbm90IHN1cHBvcnRcclxuICAgICAgICAgICAgICAgICAgICAvLyBHbyB0byBzbGlkZSBpZiBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgY3NzIHRyYW5zaXRpb25zXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLnRodW1iQ2xpY2thYmxlICYmICFfdGhpcy5jb3JlLmxnQnVzeSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSBwYXJzZUludCgkdGFyZ2V0LmF0dHIoJ2RhdGEtbGctaXRlbS1pZCcpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuY29yZS5zbGlkZShpbmRleCwgZmFsc2UsIHRydWUsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LCA1MCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB0aGlzLmNvcmUuTEdlbC5vbihsR0V2ZW50cy5iZWZvcmVTbGlkZSArIFwiLnRodW1iXCIsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gZXZlbnQuZGV0YWlsLmluZGV4O1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuYW5pbWF0ZVRodW1iKGluZGV4KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHRoaXMuY29yZS5MR2VsLm9uKGxHRXZlbnRzLmJlZm9yZU9wZW4gKyBcIi50aHVtYlwiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy50aHVtYk91dGVyV2lkdGggPSBfdGhpcy5jb3JlLm91dGVyLmdldCgpLm9mZnNldFdpZHRoO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdGhpcy5jb3JlLkxHZWwub24obEdFdmVudHMudXBkYXRlU2xpZGVzICsgXCIudGh1bWJcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMucmVidWlsZFRodW1ibmFpbHMoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHRoaXMuY29yZS5MR2VsLm9uKGxHRXZlbnRzLmNvbnRhaW5lclJlc2l6ZSArIFwiLnRodW1iXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGlmICghX3RoaXMuY29yZS5sZ09wZW5lZClcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy50aHVtYk91dGVyV2lkdGggPSBfdGhpcy5jb3JlLm91dGVyLmdldCgpLm9mZnNldFdpZHRoO1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmFuaW1hdGVUaHVtYihfdGhpcy5jb3JlLmluZGV4KTtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy50aHVtYk91dGVyV2lkdGggPSBfdGhpcy5jb3JlLm91dGVyLmdldCgpLm9mZnNldFdpZHRoO1xyXG4gICAgICAgICAgICAgICAgfSwgNTApO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIFRodW1ibmFpbC5wcm90b3R5cGUuc2V0VGh1bWJNYXJrdXAgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciB0aHVtYk91dGVyQ2xhc3NOYW1lcyA9ICdsZy10aHVtYi1vdXRlciAnO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5hbGlnblRodW1ibmFpbHMpIHtcclxuICAgICAgICAgICAgICAgIHRodW1iT3V0ZXJDbGFzc05hbWVzICs9IFwibGctdGh1bWItYWxpZ24tXCIgKyB0aGlzLnNldHRpbmdzLmFsaWduVGh1bWJuYWlscztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgaHRtbCA9IFwiPGRpdiBjbGFzcz1cXFwiXCIgKyB0aHVtYk91dGVyQ2xhc3NOYW1lcyArIFwiXFxcIj5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcImxnLXRodW1iIGxnLWdyb3VwXFxcIj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICAgICAgPC9kaXY+XCI7XHJcbiAgICAgICAgICAgIHRoaXMuY29yZS5vdXRlci5hZGRDbGFzcygnbGctaGFzLXRodW1iJyk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmFwcGVuZFRodW1ibmFpbHNUbyA9PT0gJy5sZy1jb21wb25lbnRzJykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb3JlLiRsZ0NvbXBvbmVudHMuYXBwZW5kKGh0bWwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb3JlLm91dGVyLmFwcGVuZChodG1sKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLiR0aHVtYk91dGVyID0gdGhpcy5jb3JlLm91dGVyLmZpbmQoJy5sZy10aHVtYi1vdXRlcicpLmZpcnN0KCk7XHJcbiAgICAgICAgICAgIHRoaXMuJGxnVGh1bWIgPSB0aGlzLmNvcmUub3V0ZXIuZmluZCgnLmxnLXRodW1iJykuZmlyc3QoKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MuYW5pbWF0ZVRodW1iKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvcmUub3V0ZXJcclxuICAgICAgICAgICAgICAgICAgICAuZmluZCgnLmxnLXRodW1iJylcclxuICAgICAgICAgICAgICAgICAgICAuY3NzKCd0cmFuc2l0aW9uLWR1cmF0aW9uJywgdGhpcy5jb3JlLnNldHRpbmdzLnNwZWVkICsgJ21zJylcclxuICAgICAgICAgICAgICAgICAgICAuY3NzKCd3aWR0aCcsIHRoaXMudGh1bWJUb3RhbFdpZHRoICsgJ3B4JylcclxuICAgICAgICAgICAgICAgICAgICAuY3NzKCdwb3NpdGlvbicsICdyZWxhdGl2ZScpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuc2V0VGh1bWJJdGVtSHRtbCh0aGlzLmNvcmUuZ2FsbGVyeUl0ZW1zKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIFRodW1ibmFpbC5wcm90b3R5cGUuZW5hYmxlVGh1bWJEcmFnID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgICAgICB2YXIgdGh1bWJEcmFnVXRpbHMgPSB7XHJcbiAgICAgICAgICAgICAgICBjb3Jkczoge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0WDogMCxcclxuICAgICAgICAgICAgICAgICAgICBlbmRYOiAwLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGlzTW92ZWQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgbmV3VHJhbnNsYXRlWDogMCxcclxuICAgICAgICAgICAgICAgIHN0YXJ0VGltZTogbmV3IERhdGUoKSxcclxuICAgICAgICAgICAgICAgIGVuZFRpbWU6IG5ldyBEYXRlKCksXHJcbiAgICAgICAgICAgICAgICB0b3VjaE1vdmVUaW1lOiAwLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB2YXIgaXNEcmFnZ2luZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLiR0aHVtYk91dGVyLmFkZENsYXNzKCdsZy1ncmFiJyk7XHJcbiAgICAgICAgICAgIHRoaXMuY29yZS5vdXRlclxyXG4gICAgICAgICAgICAgICAgLmZpbmQoJy5sZy10aHVtYicpXHJcbiAgICAgICAgICAgICAgICAuZmlyc3QoKVxyXG4gICAgICAgICAgICAgICAgLm9uKCdtb3VzZWRvd24ubGcudGh1bWInLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLnRodW1iVG90YWxXaWR0aCA+IF90aGlzLnRodW1iT3V0ZXJXaWR0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGV4ZWN1dGUgb25seSBvbiAubGctb2JqZWN0XHJcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRodW1iRHJhZ1V0aWxzLmNvcmRzLnN0YXJ0WCA9IGUucGFnZVg7XHJcbiAgICAgICAgICAgICAgICAgICAgdGh1bWJEcmFnVXRpbHMuc3RhcnRUaW1lID0gbmV3IERhdGUoKTtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy50aHVtYkNsaWNrYWJsZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlzRHJhZ2dpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vICoqIEZpeCBmb3Igd2Via2l0IGN1cnNvciBpc3N1ZSBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9MjY3MjNcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5jb3JlLm91dGVyLmdldCgpLnNjcm9sbExlZnQgKz0gMTtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5jb3JlLm91dGVyLmdldCgpLnNjcm9sbExlZnQgLT0gMTtcclxuICAgICAgICAgICAgICAgICAgICAvLyAqXHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuJHRodW1iT3V0ZXJcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCdsZy1ncmFiJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCdsZy1ncmFiYmluZycpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdGhpcy4kTEcod2luZG93KS5vbihcIm1vdXNlbW92ZS5sZy50aHVtYi5nbG9iYWxcIiArIHRoaXMuY29yZS5sZ0lkLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFfdGhpcy5jb3JlLmxnT3BlbmVkKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIGlmIChpc0RyYWdnaW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGh1bWJEcmFnVXRpbHMuY29yZHMuZW5kWCA9IGUucGFnZVg7XHJcbiAgICAgICAgICAgICAgICAgICAgdGh1bWJEcmFnVXRpbHMgPSBfdGhpcy5vblRodW1iVG91Y2hNb3ZlKHRodW1iRHJhZ1V0aWxzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHRoaXMuJExHKHdpbmRvdykub24oXCJtb3VzZXVwLmxnLnRodW1iLmdsb2JhbFwiICsgdGhpcy5jb3JlLmxnSWQsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGlmICghX3RoaXMuY29yZS5sZ09wZW5lZClcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICBpZiAodGh1bWJEcmFnVXRpbHMuaXNNb3ZlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRodW1iRHJhZ1V0aWxzID0gX3RoaXMub25UaHVtYlRvdWNoRW5kKHRodW1iRHJhZ1V0aWxzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnRodW1iQ2xpY2thYmxlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChpc0RyYWdnaW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaXNEcmFnZ2luZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLiR0aHVtYk91dGVyLnJlbW92ZUNsYXNzKCdsZy1ncmFiYmluZycpLmFkZENsYXNzKCdsZy1ncmFiJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgVGh1bWJuYWlsLnByb3RvdHlwZS5lbmFibGVUaHVtYlN3aXBlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgICAgICB2YXIgdGh1bWJEcmFnVXRpbHMgPSB7XHJcbiAgICAgICAgICAgICAgICBjb3Jkczoge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0WDogMCxcclxuICAgICAgICAgICAgICAgICAgICBlbmRYOiAwLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGlzTW92ZWQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgbmV3VHJhbnNsYXRlWDogMCxcclxuICAgICAgICAgICAgICAgIHN0YXJ0VGltZTogbmV3IERhdGUoKSxcclxuICAgICAgICAgICAgICAgIGVuZFRpbWU6IG5ldyBEYXRlKCksXHJcbiAgICAgICAgICAgICAgICB0b3VjaE1vdmVUaW1lOiAwLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB0aGlzLiRsZ1RodW1iLm9uKCd0b3VjaHN0YXJ0LmxnJywgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChfdGhpcy50aHVtYlRvdGFsV2lkdGggPiBfdGhpcy50aHVtYk91dGVyV2lkdGgpIHtcclxuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGh1bWJEcmFnVXRpbHMuY29yZHMuc3RhcnRYID0gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VYO1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnRodW1iQ2xpY2thYmxlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgdGh1bWJEcmFnVXRpbHMuc3RhcnRUaW1lID0gbmV3IERhdGUoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHRoaXMuJGxnVGh1bWIub24oJ3RvdWNobW92ZS5sZycsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMudGh1bWJUb3RhbFdpZHRoID4gX3RoaXMudGh1bWJPdXRlcldpZHRoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRodW1iRHJhZ1V0aWxzLmNvcmRzLmVuZFggPSBlLnRhcmdldFRvdWNoZXNbMF0ucGFnZVg7XHJcbiAgICAgICAgICAgICAgICAgICAgdGh1bWJEcmFnVXRpbHMgPSBfdGhpcy5vblRodW1iVG91Y2hNb3ZlKHRodW1iRHJhZ1V0aWxzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHRoaXMuJGxnVGh1bWIub24oJ3RvdWNoZW5kLmxnJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRodW1iRHJhZ1V0aWxzLmlzTW92ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHVtYkRyYWdVdGlscyA9IF90aGlzLm9uVGh1bWJUb3VjaEVuZCh0aHVtYkRyYWdVdGlscyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy50aHVtYkNsaWNrYWJsZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLy8gUmVidWlsZCB0aHVtYm5haWxzXHJcbiAgICAgICAgVGh1bWJuYWlsLnByb3RvdHlwZS5yZWJ1aWxkVGh1bWJuYWlscyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAgICAgLy8gUmVtb3ZlIHRyYW5zaXRpb25zXHJcbiAgICAgICAgICAgIHRoaXMuJHRodW1iT3V0ZXIuYWRkQ2xhc3MoJ2xnLXJlYnVpbGRpbmctdGh1bWJuYWlscycpO1xyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLnRodW1iVG90YWxXaWR0aCA9XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuY29yZS5nYWxsZXJ5SXRlbXMubGVuZ3RoICpcclxuICAgICAgICAgICAgICAgICAgICAgICAgKF90aGlzLnNldHRpbmdzLnRodW1iV2lkdGggKyBfdGhpcy5zZXR0aW5ncy50aHVtYk1hcmdpbik7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy4kbGdUaHVtYi5jc3MoJ3dpZHRoJywgX3RoaXMudGh1bWJUb3RhbFdpZHRoICsgJ3B4Jyk7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy4kbGdUaHVtYi5lbXB0eSgpO1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuc2V0VGh1bWJJdGVtSHRtbChfdGhpcy5jb3JlLmdhbGxlcnlJdGVtcyk7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5hbmltYXRlVGh1bWIoX3RoaXMuY29yZS5pbmRleCk7XHJcbiAgICAgICAgICAgIH0sIDUwKTtcclxuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy4kdGh1bWJPdXRlci5yZW1vdmVDbGFzcygnbGctcmVidWlsZGluZy10aHVtYm5haWxzJyk7XHJcbiAgICAgICAgICAgIH0sIDIwMCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvLyBAdHMtY2hlY2tcclxuICAgICAgICBUaHVtYm5haWwucHJvdG90eXBlLnNldFRyYW5zbGF0ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICB0aGlzLiRsZ1RodW1iLmNzcygndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZTNkKC0nICsgdmFsdWUgKyAncHgsIDBweCwgMHB4KScpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgVGh1bWJuYWlsLnByb3RvdHlwZS5nZXRQb3NzaWJsZVRyYW5zZm9ybVggPSBmdW5jdGlvbiAobGVmdCkge1xyXG4gICAgICAgICAgICBpZiAobGVmdCA+IHRoaXMudGh1bWJUb3RhbFdpZHRoIC0gdGhpcy50aHVtYk91dGVyV2lkdGgpIHtcclxuICAgICAgICAgICAgICAgIGxlZnQgPSB0aGlzLnRodW1iVG90YWxXaWR0aCAtIHRoaXMudGh1bWJPdXRlcldpZHRoO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChsZWZ0IDwgMCkge1xyXG4gICAgICAgICAgICAgICAgbGVmdCA9IDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGxlZnQ7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBUaHVtYm5haWwucHJvdG90eXBlLmFuaW1hdGVUaHVtYiA9IGZ1bmN0aW9uIChpbmRleCkge1xyXG4gICAgICAgICAgICB0aGlzLiRsZ1RodW1iLmNzcygndHJhbnNpdGlvbi1kdXJhdGlvbicsIHRoaXMuY29yZS5zZXR0aW5ncy5zcGVlZCArICdtcycpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5hbmltYXRlVGh1bWIpIHtcclxuICAgICAgICAgICAgICAgIHZhciBwb3NpdGlvbiA9IDA7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuc2V0dGluZ3MuY3VycmVudFBhZ2VyUG9zaXRpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdsZWZ0JzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb24gPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdtaWRkbGUnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbiA9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRodW1iT3V0ZXJXaWR0aCAvIDIgLSB0aGlzLnNldHRpbmdzLnRodW1iV2lkdGggLyAyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdyaWdodCc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uID0gdGhpcy50aHVtYk91dGVyV2lkdGggLSB0aGlzLnNldHRpbmdzLnRodW1iV2lkdGg7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRyYW5zbGF0ZVggPVxyXG4gICAgICAgICAgICAgICAgICAgICh0aGlzLnNldHRpbmdzLnRodW1iV2lkdGggKyB0aGlzLnNldHRpbmdzLnRodW1iTWFyZ2luKSAqIGluZGV4IC1cclxuICAgICAgICAgICAgICAgICAgICAgICAgMSAtXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudHJhbnNsYXRlWCA+IHRoaXMudGh1bWJUb3RhbFdpZHRoIC0gdGhpcy50aHVtYk91dGVyV2lkdGgpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRyYW5zbGF0ZVggPSB0aGlzLnRodW1iVG90YWxXaWR0aCAtIHRoaXMudGh1bWJPdXRlcldpZHRoO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudHJhbnNsYXRlWCA8IDApIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRyYW5zbGF0ZVggPSAwO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRUcmFuc2xhdGUodGhpcy50cmFuc2xhdGVYKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgVGh1bWJuYWlsLnByb3RvdHlwZS5vblRodW1iVG91Y2hNb3ZlID0gZnVuY3Rpb24gKHRodW1iRHJhZ1V0aWxzKSB7XHJcbiAgICAgICAgICAgIHRodW1iRHJhZ1V0aWxzLm5ld1RyYW5zbGF0ZVggPSB0aGlzLnRyYW5zbGF0ZVg7XHJcbiAgICAgICAgICAgIHRodW1iRHJhZ1V0aWxzLmlzTW92ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aHVtYkRyYWdVdGlscy50b3VjaE1vdmVUaW1lID0gbmV3IERhdGUoKS52YWx1ZU9mKCk7XHJcbiAgICAgICAgICAgIHRodW1iRHJhZ1V0aWxzLm5ld1RyYW5zbGF0ZVggLT1cclxuICAgICAgICAgICAgICAgIHRodW1iRHJhZ1V0aWxzLmNvcmRzLmVuZFggLSB0aHVtYkRyYWdVdGlscy5jb3Jkcy5zdGFydFg7XHJcbiAgICAgICAgICAgIHRodW1iRHJhZ1V0aWxzLm5ld1RyYW5zbGF0ZVggPSB0aGlzLmdldFBvc3NpYmxlVHJhbnNmb3JtWCh0aHVtYkRyYWdVdGlscy5uZXdUcmFuc2xhdGVYKTtcclxuICAgICAgICAgICAgLy8gbW92ZSBjdXJyZW50IHNsaWRlXHJcbiAgICAgICAgICAgIHRoaXMuc2V0VHJhbnNsYXRlKHRodW1iRHJhZ1V0aWxzLm5ld1RyYW5zbGF0ZVgpO1xyXG4gICAgICAgICAgICB0aGlzLiR0aHVtYk91dGVyLmFkZENsYXNzKCdsZy1kcmFnZ2luZycpO1xyXG4gICAgICAgICAgICByZXR1cm4gdGh1bWJEcmFnVXRpbHM7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBUaHVtYm5haWwucHJvdG90eXBlLm9uVGh1bWJUb3VjaEVuZCA9IGZ1bmN0aW9uICh0aHVtYkRyYWdVdGlscykge1xyXG4gICAgICAgICAgICB0aHVtYkRyYWdVdGlscy5pc01vdmVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRodW1iRHJhZ1V0aWxzLmVuZFRpbWUgPSBuZXcgRGF0ZSgpO1xyXG4gICAgICAgICAgICB0aGlzLiR0aHVtYk91dGVyLnJlbW92ZUNsYXNzKCdsZy1kcmFnZ2luZycpO1xyXG4gICAgICAgICAgICB2YXIgdG91Y2hEdXJhdGlvbiA9IHRodW1iRHJhZ1V0aWxzLmVuZFRpbWUudmFsdWVPZigpIC1cclxuICAgICAgICAgICAgICAgIHRodW1iRHJhZ1V0aWxzLnN0YXJ0VGltZS52YWx1ZU9mKCk7XHJcbiAgICAgICAgICAgIHZhciBkaXN0YW5jZVhuZXcgPSB0aHVtYkRyYWdVdGlscy5jb3Jkcy5lbmRYIC0gdGh1bWJEcmFnVXRpbHMuY29yZHMuc3RhcnRYO1xyXG4gICAgICAgICAgICB2YXIgc3BlZWRYID0gTWF0aC5hYnMoZGlzdGFuY2VYbmV3KSAvIHRvdWNoRHVyYXRpb247XHJcbiAgICAgICAgICAgIC8vIFNvbWUgbWFnaWNhbCBudW1iZXJzXHJcbiAgICAgICAgICAgIC8vIENhbiBiZSBpbXByb3ZlZFxyXG4gICAgICAgICAgICBpZiAoc3BlZWRYID4gMC4xNSAmJlxyXG4gICAgICAgICAgICAgICAgdGh1bWJEcmFnVXRpbHMuZW5kVGltZS52YWx1ZU9mKCkgLSB0aHVtYkRyYWdVdGlscy50b3VjaE1vdmVUaW1lIDwgMzApIHtcclxuICAgICAgICAgICAgICAgIHNwZWVkWCArPSAxO1xyXG4gICAgICAgICAgICAgICAgaWYgKHNwZWVkWCA+IDIpIHtcclxuICAgICAgICAgICAgICAgICAgICBzcGVlZFggKz0gMTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHNwZWVkWCA9XHJcbiAgICAgICAgICAgICAgICAgICAgc3BlZWRYICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3BlZWRYICogKE1hdGguYWJzKGRpc3RhbmNlWG5ldykgLyB0aGlzLnRodW1iT3V0ZXJXaWR0aCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLiRsZ1RodW1iLmNzcygndHJhbnNpdGlvbi1kdXJhdGlvbicsIE1hdGgubWluKHNwZWVkWCAtIDEsIDIpICsgJ3NldHRpbmdzJyk7XHJcbiAgICAgICAgICAgICAgICBkaXN0YW5jZVhuZXcgPSBkaXN0YW5jZVhuZXcgKiBzcGVlZFg7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRyYW5zbGF0ZVggPSB0aGlzLmdldFBvc3NpYmxlVHJhbnNmb3JtWCh0aGlzLnRyYW5zbGF0ZVggLSBkaXN0YW5jZVhuZXcpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRUcmFuc2xhdGUodGhpcy50cmFuc2xhdGVYKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudHJhbnNsYXRlWCA9IHRodW1iRHJhZ1V0aWxzLm5ld1RyYW5zbGF0ZVg7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKE1hdGguYWJzKHRodW1iRHJhZ1V0aWxzLmNvcmRzLmVuZFggLSB0aHVtYkRyYWdVdGlscy5jb3Jkcy5zdGFydFgpIDxcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0dGluZ3MudGh1bWJuYWlsU3dpcGVUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudGh1bWJDbGlja2FibGUgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0aHVtYkRyYWdVdGlscztcclxuICAgICAgICB9O1xyXG4gICAgICAgIFRodW1ibmFpbC5wcm90b3R5cGUuZ2V0VGh1bWJIdG1sID0gZnVuY3Rpb24gKHRodW1iLCBpbmRleCkge1xyXG4gICAgICAgICAgICB2YXIgc2xpZGVWaWRlb0luZm8gPSB0aGlzLmNvcmUuZ2FsbGVyeUl0ZW1zW2luZGV4XS5fX3NsaWRlVmlkZW9JbmZvIHx8IHt9O1xyXG4gICAgICAgICAgICB2YXIgdGh1bWJJbWc7XHJcbiAgICAgICAgICAgIGlmIChzbGlkZVZpZGVvSW5mby55b3V0dWJlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5sb2FkWW91VHViZVRodW1ibmFpbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRodW1iSW1nID1cclxuICAgICAgICAgICAgICAgICAgICAgICAgJy8vaW1nLnlvdXR1YmUuY29tL3ZpLycgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVWaWRlb0luZm8ueW91dHViZVsxXSArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnLycgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXR0aW5ncy55b3VUdWJlVGh1bWJTaXplICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICcuanBnJztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRodW1iSW1nID0gdGh1bWI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aHVtYkltZyA9IHRodW1iO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBcIjxkaXYgZGF0YS1sZy1pdGVtLWlkPVxcXCJcIiArIGluZGV4ICsgXCJcXFwiIGNsYXNzPVxcXCJsZy10aHVtYi1pdGVtIFwiICsgKGluZGV4ID09PSB0aGlzLmNvcmUuaW5kZXggPyAnIGFjdGl2ZScgOiAnJykgKyBcIlxcXCIgXFxuICAgICAgICBzdHlsZT1cXFwid2lkdGg6XCIgKyB0aGlzLnNldHRpbmdzLnRodW1iV2lkdGggKyBcInB4OyBoZWlnaHQ6IFwiICsgdGhpcy5zZXR0aW5ncy50aHVtYkhlaWdodCArIFwiO1xcbiAgICAgICAgICAgIG1hcmdpbi1yaWdodDogXCIgKyB0aGlzLnNldHRpbmdzLnRodW1iTWFyZ2luICsgXCJweDtcXFwiPlxcbiAgICAgICAgICAgIDxpbWcgZGF0YS1sZy1pdGVtLWlkPVxcXCJcIiArIGluZGV4ICsgXCJcXFwiIHNyYz1cXFwiXCIgKyB0aHVtYkltZyArIFwiXFxcIiAvPlxcbiAgICAgICAgPC9kaXY+XCI7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBUaHVtYm5haWwucHJvdG90eXBlLmdldFRodW1iSXRlbUh0bWwgPSBmdW5jdGlvbiAoaXRlbXMpIHtcclxuICAgICAgICAgICAgdmFyIHRodW1iTGlzdCA9ICcnO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGl0ZW1zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB0aHVtYkxpc3QgKz0gdGhpcy5nZXRUaHVtYkh0bWwoaXRlbXNbaV0udGh1bWIsIGkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0aHVtYkxpc3Q7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBUaHVtYm5haWwucHJvdG90eXBlLnNldFRodW1iSXRlbUh0bWwgPSBmdW5jdGlvbiAoaXRlbXMpIHtcclxuICAgICAgICAgICAgdmFyIHRodW1iTGlzdCA9IHRoaXMuZ2V0VGh1bWJJdGVtSHRtbChpdGVtcyk7XHJcbiAgICAgICAgICAgIHRoaXMuJGxnVGh1bWIuaHRtbCh0aHVtYkxpc3QpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgVGh1bWJuYWlsLnByb3RvdHlwZS5zZXRBbmltYXRlVGh1bWJTdHlsZXMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmFuaW1hdGVUaHVtYikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb3JlLm91dGVyLmFkZENsYXNzKCdsZy1hbmltYXRlLXRodW1iJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIC8vIE1hbmFnZSB0aHVtYm5haWwgYWN0aXZlIGNhbHNzXHJcbiAgICAgICAgVGh1bWJuYWlsLnByb3RvdHlwZS5tYW5hZ2VBY3RpdmVDbGFzc09uU2xpZGVDaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgICAgIC8vIG1hbmFnZSBhY3RpdmUgY2xhc3MgZm9yIHRodW1ibmFpbFxyXG4gICAgICAgICAgICB0aGlzLmNvcmUuTEdlbC5vbihsR0V2ZW50cy5iZWZvcmVTbGlkZSArIFwiLnRodW1iXCIsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgdmFyICR0aHVtYiA9IF90aGlzLmNvcmUub3V0ZXIuZmluZCgnLmxnLXRodW1iLWl0ZW0nKTtcclxuICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IGV2ZW50LmRldGFpbC5pbmRleDtcclxuICAgICAgICAgICAgICAgICR0aHVtYi5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XHJcbiAgICAgICAgICAgICAgICAkdGh1bWIuZXEoaW5kZXgpLmFkZENsYXNzKCdhY3RpdmUnKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvLyBUb2dnbGUgdGh1bWJuYWlsIGJhclxyXG4gICAgICAgIFRodW1ibmFpbC5wcm90b3R5cGUudG9nZ2xlVGh1bWJCYXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnNldHRpbmdzLnRvZ2dsZVRodW1iKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvcmUub3V0ZXIuYWRkQ2xhc3MoJ2xnLWNhbi10b2dnbGUnKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29yZS4kdG9vbGJhci5hcHBlbmQoJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGFyaWEtbGFiZWw9XCInICtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldHRpbmdzLnRodW1ibmFpbFBsdWdpblN0cmluZ3NbJ3RvZ2dsZVRodW1ibmFpbHMnXSArXHJcbiAgICAgICAgICAgICAgICAgICAgJ1wiIGNsYXNzPVwibGctdG9nZ2xlLXRodW1iIGxnLWljb25cIj48L2J1dHRvbj4nKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29yZS5vdXRlclxyXG4gICAgICAgICAgICAgICAgICAgIC5maW5kKCcubGctdG9nZ2xlLXRodW1iJylcclxuICAgICAgICAgICAgICAgICAgICAuZmlyc3QoKVxyXG4gICAgICAgICAgICAgICAgICAgIC5vbignY2xpY2subGcnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuY29yZS5vdXRlci50b2dnbGVDbGFzcygnbGctY29tcG9uZW50cy1vcGVuJyk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgVGh1bWJuYWlsLnByb3RvdHlwZS50aHVtYktleVByZXNzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgICAgICB0aGlzLiRMRyh3aW5kb3cpLm9uKFwia2V5ZG93bi5sZy50aHVtYi5nbG9iYWxcIiArIHRoaXMuY29yZS5sZ0lkLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFfdGhpcy5jb3JlLmxnT3BlbmVkIHx8ICFfdGhpcy5zZXR0aW5ncy50b2dnbGVUaHVtYilcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICBpZiAoZS5rZXlDb2RlID09PSAzOCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5jb3JlLm91dGVyLmFkZENsYXNzKCdsZy1jb21wb25lbnRzLW9wZW4nKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGUua2V5Q29kZSA9PT0gNDApIHtcclxuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuY29yZS5vdXRlci5yZW1vdmVDbGFzcygnbGctY29tcG9uZW50cy1vcGVuJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgVGh1bWJuYWlsLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy50aHVtYm5haWwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuJExHKHdpbmRvdykub2ZmKFwiLmxnLnRodW1iLmdsb2JhbFwiICsgdGhpcy5jb3JlLmxnSWQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb3JlLkxHZWwub2ZmKCcubGcudGh1bWInKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29yZS5MR2VsLm9mZignLnRodW1iJyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLiR0aHVtYk91dGVyLnJlbW92ZSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb3JlLm91dGVyLnJlbW92ZUNsYXNzKCdsZy1oYXMtdGh1bWInKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIFRodW1ibmFpbDtcclxuICAgIH0oKSk7XG5cbiAgICByZXR1cm4gVGh1bWJuYWlsO1xuXG59KSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGctdGh1bWJuYWlsLnVtZC5qcy5tYXBcbiIsIi8qIVxuICogbGlnaHRnYWxsZXJ5IHwgMi40LjAtYmV0YS4wIHwgRGVjZW1iZXIgMTJ0aCAyMDIxXG4gKiBodHRwOi8vd3d3LmxpZ2h0Z2FsbGVyeWpzLmNvbS9cbiAqIENvcHlyaWdodCAoYykgMjAyMCBTYWNoaW4gTmVyYXZhdGg7XG4gKiBAbGljZW5zZSBHUEx2M1xuICovXG5cbihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCkgOlxuICAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShmYWN0b3J5KSA6XG4gICAgKGdsb2JhbCA9IHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbFRoaXMgOiBnbG9iYWwgfHwgc2VsZiwgZ2xvYmFsLmxnWm9vbSA9IGZhY3RvcnkoKSk7XG59KHRoaXMsIChmdW5jdGlvbiAoKSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8qISAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gICAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXHJcblxyXG4gICAgUGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kL29yIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3IgYW55XHJcbiAgICBwdXJwb3NlIHdpdGggb3Igd2l0aG91dCBmZWUgaXMgaGVyZWJ5IGdyYW50ZWQuXHJcblxyXG4gICAgVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiBBTkQgVEhFIEFVVEhPUiBESVNDTEFJTVMgQUxMIFdBUlJBTlRJRVMgV0lUSFxyXG4gICAgUkVHQVJEIFRPIFRISVMgU09GVFdBUkUgSU5DTFVESU5HIEFMTCBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZXHJcbiAgICBBTkQgRklUTkVTUy4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUiBCRSBMSUFCTEUgRk9SIEFOWSBTUEVDSUFMLCBESVJFQ1QsXHJcbiAgICBJTkRJUkVDVCwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIE9SIEFOWSBEQU1BR0VTIFdIQVRTT0VWRVIgUkVTVUxUSU5HIEZST01cclxuICAgIExPU1MgT0YgVVNFLCBEQVRBIE9SIFBST0ZJVFMsIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBORUdMSUdFTkNFIE9SXHJcbiAgICBPVEhFUiBUT1JUSU9VUyBBQ1RJT04sIEFSSVNJTkcgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgVVNFIE9SXHJcbiAgICBQRVJGT1JNQU5DRSBPRiBUSElTIFNPRlRXQVJFLlxyXG4gICAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuXHJcbiAgICB2YXIgX19hc3NpZ24gPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gX19hc3NpZ24odCkge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpIHRbcF0gPSBzW3BdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0O1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbiAgICB9O1xuXG4gICAgdmFyIHpvb21TZXR0aW5ncyA9IHtcclxuICAgICAgICBzY2FsZTogMSxcclxuICAgICAgICB6b29tOiB0cnVlLFxyXG4gICAgICAgIGFjdHVhbFNpemU6IHRydWUsXHJcbiAgICAgICAgc2hvd1pvb21Jbk91dEljb25zOiBmYWxzZSxcclxuICAgICAgICBhY3R1YWxTaXplSWNvbnM6IHtcclxuICAgICAgICAgICAgem9vbUluOiAnbGctem9vbS1pbicsXHJcbiAgICAgICAgICAgIHpvb21PdXQ6ICdsZy16b29tLW91dCcsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbmFibGVab29tQWZ0ZXI6IDMwMCxcclxuICAgICAgICB6b29tUGx1Z2luU3RyaW5nczoge1xyXG4gICAgICAgICAgICB6b29tSW46ICdab29tIGluJyxcclxuICAgICAgICAgICAgem9vbU91dDogJ1pvb20gb3V0JyxcclxuICAgICAgICAgICAgdmlld0FjdHVhbFNpemU6ICdWaWV3IGFjdHVhbCBzaXplJyxcclxuICAgICAgICB9LFxyXG4gICAgfTtcblxuICAgIC8qKlxyXG4gICAgICogTGlzdCBvZiBsaWdodEdhbGxlcnkgZXZlbnRzXHJcbiAgICAgKiBBbGwgZXZlbnRzIHNob3VsZCBiZSBkb2N1bWVudGVkIGhlcmVcclxuICAgICAqIEJlbG93IGludGVyZmFjZXMgYXJlIHVzZWQgdG8gYnVpbGQgdGhlIHdlYnNpdGUgZG9jdW1lbnRhdGlvbnNcclxuICAgICAqICovXHJcbiAgICB2YXIgbEdFdmVudHMgPSB7XHJcbiAgICAgICAgYWZ0ZXJBcHBlbmRTbGlkZTogJ2xnQWZ0ZXJBcHBlbmRTbGlkZScsXHJcbiAgICAgICAgaW5pdDogJ2xnSW5pdCcsXHJcbiAgICAgICAgaGFzVmlkZW86ICdsZ0hhc1ZpZGVvJyxcclxuICAgICAgICBjb250YWluZXJSZXNpemU6ICdsZ0NvbnRhaW5lclJlc2l6ZScsXHJcbiAgICAgICAgdXBkYXRlU2xpZGVzOiAnbGdVcGRhdGVTbGlkZXMnLFxyXG4gICAgICAgIGFmdGVyQXBwZW5kU3ViSHRtbDogJ2xnQWZ0ZXJBcHBlbmRTdWJIdG1sJyxcclxuICAgICAgICBiZWZvcmVPcGVuOiAnbGdCZWZvcmVPcGVuJyxcclxuICAgICAgICBhZnRlck9wZW46ICdsZ0FmdGVyT3BlbicsXHJcbiAgICAgICAgc2xpZGVJdGVtTG9hZDogJ2xnU2xpZGVJdGVtTG9hZCcsXHJcbiAgICAgICAgYmVmb3JlU2xpZGU6ICdsZ0JlZm9yZVNsaWRlJyxcclxuICAgICAgICBhZnRlclNsaWRlOiAnbGdBZnRlclNsaWRlJyxcclxuICAgICAgICBwb3N0ZXJDbGljazogJ2xnUG9zdGVyQ2xpY2snLFxyXG4gICAgICAgIGRyYWdTdGFydDogJ2xnRHJhZ1N0YXJ0JyxcclxuICAgICAgICBkcmFnTW92ZTogJ2xnRHJhZ01vdmUnLFxyXG4gICAgICAgIGRyYWdFbmQ6ICdsZ0RyYWdFbmQnLFxyXG4gICAgICAgIGJlZm9yZU5leHRTbGlkZTogJ2xnQmVmb3JlTmV4dFNsaWRlJyxcclxuICAgICAgICBiZWZvcmVQcmV2U2xpZGU6ICdsZ0JlZm9yZVByZXZTbGlkZScsXHJcbiAgICAgICAgYmVmb3JlQ2xvc2U6ICdsZ0JlZm9yZUNsb3NlJyxcclxuICAgICAgICBhZnRlckNsb3NlOiAnbGdBZnRlckNsb3NlJyxcclxuICAgICAgICByb3RhdGVMZWZ0OiAnbGdSb3RhdGVMZWZ0JyxcclxuICAgICAgICByb3RhdGVSaWdodDogJ2xnUm90YXRlUmlnaHQnLFxyXG4gICAgICAgIGZsaXBIb3Jpem9udGFsOiAnbGdGbGlwSG9yaXpvbnRhbCcsXHJcbiAgICAgICAgZmxpcFZlcnRpY2FsOiAnbGdGbGlwVmVydGljYWwnLFxyXG4gICAgICAgIGF1dG9wbGF5OiAnbGdBdXRvcGxheScsXHJcbiAgICAgICAgYXV0b3BsYXlTdGFydDogJ2xnQXV0b3BsYXlTdGFydCcsXHJcbiAgICAgICAgYXV0b3BsYXlTdG9wOiAnbGdBdXRvcGxheVN0b3AnLFxyXG4gICAgfTtcblxuICAgIHZhciBab29tID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIFpvb20oaW5zdGFuY2UsICRMRykge1xyXG4gICAgICAgICAgICAvLyBnZXQgbGlnaHRHYWxsZXJ5IGNvcmUgcGx1Z2luIGluc3RhbmNlXHJcbiAgICAgICAgICAgIHRoaXMuY29yZSA9IGluc3RhbmNlO1xyXG4gICAgICAgICAgICB0aGlzLiRMRyA9ICRMRztcclxuICAgICAgICAgICAgdGhpcy5zZXR0aW5ncyA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCB6b29tU2V0dGluZ3MpLCB0aGlzLmNvcmUuc2V0dGluZ3MpO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gQXBwZW5kIFpvb20gY29udHJvbHMuIEFjdHVhbCBzaXplLCBab29tLWluLCBab29tLW91dFxyXG4gICAgICAgIFpvb20ucHJvdG90eXBlLmJ1aWxkVGVtcGxhdGVzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgem9vbUljb25zID0gdGhpcy5zZXR0aW5ncy5zaG93Wm9vbUluT3V0SWNvbnNcclxuICAgICAgICAgICAgICAgID8gXCI8YnV0dG9uIGlkPVxcXCJcIiArIHRoaXMuY29yZS5nZXRJZE5hbWUoJ2xnLXpvb20taW4nKSArIFwiXFxcIiB0eXBlPVxcXCJidXR0b25cXFwiIGFyaWEtbGFiZWw9XFxcIlwiICsgdGhpcy5zZXR0aW5ncy56b29tUGx1Z2luU3RyaW5nc1snem9vbUluJ10gKyBcIlxcXCIgY2xhc3M9XFxcImxnLXpvb20taW4gbGctaWNvblxcXCI+PC9idXR0b24+PGJ1dHRvbiBpZD1cXFwiXCIgKyB0aGlzLmNvcmUuZ2V0SWROYW1lKCdsZy16b29tLW91dCcpICsgXCJcXFwiIHR5cGU9XFxcImJ1dHRvblxcXCIgYXJpYS1sYWJlbD1cXFwiXCIgKyB0aGlzLnNldHRpbmdzLnpvb21QbHVnaW5TdHJpbmdzWyd6b29tSW4nXSArIFwiXFxcIiBjbGFzcz1cXFwibGctem9vbS1vdXQgbGctaWNvblxcXCI+PC9idXR0b24+XCJcclxuICAgICAgICAgICAgICAgIDogJyc7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmFjdHVhbFNpemUpIHtcclxuICAgICAgICAgICAgICAgIHpvb21JY29ucyArPSBcIjxidXR0b24gaWQ9XFxcIlwiICsgdGhpcy5jb3JlLmdldElkTmFtZSgnbGctYWN0dWFsLXNpemUnKSArIFwiXFxcIiB0eXBlPVxcXCJidXR0b25cXFwiIGFyaWEtbGFiZWw9XFxcIlwiICsgdGhpcy5zZXR0aW5ncy56b29tUGx1Z2luU3RyaW5nc1sndmlld0FjdHVhbFNpemUnXSArIFwiXFxcIiBjbGFzcz1cXFwiXCIgKyB0aGlzLnNldHRpbmdzLmFjdHVhbFNpemVJY29ucy56b29tSW4gKyBcIiBsZy1pY29uXFxcIj48L2J1dHRvbj5cIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmNvcmUub3V0ZXIuYWRkQ2xhc3MoJ2xnLXVzZS10cmFuc2l0aW9uLWZvci16b29tJyk7XHJcbiAgICAgICAgICAgIHRoaXMuY29yZS4kdG9vbGJhci5maXJzdCgpLmFwcGVuZCh6b29tSWNvbnMpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2MgRW5hYmxlIHpvb20gb3B0aW9uIG9ubHkgb25jZSB0aGUgaW1hZ2UgaXMgY29tcGxldGVseSBsb2FkZWRcclxuICAgICAgICAgKiBJZiB6b29tRnJvbU9yaWdpbiBpcyB0cnVlLCBab29tIGlzIGVuYWJsZWQgb25jZSB0aGUgZHVtbXkgaW1hZ2UgaGFzIGJlZW4gaW5zZXJ0ZWRcclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIFpvb20gc3R5bGVzIGFyZSBkZWZpbmVkIHVuZGVyIGxnLXpvb21hYmxlIENTUyBjbGFzcy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBab29tLnByb3RvdHlwZS5lbmFibGVab29tID0gZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgICAgIC8vIGRlbGF5IHdpbGwgYmUgMCBleGNlcHQgZmlyc3QgdGltZVxyXG4gICAgICAgICAgICB2YXIgX3NwZWVkID0gdGhpcy5zZXR0aW5ncy5lbmFibGVab29tQWZ0ZXIgKyBldmVudC5kZXRhaWwuZGVsYXk7XHJcbiAgICAgICAgICAgIC8vIHNldCBfc3BlZWQgdmFsdWUgMCBpZiBnYWxsZXJ5IG9wZW5lZCBmcm9tIGRpcmVjdCB1cmwgYW5kIGlmIGl0IGlzIGZpcnN0IHNsaWRlXHJcbiAgICAgICAgICAgIGlmICh0aGlzLiRMRygnYm9keScpLmZpcnN0KCkuaGFzQ2xhc3MoJ2xnLWZyb20taGFzaCcpICYmXHJcbiAgICAgICAgICAgICAgICBldmVudC5kZXRhaWwuZGVsYXkpIHtcclxuICAgICAgICAgICAgICAgIC8vIHdpbGwgZXhlY3V0ZSBvbmx5IG9uY2VcclxuICAgICAgICAgICAgICAgIF9zcGVlZCA9IDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBSZW1vdmUgbGctZnJvbS1oYXNoIHRvIGVuYWJsZSBzdGFydGluZyBhbmltYXRpb24uXHJcbiAgICAgICAgICAgICAgICB0aGlzLiRMRygnYm9keScpLmZpcnN0KCkucmVtb3ZlQ2xhc3MoJ2xnLWZyb20taGFzaCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuem9vbWFibGVUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIV90aGlzLmlzSW1hZ2VTbGlkZSgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgX3RoaXMuY29yZS5nZXRTbGlkZUl0ZW0oZXZlbnQuZGV0YWlsLmluZGV4KS5hZGRDbGFzcygnbGctem9vbWFibGUnKTtcclxuICAgICAgICAgICAgICAgIGlmIChldmVudC5kZXRhaWwuaW5kZXggPT09IF90aGlzLmNvcmUuaW5kZXgpIHtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5zZXRab29tRXNzZW50aWFscygpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LCBfc3BlZWQgKyAzMCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBab29tLnByb3RvdHlwZS5lbmFibGVab29tT25TbGlkZUl0ZW1Mb2FkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAvLyBBZGQgem9vbWFibGUgY2xhc3NcclxuICAgICAgICAgICAgdGhpcy5jb3JlLkxHZWwub24obEdFdmVudHMuc2xpZGVJdGVtTG9hZCArIFwiLnpvb21cIiwgdGhpcy5lbmFibGVab29tLmJpbmQodGhpcykpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgWm9vbS5wcm90b3R5cGUuZ2V0TW9kaWZpZXIgPSBmdW5jdGlvbiAocm90YXRlVmFsdWUsIGF4aXMsIGVsKSB7XHJcbiAgICAgICAgICAgIHZhciBvcmlnaW5hbFJvdGF0ZSA9IHJvdGF0ZVZhbHVlO1xyXG4gICAgICAgICAgICByb3RhdGVWYWx1ZSA9IE1hdGguYWJzKHJvdGF0ZVZhbHVlKTtcclxuICAgICAgICAgICAgdmFyIHRyYW5zZm9ybVZhbHVlcyA9IHRoaXMuZ2V0Q3VycmVudFRyYW5zZm9ybShlbCk7XHJcbiAgICAgICAgICAgIGlmICghdHJhbnNmb3JtVmFsdWVzKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgbW9kaWZpZXIgPSAxO1xyXG4gICAgICAgICAgICBpZiAoYXhpcyA9PT0gJ1gnKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZmxpcEhvcml6b250YWxWYWx1ZSA9IE1hdGguc2lnbihwYXJzZUZsb2F0KHRyYW5zZm9ybVZhbHVlc1swXSkpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHJvdGF0ZVZhbHVlID09PSAwIHx8IHJvdGF0ZVZhbHVlID09PSAxODApIHtcclxuICAgICAgICAgICAgICAgICAgICBtb2RpZmllciA9IDE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChyb3RhdGVWYWx1ZSA9PT0gOTApIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoKG9yaWdpbmFsUm90YXRlID09PSAtOTAgJiYgZmxpcEhvcml6b250YWxWYWx1ZSA9PT0gMSkgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgKG9yaWdpbmFsUm90YXRlID09PSA5MCAmJiBmbGlwSG9yaXpvbnRhbFZhbHVlID09PSAtMSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kaWZpZXIgPSAtMTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGlmaWVyID0gMTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBtb2RpZmllciA9IG1vZGlmaWVyICogZmxpcEhvcml6b250YWxWYWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZhciBmbGlwVmVydGljYWxWYWx1ZSA9IE1hdGguc2lnbihwYXJzZUZsb2F0KHRyYW5zZm9ybVZhbHVlc1szXSkpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHJvdGF0ZVZhbHVlID09PSAwIHx8IHJvdGF0ZVZhbHVlID09PSAxODApIHtcclxuICAgICAgICAgICAgICAgICAgICBtb2RpZmllciA9IDE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChyb3RhdGVWYWx1ZSA9PT0gOTApIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc2luWCA9IHBhcnNlRmxvYXQodHJhbnNmb3JtVmFsdWVzWzFdKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc2luTWludXNYID0gcGFyc2VGbG9hdCh0cmFuc2Zvcm1WYWx1ZXNbMl0pO1xyXG4gICAgICAgICAgICAgICAgICAgIG1vZGlmaWVyID0gTWF0aC5zaWduKHNpblggKiBzaW5NaW51c1ggKiBvcmlnaW5hbFJvdGF0ZSAqIGZsaXBWZXJ0aWNhbFZhbHVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIG1vZGlmaWVyID0gbW9kaWZpZXIgKiBmbGlwVmVydGljYWxWYWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gbW9kaWZpZXI7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBab29tLnByb3RvdHlwZS5nZXRJbWFnZVNpemUgPSBmdW5jdGlvbiAoJGltYWdlLCByb3RhdGVWYWx1ZSwgYXhpcykge1xyXG4gICAgICAgICAgICB2YXIgaW1hZ2VTaXplcyA9IHtcclxuICAgICAgICAgICAgICAgIHk6ICdvZmZzZXRIZWlnaHQnLFxyXG4gICAgICAgICAgICAgICAgeDogJ29mZnNldFdpZHRoJyxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgaWYgKE1hdGguYWJzKHJvdGF0ZVZhbHVlKSA9PT0gOTApIHtcclxuICAgICAgICAgICAgICAgIC8vIFN3YXAgYXhpc1xyXG4gICAgICAgICAgICAgICAgaWYgKGF4aXMgPT09ICd4Jykge1xyXG4gICAgICAgICAgICAgICAgICAgIGF4aXMgPSAneSc7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBheGlzID0gJ3gnO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiAkaW1hZ2VbaW1hZ2VTaXplc1theGlzXV07XHJcbiAgICAgICAgfTtcclxuICAgICAgICBab29tLnByb3RvdHlwZS5nZXREcmFnQ29yZHMgPSBmdW5jdGlvbiAoZSwgcm90YXRlVmFsdWUpIHtcclxuICAgICAgICAgICAgaWYgKHJvdGF0ZVZhbHVlID09PSA5MCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICB4OiBlLnBhZ2VZLFxyXG4gICAgICAgICAgICAgICAgICAgIHk6IGUucGFnZVgsXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICB4OiBlLnBhZ2VYLFxyXG4gICAgICAgICAgICAgICAgICAgIHk6IGUucGFnZVksXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBab29tLnByb3RvdHlwZS5nZXRTd2lwZUNvcmRzID0gZnVuY3Rpb24gKGUsIHJvdGF0ZVZhbHVlKSB7XHJcbiAgICAgICAgICAgIHZhciB4ID0gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VYO1xyXG4gICAgICAgICAgICB2YXIgeSA9IGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWTtcclxuICAgICAgICAgICAgaWYgKHJvdGF0ZVZhbHVlID09PSA5MCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICB4OiB5LFxyXG4gICAgICAgICAgICAgICAgICAgIHk6IHgsXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICB4OiB4LFxyXG4gICAgICAgICAgICAgICAgICAgIHk6IHksXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBab29tLnByb3RvdHlwZS5nZXREcmFnQWxsb3dlZEF4aXNlcyA9IGZ1bmN0aW9uIChyb3RhdGVWYWx1ZSwgc2NhbGUpIHtcclxuICAgICAgICAgICAgc2NhbGUgPSBzY2FsZSB8fCB0aGlzLnNjYWxlIHx8IDE7XHJcbiAgICAgICAgICAgIHZhciBhbGxvd1kgPSB0aGlzLmltYWdlWVNpemUgKiBzY2FsZSA+IHRoaXMuY29udGFpbmVyUmVjdC5oZWlnaHQ7XHJcbiAgICAgICAgICAgIHZhciBhbGxvd1ggPSB0aGlzLmltYWdlWFNpemUgKiBzY2FsZSA+IHRoaXMuY29udGFpbmVyUmVjdC53aWR0aDtcclxuICAgICAgICAgICAgaWYgKHJvdGF0ZVZhbHVlID09PSA5MCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICBhbGxvd1g6IGFsbG93WSxcclxuICAgICAgICAgICAgICAgICAgICBhbGxvd1k6IGFsbG93WCxcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGFsbG93WDogYWxsb3dYLFxyXG4gICAgICAgICAgICAgICAgICAgIGFsbG93WTogYWxsb3dZLFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsXHJcbiAgICAgICAgICogQHJldHVybiBtYXRyaXgoY29zKFgpLCBzaW4oWCksIC1zaW4oWCksIGNvcyhYKSwgMCwgMCk7XHJcbiAgICAgICAgICogR2V0IHRoZSBjdXJyZW50IHRyYW5zZm9ybSB2YWx1ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIFpvb20ucHJvdG90eXBlLmdldEN1cnJlbnRUcmFuc2Zvcm0gPSBmdW5jdGlvbiAoZWwpIHtcclxuICAgICAgICAgICAgaWYgKCFlbCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBzdCA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsLCBudWxsKTtcclxuICAgICAgICAgICAgdmFyIHRtID0gc3QuZ2V0UHJvcGVydHlWYWx1ZSgnLXdlYmtpdC10cmFuc2Zvcm0nKSB8fFxyXG4gICAgICAgICAgICAgICAgc3QuZ2V0UHJvcGVydHlWYWx1ZSgnLW1vei10cmFuc2Zvcm0nKSB8fFxyXG4gICAgICAgICAgICAgICAgc3QuZ2V0UHJvcGVydHlWYWx1ZSgnLW1zLXRyYW5zZm9ybScpIHx8XHJcbiAgICAgICAgICAgICAgICBzdC5nZXRQcm9wZXJ0eVZhbHVlKCctby10cmFuc2Zvcm0nKSB8fFxyXG4gICAgICAgICAgICAgICAgc3QuZ2V0UHJvcGVydHlWYWx1ZSgndHJhbnNmb3JtJykgfHxcclxuICAgICAgICAgICAgICAgICdub25lJztcclxuICAgICAgICAgICAgaWYgKHRtICE9PSAnbm9uZScpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0bS5zcGxpdCgnKCcpWzFdLnNwbGl0KCcpJylbMF0uc3BsaXQoJywnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfTtcclxuICAgICAgICBab29tLnByb3RvdHlwZS5nZXRDdXJyZW50Um90YXRpb24gPSBmdW5jdGlvbiAoZWwpIHtcclxuICAgICAgICAgICAgaWYgKCFlbCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIHZhbHVlcyA9IHRoaXMuZ2V0Q3VycmVudFRyYW5zZm9ybShlbCk7XHJcbiAgICAgICAgICAgIGlmICh2YWx1ZXMpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLnJvdW5kKE1hdGguYXRhbjIocGFyc2VGbG9hdCh2YWx1ZXNbMV0pLCBwYXJzZUZsb2F0KHZhbHVlc1swXSkpICpcclxuICAgICAgICAgICAgICAgICAgICAoMTgwIC8gTWF0aC5QSSkpO1xyXG4gICAgICAgICAgICAgICAgLy8gSWYgeW91IHdhbnQgcm90YXRlIGluIDM2MFxyXG4gICAgICAgICAgICAgICAgLy9yZXR1cm4gKGFuZ2xlIDwgMCA/IGFuZ2xlICsgMzYwIDogYW5nbGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgWm9vbS5wcm90b3R5cGUuc2V0Wm9vbUVzc2VudGlhbHMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciAkaW1hZ2UgPSB0aGlzLmNvcmVcclxuICAgICAgICAgICAgICAgIC5nZXRTbGlkZUl0ZW0odGhpcy5jb3JlLmluZGV4KVxyXG4gICAgICAgICAgICAgICAgLmZpbmQoJy5sZy1pbWFnZScpXHJcbiAgICAgICAgICAgICAgICAuZmlyc3QoKTtcclxuICAgICAgICAgICAgdmFyIHJvdGF0ZUVsID0gdGhpcy5jb3JlXHJcbiAgICAgICAgICAgICAgICAuZ2V0U2xpZGVJdGVtKHRoaXMuY29yZS5pbmRleClcclxuICAgICAgICAgICAgICAgIC5maW5kKCcubGctaW1nLXJvdGF0ZScpXHJcbiAgICAgICAgICAgICAgICAuZmlyc3QoKVxyXG4gICAgICAgICAgICAgICAgLmdldCgpO1xyXG4gICAgICAgICAgICB0aGlzLnJvdGF0ZVZhbHVlID0gdGhpcy5nZXRDdXJyZW50Um90YXRpb24ocm90YXRlRWwpO1xyXG4gICAgICAgICAgICB0aGlzLmltYWdlWVNpemUgPSB0aGlzLmdldEltYWdlU2l6ZSgkaW1hZ2UuZ2V0KCksIHRoaXMucm90YXRlVmFsdWUsICd5Jyk7XHJcbiAgICAgICAgICAgIHRoaXMuaW1hZ2VYU2l6ZSA9IHRoaXMuZ2V0SW1hZ2VTaXplKCRpbWFnZS5nZXQoKSwgdGhpcy5yb3RhdGVWYWx1ZSwgJ3gnKTtcclxuICAgICAgICAgICAgdGhpcy5jb250YWluZXJSZWN0ID0gdGhpcy5jb3JlLm91dGVyLmdldCgpLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgICAgICAgICB0aGlzLm1vZGlmaWVyWCA9IHRoaXMuZ2V0TW9kaWZpZXIodGhpcy5yb3RhdGVWYWx1ZSwgJ1gnLCByb3RhdGVFbCk7XHJcbiAgICAgICAgICAgIHRoaXMubW9kaWZpZXJZID0gdGhpcy5nZXRNb2RpZmllcih0aGlzLnJvdGF0ZVZhbHVlLCAnWScsIHJvdGF0ZUVsKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjIEltYWdlIHpvb21cclxuICAgICAgICAgKiBUcmFuc2xhdGUgdGhlIHdyYXAgYW5kIHNjYWxlIHRoZSBpbWFnZSB0byBnZXQgYmV0dGVyIHVzZXIgZXhwZXJpZW5jZVxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IHNjYWxlIC0gWm9vbSBkZWNyZW1lbnQvaW5jcmVtZW50IHZhbHVlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgWm9vbS5wcm90b3R5cGUuem9vbUltYWdlID0gZnVuY3Rpb24gKHNjYWxlKSB7XHJcbiAgICAgICAgICAgIC8vIEZpbmQgb2Zmc2V0IG1hbnVhbGx5IHRvIGF2b2lkIGlzc3VlIGFmdGVyIHpvb21cclxuICAgICAgICAgICAgdmFyIG9mZnNldFggPSAodGhpcy5jb250YWluZXJSZWN0LndpZHRoIC0gdGhpcy5pbWFnZVhTaXplKSAvIDIgK1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250YWluZXJSZWN0LmxlZnQ7XHJcbiAgICAgICAgICAgIHZhciBfYSA9IHRoaXMuY29yZS5tZWRpYUNvbnRhaW5lclBvc2l0aW9uLCB0b3AgPSBfYS50b3AsIGJvdHRvbSA9IF9hLmJvdHRvbTtcclxuICAgICAgICAgICAgdmFyIHRvcEJvdHRvbVNwYWNpbmcgPSBNYXRoLmFicyh0b3AgLSBib3R0b20pIC8gMjtcclxuICAgICAgICAgICAgdmFyIG9mZnNldFkgPSAodGhpcy5jb250YWluZXJSZWN0LmhlaWdodCAtXHJcbiAgICAgICAgICAgICAgICB0aGlzLmltYWdlWVNpemUgLVxyXG4gICAgICAgICAgICAgICAgdG9wQm90dG9tU3BhY2luZyAqIHRoaXMubW9kaWZpZXJYKSAvXHJcbiAgICAgICAgICAgICAgICAyICtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2Nyb2xsVG9wICtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGFpbmVyUmVjdC50b3A7XHJcbiAgICAgICAgICAgIHZhciBvcmlnaW5hbFg7XHJcbiAgICAgICAgICAgIHZhciBvcmlnaW5hbFk7XHJcbiAgICAgICAgICAgIGlmIChzY2FsZSA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wb3NpdGlvbkNoYW5nZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgZHJhZ0FsbG93ZWRBeGlzZXMgPSB0aGlzLmdldERyYWdBbGxvd2VkQXhpc2VzKE1hdGguYWJzKHRoaXMucm90YXRlVmFsdWUpLCBzY2FsZSk7XHJcbiAgICAgICAgICAgIHZhciBhbGxvd1kgPSBkcmFnQWxsb3dlZEF4aXNlcy5hbGxvd1ksIGFsbG93WCA9IGRyYWdBbGxvd2VkQXhpc2VzLmFsbG93WDtcclxuICAgICAgICAgICAgaWYgKHRoaXMucG9zaXRpb25DaGFuZ2VkKSB7XHJcbiAgICAgICAgICAgICAgICBvcmlnaW5hbFggPSB0aGlzLmxlZnQgLyAodGhpcy5zY2FsZSAtIDEpO1xyXG4gICAgICAgICAgICAgICAgb3JpZ2luYWxZID0gdGhpcy50b3AgLyAodGhpcy5zY2FsZSAtIDEpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wYWdlWCA9IE1hdGguYWJzKG9yaWdpbmFsWCkgKyBvZmZzZXRYO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wYWdlWSA9IE1hdGguYWJzKG9yaWdpbmFsWSkgKyBvZmZzZXRZO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wb3NpdGlvbkNoYW5nZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgcG9zc2libGVTd2lwZUNvcmRzID0gdGhpcy5nZXRQb3NzaWJsZVN3aXBlRHJhZ0NvcmRzKHRoaXMucm90YXRlVmFsdWUsIHNjYWxlKTtcclxuICAgICAgICAgICAgdmFyIF94ID0gb2Zmc2V0WCAtIHRoaXMucGFnZVg7XHJcbiAgICAgICAgICAgIHZhciBfeSA9IG9mZnNldFkgLSB0aGlzLnBhZ2VZO1xyXG4gICAgICAgICAgICB2YXIgeCA9IChzY2FsZSAtIDEpICogX3g7XHJcbiAgICAgICAgICAgIHZhciB5ID0gKHNjYWxlIC0gMSkgKiBfeTtcclxuICAgICAgICAgICAgaWYgKGFsbG93WCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNCZXlvbmRQb3NzaWJsZUxlZnQoeCwgcG9zc2libGVTd2lwZUNvcmRzLm1pblgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgeCA9IHBvc3NpYmxlU3dpcGVDb3Jkcy5taW5YO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5pc0JleW9uZFBvc3NpYmxlUmlnaHQoeCwgcG9zc2libGVTd2lwZUNvcmRzLm1heFgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgeCA9IHBvc3NpYmxlU3dpcGVDb3Jkcy5tYXhYO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKHNjYWxlID4gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh4IDwgcG9zc2libGVTd2lwZUNvcmRzLm1pblgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgeCA9IHBvc3NpYmxlU3dpcGVDb3Jkcy5taW5YO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh4ID4gcG9zc2libGVTd2lwZUNvcmRzLm1heFgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgeCA9IHBvc3NpYmxlU3dpcGVDb3Jkcy5tYXhYO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoYWxsb3dZKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pc0JleW9uZFBvc3NpYmxlVG9wKHksIHBvc3NpYmxlU3dpcGVDb3Jkcy5taW5ZKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHkgPSBwb3NzaWJsZVN3aXBlQ29yZHMubWluWTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuaXNCZXlvbmRQb3NzaWJsZUJvdHRvbSh5LCBwb3NzaWJsZVN3aXBlQ29yZHMubWF4WSkpIHtcclxuICAgICAgICAgICAgICAgICAgICB5ID0gcG9zc2libGVTd2lwZUNvcmRzLm1heFk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBJZiB0aGUgdHJhbnNsYXRlIHZhbHVlIGJhc2VkIG9uIGluZGV4IG9mIGJleW9uZCB0aGUgdmlld3BvcnQsIHV0aWxpemUgdGhlIGF2YWlsYWJsZSBzcGFjZSB0byBwcmV2ZW50IGltYWdlIGJlaW5nIGN1dCBvdXRcclxuICAgICAgICAgICAgICAgIGlmIChzY2FsZSA+IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAvL0lmIGltYWdlIGdvZXMgYmV5b25kIHZpZXdwb3J0IHRvcCwgdXNlIHRoZSBtaW5pbSBwb3NzaWJsZSB0cmFuc2xhdGUgdmFsdWVcclxuICAgICAgICAgICAgICAgICAgICBpZiAoeSA8IHBvc3NpYmxlU3dpcGVDb3Jkcy5taW5ZKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHkgPSBwb3NzaWJsZVN3aXBlQ29yZHMubWluWTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoeSA+IHBvc3NpYmxlU3dpcGVDb3Jkcy5tYXhZKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHkgPSBwb3NzaWJsZVN3aXBlQ29yZHMubWF4WTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5zZXRab29tU3R5bGVzKHtcclxuICAgICAgICAgICAgICAgIHg6IHgsXHJcbiAgICAgICAgICAgICAgICB5OiB5LFxyXG4gICAgICAgICAgICAgICAgc2NhbGU6IHNjYWxlLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjIGFwcGx5IHNjYWxlM2QgdG8gaW1hZ2UgYW5kIHRyYW5zbGF0ZSB0byBpbWFnZSB3cmFwXHJcbiAgICAgICAgICogQHBhcmFtIHtzdHlsZX0gWCxZIGFuZCBzY2FsZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIFpvb20ucHJvdG90eXBlLnNldFpvb21TdHlsZXMgPSBmdW5jdGlvbiAoc3R5bGUpIHtcclxuICAgICAgICAgICAgdmFyICRpbWFnZSA9IHRoaXMuY29yZVxyXG4gICAgICAgICAgICAgICAgLmdldFNsaWRlSXRlbSh0aGlzLmNvcmUuaW5kZXgpXHJcbiAgICAgICAgICAgICAgICAuZmluZCgnLmxnLWltYWdlJylcclxuICAgICAgICAgICAgICAgIC5maXJzdCgpO1xyXG4gICAgICAgICAgICB2YXIgJGR1bW15SW1hZ2UgPSB0aGlzLmNvcmUub3V0ZXJcclxuICAgICAgICAgICAgICAgIC5maW5kKCcubGctY3VycmVudCAubGctZHVtbXktaW1nJylcclxuICAgICAgICAgICAgICAgIC5maXJzdCgpO1xyXG4gICAgICAgICAgICB2YXIgJGltYWdlV3JhcCA9ICRpbWFnZS5wYXJlbnQoKTtcclxuICAgICAgICAgICAgdGhpcy5zY2FsZSA9IHN0eWxlLnNjYWxlO1xyXG4gICAgICAgICAgICAkaW1hZ2UuY3NzKCd0cmFuc2Zvcm0nLCAnc2NhbGUzZCgnICsgc3R5bGUuc2NhbGUgKyAnLCAnICsgc3R5bGUuc2NhbGUgKyAnLCAxKScpO1xyXG4gICAgICAgICAgICAkZHVtbXlJbWFnZS5jc3MoJ3RyYW5zZm9ybScsICdzY2FsZTNkKCcgKyBzdHlsZS5zY2FsZSArICcsICcgKyBzdHlsZS5zY2FsZSArICcsIDEpJyk7XHJcbiAgICAgICAgICAgIHZhciB0cmFuc2Zvcm0gPSAndHJhbnNsYXRlM2QoJyArIHN0eWxlLnggKyAncHgsICcgKyBzdHlsZS55ICsgJ3B4LCAwKSc7XHJcbiAgICAgICAgICAgICRpbWFnZVdyYXAuY3NzKCd0cmFuc2Zvcm0nLCB0cmFuc2Zvcm0pO1xyXG4gICAgICAgICAgICB0aGlzLmxlZnQgPSBzdHlsZS54O1xyXG4gICAgICAgICAgICB0aGlzLnRvcCA9IHN0eWxlLnk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAcGFyYW0gaW5kZXggLSBJbmRleCBvZiB0aGUgY3VycmVudCBzbGlkZVxyXG4gICAgICAgICAqIEBwYXJhbSBldmVudCAtIGV2ZW50IHdpbGwgYmUgYXZhaWxhYmxlIG9ubHkgaWYgdGhlIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbiBjbGlja2luZy90YXBpbmcgdGhlIGltYWdzXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgWm9vbS5wcm90b3R5cGUuc2V0QWN0dWFsU2l6ZSA9IGZ1bmN0aW9uIChpbmRleCwgZXZlbnQpIHtcclxuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAgICAgLy8gQWxsb3cgem9vbSBvbmx5IG9uIGltYWdlXHJcbiAgICAgICAgICAgIGlmICghdGhpcy5pc0ltYWdlU2xpZGUoKSB8fFxyXG4gICAgICAgICAgICAgICAgdGhpcy5jb3JlLm91dGVyLmhhc0NsYXNzKCdsZy1maXJzdC1zbGlkZS1sb2FkaW5nJykpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgc2NhbGUgPSB0aGlzLmdldEN1cnJlbnRJbWFnZUFjdHVhbFNpemVTY2FsZSgpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5jb3JlLm91dGVyLmhhc0NsYXNzKCdsZy16b29tZWQnKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zY2FsZSA9IDE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNjYWxlID0gdGhpcy5nZXRTY2FsZShzY2FsZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5zZXRQYWdlQ29yZHMoZXZlbnQpO1xyXG4gICAgICAgICAgICB0aGlzLmJlZ2luWm9vbSh0aGlzLnNjYWxlKTtcclxuICAgICAgICAgICAgdGhpcy56b29tSW1hZ2UodGhpcy5zY2FsZSk7XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuY29yZS5vdXRlci5yZW1vdmVDbGFzcygnbGctZ3JhYmJpbmcnKS5hZGRDbGFzcygnbGctZ3JhYicpO1xyXG4gICAgICAgICAgICB9LCAxMCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBab29tLnByb3RvdHlwZS5nZXROYXR1cmFsV2lkdGggPSBmdW5jdGlvbiAoaW5kZXgpIHtcclxuICAgICAgICAgICAgdmFyICRpbWFnZSA9IHRoaXMuY29yZS5nZXRTbGlkZUl0ZW0oaW5kZXgpLmZpbmQoJy5sZy1pbWFnZScpLmZpcnN0KCk7XHJcbiAgICAgICAgICAgIHZhciBuYXR1cmFsV2lkdGggPSB0aGlzLmNvcmUuZ2FsbGVyeUl0ZW1zW2luZGV4XS53aWR0aDtcclxuICAgICAgICAgICAgcmV0dXJuIG5hdHVyYWxXaWR0aFxyXG4gICAgICAgICAgICAgICAgPyBwYXJzZUZsb2F0KG5hdHVyYWxXaWR0aClcclxuICAgICAgICAgICAgICAgIDogJGltYWdlLmdldCgpLm5hdHVyYWxXaWR0aDtcclxuICAgICAgICB9O1xyXG4gICAgICAgIFpvb20ucHJvdG90eXBlLmdldEFjdHVhbFNpemVTY2FsZSA9IGZ1bmN0aW9uIChuYXR1cmFsV2lkdGgsIHdpZHRoKSB7XHJcbiAgICAgICAgICAgIHZhciBfc2NhbGU7XHJcbiAgICAgICAgICAgIHZhciBzY2FsZTtcclxuICAgICAgICAgICAgaWYgKG5hdHVyYWxXaWR0aCA+IHdpZHRoKSB7XHJcbiAgICAgICAgICAgICAgICBfc2NhbGUgPSBuYXR1cmFsV2lkdGggLyB3aWR0aDtcclxuICAgICAgICAgICAgICAgIHNjYWxlID0gX3NjYWxlIHx8IDI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBzY2FsZSA9IDE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHNjYWxlO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgWm9vbS5wcm90b3R5cGUuZ2V0Q3VycmVudEltYWdlQWN0dWFsU2l6ZVNjYWxlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgJGltYWdlID0gdGhpcy5jb3JlXHJcbiAgICAgICAgICAgICAgICAuZ2V0U2xpZGVJdGVtKHRoaXMuY29yZS5pbmRleClcclxuICAgICAgICAgICAgICAgIC5maW5kKCcubGctaW1hZ2UnKVxyXG4gICAgICAgICAgICAgICAgLmZpcnN0KCk7XHJcbiAgICAgICAgICAgIHZhciB3aWR0aCA9ICRpbWFnZS5nZXQoKS5vZmZzZXRXaWR0aDtcclxuICAgICAgICAgICAgdmFyIG5hdHVyYWxXaWR0aCA9IHRoaXMuZ2V0TmF0dXJhbFdpZHRoKHRoaXMuY29yZS5pbmRleCkgfHwgd2lkdGg7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldEFjdHVhbFNpemVTY2FsZShuYXR1cmFsV2lkdGgsIHdpZHRoKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIFpvb20ucHJvdG90eXBlLmdldFBhZ2VDb3JkcyA9IGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICB2YXIgY29yZHMgPSB7fTtcclxuICAgICAgICAgICAgaWYgKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICBjb3Jkcy54ID0gZXZlbnQucGFnZVggfHwgZXZlbnQudGFyZ2V0VG91Y2hlc1swXS5wYWdlWDtcclxuICAgICAgICAgICAgICAgIGNvcmRzLnkgPSBldmVudC5wYWdlWSB8fCBldmVudC50YXJnZXRUb3VjaGVzWzBdLnBhZ2VZO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdmFyIGNvbnRhaW5lclJlY3QgPSB0aGlzLmNvcmUub3V0ZXIuZ2V0KCkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAgICAgICAgICAgICBjb3Jkcy54ID0gY29udGFpbmVyUmVjdC53aWR0aCAvIDIgKyBjb250YWluZXJSZWN0LmxlZnQ7XHJcbiAgICAgICAgICAgICAgICBjb3Jkcy55ID1cclxuICAgICAgICAgICAgICAgICAgICBjb250YWluZXJSZWN0LmhlaWdodCAvIDIgKyB0aGlzLnNjcm9sbFRvcCArIGNvbnRhaW5lclJlY3QudG9wO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBjb3JkcztcclxuICAgICAgICB9O1xyXG4gICAgICAgIFpvb20ucHJvdG90eXBlLnNldFBhZ2VDb3JkcyA9IGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICB2YXIgcGFnZUNvcmRzID0gdGhpcy5nZXRQYWdlQ29yZHMoZXZlbnQpO1xyXG4gICAgICAgICAgICB0aGlzLnBhZ2VYID0gcGFnZUNvcmRzLng7XHJcbiAgICAgICAgICAgIHRoaXMucGFnZVkgPSBwYWdlQ29yZHMueTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8vIElmIHRydWUsIHpvb21lZCAtIGluIGVsc2Ugem9vbWVkIG91dFxyXG4gICAgICAgIFpvb20ucHJvdG90eXBlLmJlZ2luWm9vbSA9IGZ1bmN0aW9uIChzY2FsZSkge1xyXG4gICAgICAgICAgICB0aGlzLmNvcmUub3V0ZXIucmVtb3ZlQ2xhc3MoJ2xnLXpvb20tZHJhZy10cmFuc2l0aW9uIGxnLXpvb20tZHJhZ2dpbmcnKTtcclxuICAgICAgICAgICAgaWYgKHNjYWxlID4gMSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb3JlLm91dGVyLmFkZENsYXNzKCdsZy16b29tZWQnKTtcclxuICAgICAgICAgICAgICAgIHZhciAkYWN0dWFsU2l6ZSA9IHRoaXMuY29yZS5nZXRFbGVtZW50QnlJZCgnbGctYWN0dWFsLXNpemUnKTtcclxuICAgICAgICAgICAgICAgICRhY3R1YWxTaXplXHJcbiAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKHRoaXMuc2V0dGluZ3MuYWN0dWFsU2l6ZUljb25zLnpvb21JbilcclxuICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3ModGhpcy5zZXR0aW5ncy5hY3R1YWxTaXplSWNvbnMuem9vbU91dCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlc2V0Wm9vbSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBzY2FsZSA+IDE7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBab29tLnByb3RvdHlwZS5nZXRTY2FsZSA9IGZ1bmN0aW9uIChzY2FsZSkge1xyXG4gICAgICAgICAgICB2YXIgYWN0dWFsU2l6ZVNjYWxlID0gdGhpcy5nZXRDdXJyZW50SW1hZ2VBY3R1YWxTaXplU2NhbGUoKTtcclxuICAgICAgICAgICAgaWYgKHNjYWxlIDwgMSkge1xyXG4gICAgICAgICAgICAgICAgc2NhbGUgPSAxO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHNjYWxlID4gYWN0dWFsU2l6ZVNjYWxlKSB7XHJcbiAgICAgICAgICAgICAgICBzY2FsZSA9IGFjdHVhbFNpemVTY2FsZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gc2NhbGU7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBab29tLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuc2V0dGluZ3Muem9vbSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuYnVpbGRUZW1wbGF0ZXMoKTtcclxuICAgICAgICAgICAgdGhpcy5lbmFibGVab29tT25TbGlkZUl0ZW1Mb2FkKCk7XHJcbiAgICAgICAgICAgIHZhciB0YXBwZWQgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLmNvcmUub3V0ZXIub24oJ2RibGNsaWNrLmxnJywgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIV90aGlzLiRMRyhldmVudC50YXJnZXQpLmhhc0NsYXNzKCdsZy1pbWFnZScpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgX3RoaXMuc2V0QWN0dWFsU2l6ZShfdGhpcy5jb3JlLmluZGV4LCBldmVudCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB0aGlzLmNvcmUub3V0ZXIub24oJ3RvdWNoc3RhcnQubGcnLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgIHZhciAkdGFyZ2V0ID0gX3RoaXMuJExHKGV2ZW50LnRhcmdldCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnQudGFyZ2V0VG91Y2hlcy5sZW5ndGggPT09IDEgJiZcclxuICAgICAgICAgICAgICAgICAgICAkdGFyZ2V0Lmhhc0NsYXNzKCdsZy1pbWFnZScpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0YXBwZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFwcGVkID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXBwZWQgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCAzMDApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRhcHBlZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcHBlZCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnNldEFjdHVhbFNpemUoX3RoaXMuY29yZS5pbmRleCwgZXZlbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIC8vIFVwZGF0ZSB6b29tIG9uIHJlc2l6ZSBhbmQgb3JpZW50YXRpb25jaGFuZ2VcclxuICAgICAgICAgICAgdGhpcy5jb3JlLkxHZWwub24obEdFdmVudHMuY29udGFpbmVyUmVzaXplICsgXCIuem9vbSBcIiArIGxHRXZlbnRzLnJvdGF0ZVJpZ2h0ICsgXCIuem9vbSBcIiArIGxHRXZlbnRzLnJvdGF0ZUxlZnQgKyBcIi56b29tIFwiICsgbEdFdmVudHMuZmxpcEhvcml6b250YWwgKyBcIi56b29tIFwiICsgbEdFdmVudHMuZmxpcFZlcnRpY2FsICsgXCIuem9vbVwiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIV90aGlzLmNvcmUubGdPcGVuZWQgfHwgIV90aGlzLmlzSW1hZ2VTbGlkZSgpKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIF90aGlzLnNldFBhZ2VDb3JkcygpO1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuc2V0Wm9vbUVzc2VudGlhbHMoKTtcclxuICAgICAgICAgICAgICAgIF90aGlzLnpvb21JbWFnZShfdGhpcy5zY2FsZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAvLyBVcGRhdGUgem9vbSBvbiByZXNpemUgYW5kIG9yaWVudGF0aW9uY2hhbmdlXHJcbiAgICAgICAgICAgIHRoaXMuJExHKHdpbmRvdykub24oXCJzY3JvbGwubGcuem9vbS5nbG9iYWxcIiArIHRoaXMuY29yZS5sZ0lkLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIV90aGlzLmNvcmUubGdPcGVuZWQpXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuc2Nyb2xsVG9wID0gX3RoaXMuJExHKHdpbmRvdykuc2Nyb2xsVG9wKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB0aGlzLmNvcmUuZ2V0RWxlbWVudEJ5SWQoJ2xnLXpvb20tb3V0Jykub24oJ2NsaWNrLmxnJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLmNvcmUub3V0ZXIuZmluZCgnLmxnLWN1cnJlbnQgLmxnLWltYWdlJykuZ2V0KCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5zY2FsZSAtPSBfdGhpcy5zZXR0aW5ncy5zY2FsZTtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5zY2FsZSA9IF90aGlzLmdldFNjYWxlKF90aGlzLnNjYWxlKTtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5iZWdpblpvb20oX3RoaXMuc2NhbGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnpvb21JbWFnZShfdGhpcy5zY2FsZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB0aGlzLmNvcmUuZ2V0RWxlbWVudEJ5SWQoJ2xnLXpvb20taW4nKS5vbignY2xpY2subGcnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy56b29tSW4oKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHRoaXMuY29yZS5nZXRFbGVtZW50QnlJZCgnbGctYWN0dWFsLXNpemUnKS5vbignY2xpY2subGcnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5zZXRBY3R1YWxTaXplKF90aGlzLmNvcmUuaW5kZXgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdGhpcy5jb3JlLkxHZWwub24obEdFdmVudHMuYmVmb3JlT3BlbiArIFwiLnpvb21cIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuY29yZS5vdXRlci5maW5kKCcubGctaXRlbScpLnJlbW92ZUNsYXNzKCdsZy16b29tYWJsZScpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdGhpcy5jb3JlLkxHZWwub24obEdFdmVudHMuYWZ0ZXJPcGVuICsgXCIuem9vbVwiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5zY3JvbGxUb3AgPSBfdGhpcy4kTEcod2luZG93KS5zY3JvbGxUb3AoKTtcclxuICAgICAgICAgICAgICAgIC8vIFNldCB0aGUgaW5pdGlhbCB2YWx1ZSBjZW50ZXJcclxuICAgICAgICAgICAgICAgIF90aGlzLnBhZ2VYID0gX3RoaXMuY29yZS5vdXRlci53aWR0aCgpIC8gMjtcclxuICAgICAgICAgICAgICAgIF90aGlzLnBhZ2VZID0gX3RoaXMuY29yZS5vdXRlci5oZWlnaHQoKSAvIDIgKyBfdGhpcy5zY3JvbGxUb3A7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5zY2FsZSA9IDE7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAvLyBSZXNldCB6b29tIG9uIHNsaWRlIGNoYW5nZVxyXG4gICAgICAgICAgICB0aGlzLmNvcmUuTEdlbC5vbihsR0V2ZW50cy5hZnRlclNsaWRlICsgXCIuem9vbVwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgIHZhciBwcmV2SW5kZXggPSBldmVudC5kZXRhaWwucHJldkluZGV4O1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuc2NhbGUgPSAxO1xyXG4gICAgICAgICAgICAgICAgX3RoaXMucG9zaXRpb25DaGFuZ2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5yZXNldFpvb20ocHJldkluZGV4KTtcclxuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5pc0ltYWdlU2xpZGUoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnNldFpvb21Fc3NlbnRpYWxzKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAvLyBEcmFnIG9wdGlvbiBhZnRlciB6b29tXHJcbiAgICAgICAgICAgIHRoaXMuem9vbURyYWcoKTtcclxuICAgICAgICAgICAgdGhpcy5waW5jaFpvb20oKTtcclxuICAgICAgICAgICAgdGhpcy56b29tU3dpcGUoKTtcclxuICAgICAgICAgICAgLy8gU3RvcmUgdGhlIHpvb21hYmxlIHRpbWVvdXQgdmFsdWUganVzdCB0byBjbGVhciBpdCB3aGlsZSBjbG9zaW5nXHJcbiAgICAgICAgICAgIHRoaXMuem9vbWFibGVUaW1lb3V0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMucG9zaXRpb25DaGFuZ2VkID0gZmFsc2U7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBab29tLnByb3RvdHlwZS56b29tSW4gPSBmdW5jdGlvbiAoc2NhbGUpIHtcclxuICAgICAgICAgICAgLy8gQWxsb3cgem9vbSBvbmx5IG9uIGltYWdlXHJcbiAgICAgICAgICAgIGlmICghdGhpcy5pc0ltYWdlU2xpZGUoKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChzY2FsZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zY2FsZSA9IHNjYWxlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zY2FsZSArPSB0aGlzLnNldHRpbmdzLnNjYWxlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuc2NhbGUgPSB0aGlzLmdldFNjYWxlKHRoaXMuc2NhbGUpO1xyXG4gICAgICAgICAgICB0aGlzLmJlZ2luWm9vbSh0aGlzLnNjYWxlKTtcclxuICAgICAgICAgICAgdGhpcy56b29tSW1hZ2UodGhpcy5zY2FsZSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvLyBSZXNldCB6b29tIGVmZmVjdFxyXG4gICAgICAgIFpvb20ucHJvdG90eXBlLnJlc2V0Wm9vbSA9IGZ1bmN0aW9uIChpbmRleCkge1xyXG4gICAgICAgICAgICB0aGlzLmNvcmUub3V0ZXIucmVtb3ZlQ2xhc3MoJ2xnLXpvb21lZCBsZy16b29tLWRyYWctdHJhbnNpdGlvbicpO1xyXG4gICAgICAgICAgICB2YXIgJGFjdHVhbFNpemUgPSB0aGlzLmNvcmUuZ2V0RWxlbWVudEJ5SWQoJ2xnLWFjdHVhbC1zaXplJyk7XHJcbiAgICAgICAgICAgIHZhciAkaXRlbSA9IHRoaXMuY29yZS5nZXRTbGlkZUl0ZW0oaW5kZXggIT09IHVuZGVmaW5lZCA/IGluZGV4IDogdGhpcy5jb3JlLmluZGV4KTtcclxuICAgICAgICAgICAgJGFjdHVhbFNpemVcclxuICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcyh0aGlzLnNldHRpbmdzLmFjdHVhbFNpemVJY29ucy56b29tT3V0KVxyXG4gICAgICAgICAgICAgICAgLmFkZENsYXNzKHRoaXMuc2V0dGluZ3MuYWN0dWFsU2l6ZUljb25zLnpvb21Jbik7XHJcbiAgICAgICAgICAgICRpdGVtLmZpbmQoJy5sZy1pbWctd3JhcCcpLmZpcnN0KCkucmVtb3ZlQXR0cignc3R5bGUnKTtcclxuICAgICAgICAgICAgJGl0ZW0uZmluZCgnLmxnLWltYWdlJykuZmlyc3QoKS5yZW1vdmVBdHRyKCdzdHlsZScpO1xyXG4gICAgICAgICAgICB0aGlzLnNjYWxlID0gMTtcclxuICAgICAgICAgICAgdGhpcy5sZWZ0ID0gMDtcclxuICAgICAgICAgICAgdGhpcy50b3AgPSAwO1xyXG4gICAgICAgICAgICAvLyBSZXNldCBwYWd4IHBhZ3kgdmFsdWVzIHRvIGNlbnRlclxyXG4gICAgICAgICAgICB0aGlzLnNldFBhZ2VDb3JkcygpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgWm9vbS5wcm90b3R5cGUuZ2V0VG91Y2hEaXN0YW5jZSA9IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBNYXRoLnNxcnQoKGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWCAtIGUudGFyZ2V0VG91Y2hlc1sxXS5wYWdlWCkgKlxyXG4gICAgICAgICAgICAgICAgKGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWCAtIGUudGFyZ2V0VG91Y2hlc1sxXS5wYWdlWCkgK1xyXG4gICAgICAgICAgICAgICAgKGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWSAtIGUudGFyZ2V0VG91Y2hlc1sxXS5wYWdlWSkgKlxyXG4gICAgICAgICAgICAgICAgICAgIChlLnRhcmdldFRvdWNoZXNbMF0ucGFnZVkgLSBlLnRhcmdldFRvdWNoZXNbMV0ucGFnZVkpKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIFpvb20ucHJvdG90eXBlLnBpbmNoWm9vbSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAgICAgdmFyIHN0YXJ0RGlzdCA9IDA7XHJcbiAgICAgICAgICAgIHZhciBwaW5jaFN0YXJ0ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgdmFyIGluaXRTY2FsZSA9IDE7XHJcbiAgICAgICAgICAgIHZhciAkaXRlbSA9IHRoaXMuY29yZS5nZXRTbGlkZUl0ZW0odGhpcy5jb3JlLmluZGV4KTtcclxuICAgICAgICAgICAgdGhpcy5jb3JlLiRpbm5lci5vbigndG91Y2hzdGFydC5sZycsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgICAkaXRlbSA9IF90aGlzLmNvcmUuZ2V0U2xpZGVJdGVtKF90aGlzLmNvcmUuaW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFfdGhpcy5pc0ltYWdlU2xpZGUoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChlLnRhcmdldFRvdWNoZXMubGVuZ3RoID09PSAyICYmXHJcbiAgICAgICAgICAgICAgICAgICAgIV90aGlzLmNvcmUub3V0ZXIuaGFzQ2xhc3MoJ2xnLWZpcnN0LXNsaWRlLWxvYWRpbmcnKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgIChfdGhpcy4kTEcoZS50YXJnZXQpLmhhc0NsYXNzKCdsZy1pdGVtJykgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGl0ZW0uZ2V0KCkuY29udGFpbnMoZS50YXJnZXQpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGluaXRTY2FsZSA9IF90aGlzLnNjYWxlIHx8IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuY29yZS5vdXRlci5yZW1vdmVDbGFzcygnbGctem9vbS1kcmFnLXRyYW5zaXRpb24gbGctem9vbS1kcmFnZ2luZycpO1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmNvcmUudG91Y2hBY3Rpb24gPSAncGluY2gnO1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0RGlzdCA9IF90aGlzLmdldFRvdWNoRGlzdGFuY2UoZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB0aGlzLmNvcmUuJGlubmVyLm9uKCd0b3VjaG1vdmUubGcnLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGUudGFyZ2V0VG91Y2hlcy5sZW5ndGggPT09IDIgJiZcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5jb3JlLnRvdWNoQWN0aW9uID09PSAncGluY2gnICYmXHJcbiAgICAgICAgICAgICAgICAgICAgKF90aGlzLiRMRyhlLnRhcmdldCkuaGFzQ2xhc3MoJ2xnLWl0ZW0nKSB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkaXRlbS5nZXQoKS5jb250YWlucyhlLnRhcmdldCkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBlbmREaXN0ID0gX3RoaXMuZ2V0VG91Y2hEaXN0YW5jZShlKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZGlzdGFuY2UgPSBzdGFydERpc3QgLSBlbmREaXN0O1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghcGluY2hTdGFydGVkICYmIE1hdGguYWJzKGRpc3RhbmNlKSA+IDUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGluY2hTdGFydGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBpbmNoU3RhcnRlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5zY2FsZSA9IE1hdGgubWF4KDEsIGluaXRTY2FsZSArIC1kaXN0YW5jZSAqIDAuMDA4KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuem9vbUltYWdlKF90aGlzLnNjYWxlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB0aGlzLmNvcmUuJGlubmVyLm9uKCd0b3VjaGVuZC5sZycsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMuY29yZS50b3VjaEFjdGlvbiA9PT0gJ3BpbmNoJyAmJlxyXG4gICAgICAgICAgICAgICAgICAgIChfdGhpcy4kTEcoZS50YXJnZXQpLmhhc0NsYXNzKCdsZy1pdGVtJykgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGl0ZW0uZ2V0KCkuY29udGFpbnMoZS50YXJnZXQpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHBpbmNoU3RhcnRlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0RGlzdCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLnNjYWxlIDw9IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMucmVzZXRab29tKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5zY2FsZSA9IF90aGlzLmdldFNjYWxlKF90aGlzLnNjYWxlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuem9vbUltYWdlKF90aGlzLnNjYWxlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuY29yZS5vdXRlci5hZGRDbGFzcygnbGctem9vbWVkJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmNvcmUudG91Y2hBY3Rpb24gPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgWm9vbS5wcm90b3R5cGUudG91Y2hlbmRab29tID0gZnVuY3Rpb24gKHN0YXJ0Q29vcmRzLCBlbmRDb29yZHMsIGFsbG93WCwgYWxsb3dZLCB0b3VjaER1cmF0aW9uLCByb3RhdGVWYWx1ZSkge1xyXG4gICAgICAgICAgICB2YXIgZGlzdGFuY2VYbmV3ID0gZW5kQ29vcmRzLnggLSBzdGFydENvb3Jkcy54O1xyXG4gICAgICAgICAgICB2YXIgZGlzdGFuY2VZbmV3ID0gZW5kQ29vcmRzLnkgLSBzdGFydENvb3Jkcy55O1xyXG4gICAgICAgICAgICB2YXIgc3BlZWRYID0gTWF0aC5hYnMoZGlzdGFuY2VYbmV3KSAvIHRvdWNoRHVyYXRpb24gKyAxO1xyXG4gICAgICAgICAgICB2YXIgc3BlZWRZID0gTWF0aC5hYnMoZGlzdGFuY2VZbmV3KSAvIHRvdWNoRHVyYXRpb24gKyAxO1xyXG4gICAgICAgICAgICBpZiAoc3BlZWRYID4gMikge1xyXG4gICAgICAgICAgICAgICAgc3BlZWRYICs9IDE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHNwZWVkWSA+IDIpIHtcclxuICAgICAgICAgICAgICAgIHNwZWVkWSArPSAxO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGRpc3RhbmNlWG5ldyA9IGRpc3RhbmNlWG5ldyAqIHNwZWVkWDtcclxuICAgICAgICAgICAgZGlzdGFuY2VZbmV3ID0gZGlzdGFuY2VZbmV3ICogc3BlZWRZO1xyXG4gICAgICAgICAgICB2YXIgX0xHZWwgPSB0aGlzLmNvcmVcclxuICAgICAgICAgICAgICAgIC5nZXRTbGlkZUl0ZW0odGhpcy5jb3JlLmluZGV4KVxyXG4gICAgICAgICAgICAgICAgLmZpbmQoJy5sZy1pbWctd3JhcCcpXHJcbiAgICAgICAgICAgICAgICAuZmlyc3QoKTtcclxuICAgICAgICAgICAgdmFyIGRpc3RhbmNlID0ge307XHJcbiAgICAgICAgICAgIGRpc3RhbmNlLnggPSB0aGlzLmxlZnQgKyBkaXN0YW5jZVhuZXcgKiB0aGlzLm1vZGlmaWVyWDtcclxuICAgICAgICAgICAgZGlzdGFuY2UueSA9IHRoaXMudG9wICsgZGlzdGFuY2VZbmV3ICogdGhpcy5tb2RpZmllclk7XHJcbiAgICAgICAgICAgIHZhciBwb3NzaWJsZVN3aXBlQ29yZHMgPSB0aGlzLmdldFBvc3NpYmxlU3dpcGVEcmFnQ29yZHMocm90YXRlVmFsdWUpO1xyXG4gICAgICAgICAgICBpZiAoTWF0aC5hYnMoZGlzdGFuY2VYbmV3KSA+IDE1IHx8IE1hdGguYWJzKGRpc3RhbmNlWW5ldykgPiAxNSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGFsbG93WSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzQmV5b25kUG9zc2libGVUb3AoZGlzdGFuY2UueSwgcG9zc2libGVTd2lwZUNvcmRzLm1pblkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3RhbmNlLnkgPSBwb3NzaWJsZVN3aXBlQ29yZHMubWluWTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5pc0JleW9uZFBvc3NpYmxlQm90dG9tKGRpc3RhbmNlLnksIHBvc3NpYmxlU3dpcGVDb3Jkcy5tYXhZKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkaXN0YW5jZS55ID0gcG9zc2libGVTd2lwZUNvcmRzLm1heFk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGFsbG93WCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzQmV5b25kUG9zc2libGVMZWZ0KGRpc3RhbmNlLngsIHBvc3NpYmxlU3dpcGVDb3Jkcy5taW5YKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkaXN0YW5jZS54ID0gcG9zc2libGVTd2lwZUNvcmRzLm1pblg7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuaXNCZXlvbmRQb3NzaWJsZVJpZ2h0KGRpc3RhbmNlLngsIHBvc3NpYmxlU3dpcGVDb3Jkcy5tYXhYKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkaXN0YW5jZS54ID0gcG9zc2libGVTd2lwZUNvcmRzLm1heFg7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGFsbG93WSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudG9wID0gZGlzdGFuY2UueTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGRpc3RhbmNlLnkgPSB0aGlzLnRvcDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChhbGxvd1gpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmxlZnQgPSBkaXN0YW5jZS54O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGlzdGFuY2UueCA9IHRoaXMubGVmdDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0Wm9vbVN3aXBlU3R5bGVzKF9MR2VsLCBkaXN0YW5jZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBvc2l0aW9uQ2hhbmdlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIFpvb20ucHJvdG90eXBlLmdldFpvb21Td2lwZUNvcmRzID0gZnVuY3Rpb24gKHN0YXJ0Q29vcmRzLCBlbmRDb29yZHMsIGFsbG93WCwgYWxsb3dZLCBwb3NzaWJsZVN3aXBlQ29yZHMpIHtcclxuICAgICAgICAgICAgdmFyIGRpc3RhbmNlID0ge307XHJcbiAgICAgICAgICAgIGlmIChhbGxvd1kpIHtcclxuICAgICAgICAgICAgICAgIGRpc3RhbmNlLnkgPVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudG9wICsgKGVuZENvb3Jkcy55IC0gc3RhcnRDb29yZHMueSkgKiB0aGlzLm1vZGlmaWVyWTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzQmV5b25kUG9zc2libGVUb3AoZGlzdGFuY2UueSwgcG9zc2libGVTd2lwZUNvcmRzLm1pblkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRpZmZNaW5ZID0gcG9zc2libGVTd2lwZUNvcmRzLm1pblkgLSBkaXN0YW5jZS55O1xyXG4gICAgICAgICAgICAgICAgICAgIGRpc3RhbmNlLnkgPSBwb3NzaWJsZVN3aXBlQ29yZHMubWluWSAtIGRpZmZNaW5ZIC8gNjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuaXNCZXlvbmRQb3NzaWJsZUJvdHRvbShkaXN0YW5jZS55LCBwb3NzaWJsZVN3aXBlQ29yZHMubWF4WSkpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZGlmZk1heFkgPSBkaXN0YW5jZS55IC0gcG9zc2libGVTd2lwZUNvcmRzLm1heFk7XHJcbiAgICAgICAgICAgICAgICAgICAgZGlzdGFuY2UueSA9IHBvc3NpYmxlU3dpcGVDb3Jkcy5tYXhZICsgZGlmZk1heFkgLyA2O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZGlzdGFuY2UueSA9IHRoaXMudG9wO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChhbGxvd1gpIHtcclxuICAgICAgICAgICAgICAgIGRpc3RhbmNlLnggPVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubGVmdCArIChlbmRDb29yZHMueCAtIHN0YXJ0Q29vcmRzLngpICogdGhpcy5tb2RpZmllclg7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pc0JleW9uZFBvc3NpYmxlTGVmdChkaXN0YW5jZS54LCBwb3NzaWJsZVN3aXBlQ29yZHMubWluWCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZGlmZk1pblggPSBwb3NzaWJsZVN3aXBlQ29yZHMubWluWCAtIGRpc3RhbmNlLng7XHJcbiAgICAgICAgICAgICAgICAgICAgZGlzdGFuY2UueCA9IHBvc3NpYmxlU3dpcGVDb3Jkcy5taW5YIC0gZGlmZk1pblggLyA2O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5pc0JleW9uZFBvc3NpYmxlUmlnaHQoZGlzdGFuY2UueCwgcG9zc2libGVTd2lwZUNvcmRzLm1heFgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRpZk1heFggPSBkaXN0YW5jZS54IC0gcG9zc2libGVTd2lwZUNvcmRzLm1heFg7XHJcbiAgICAgICAgICAgICAgICAgICAgZGlzdGFuY2UueCA9IHBvc3NpYmxlU3dpcGVDb3Jkcy5tYXhYICsgZGlmTWF4WCAvIDY7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBkaXN0YW5jZS54ID0gdGhpcy5sZWZ0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBkaXN0YW5jZTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIFpvb20ucHJvdG90eXBlLmlzQmV5b25kUG9zc2libGVMZWZ0ID0gZnVuY3Rpb24gKHgsIG1pblgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHggPj0gbWluWDtcclxuICAgICAgICB9O1xyXG4gICAgICAgIFpvb20ucHJvdG90eXBlLmlzQmV5b25kUG9zc2libGVSaWdodCA9IGZ1bmN0aW9uICh4LCBtYXhYKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB4IDw9IG1heFg7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBab29tLnByb3RvdHlwZS5pc0JleW9uZFBvc3NpYmxlVG9wID0gZnVuY3Rpb24gKHksIG1pblkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHkgPj0gbWluWTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIFpvb20ucHJvdG90eXBlLmlzQmV5b25kUG9zc2libGVCb3R0b20gPSBmdW5jdGlvbiAoeSwgbWF4WSkge1xyXG4gICAgICAgICAgICByZXR1cm4geSA8PSBtYXhZO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgWm9vbS5wcm90b3R5cGUuaXNJbWFnZVNsaWRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgY3VycmVudEl0ZW0gPSB0aGlzLmNvcmUuZ2FsbGVyeUl0ZW1zW3RoaXMuY29yZS5pbmRleF07XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvcmUuZ2V0U2xpZGVUeXBlKGN1cnJlbnRJdGVtKSA9PT0gJ2ltYWdlJztcclxuICAgICAgICB9O1xyXG4gICAgICAgIFpvb20ucHJvdG90eXBlLmdldFBvc3NpYmxlU3dpcGVEcmFnQ29yZHMgPSBmdW5jdGlvbiAocm90YXRlVmFsdWUsIHNjYWxlKSB7XHJcbiAgICAgICAgICAgIHZhciBkYXRhU2NhbGUgPSBzY2FsZSB8fCB0aGlzLnNjYWxlIHx8IDE7XHJcbiAgICAgICAgICAgIHZhciBlbERhdGFTY2FsZSA9IE1hdGguYWJzKGRhdGFTY2FsZSk7XHJcbiAgICAgICAgICAgIHZhciBfYSA9IHRoaXMuY29yZS5tZWRpYUNvbnRhaW5lclBvc2l0aW9uLCB0b3AgPSBfYS50b3AsIGJvdHRvbSA9IF9hLmJvdHRvbTtcclxuICAgICAgICAgICAgdmFyIHRvcEJvdHRvbVNwYWNpbmcgPSBNYXRoLmFicyh0b3AgLSBib3R0b20pIC8gMjtcclxuICAgICAgICAgICAgdmFyIG1pblkgPSAodGhpcy5pbWFnZVlTaXplIC0gdGhpcy5jb250YWluZXJSZWN0LmhlaWdodCkgLyAyICtcclxuICAgICAgICAgICAgICAgIHRvcEJvdHRvbVNwYWNpbmcgKiB0aGlzLm1vZGlmaWVyWDtcclxuICAgICAgICAgICAgdmFyIG1heFkgPSB0aGlzLmNvbnRhaW5lclJlY3QuaGVpZ2h0IC0gdGhpcy5pbWFnZVlTaXplICogZWxEYXRhU2NhbGUgKyBtaW5ZO1xyXG4gICAgICAgICAgICB2YXIgbWluWCA9ICh0aGlzLmltYWdlWFNpemUgLSB0aGlzLmNvbnRhaW5lclJlY3Qud2lkdGgpIC8gMjtcclxuICAgICAgICAgICAgdmFyIG1heFggPSB0aGlzLmNvbnRhaW5lclJlY3Qud2lkdGggLSB0aGlzLmltYWdlWFNpemUgKiBlbERhdGFTY2FsZSArIG1pblg7XHJcbiAgICAgICAgICAgIHZhciBwb3NzaWJsZVN3aXBlQ29yZHMgPSB7XHJcbiAgICAgICAgICAgICAgICBtaW5ZOiBtaW5ZLFxyXG4gICAgICAgICAgICAgICAgbWF4WTogbWF4WSxcclxuICAgICAgICAgICAgICAgIG1pblg6IG1pblgsXHJcbiAgICAgICAgICAgICAgICBtYXhYOiBtYXhYLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBpZiAoTWF0aC5hYnMocm90YXRlVmFsdWUpID09PSA5MCkge1xyXG4gICAgICAgICAgICAgICAgcG9zc2libGVTd2lwZUNvcmRzID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIG1pblk6IG1pblgsXHJcbiAgICAgICAgICAgICAgICAgICAgbWF4WTogbWF4WCxcclxuICAgICAgICAgICAgICAgICAgICBtaW5YOiBtaW5ZLFxyXG4gICAgICAgICAgICAgICAgICAgIG1heFg6IG1heFksXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBwb3NzaWJsZVN3aXBlQ29yZHM7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBab29tLnByb3RvdHlwZS5zZXRab29tU3dpcGVTdHlsZXMgPSBmdW5jdGlvbiAoTEdlbCwgZGlzdGFuY2UpIHtcclxuICAgICAgICAgICAgTEdlbC5jc3MoJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUzZCgnICsgZGlzdGFuY2UueCArICdweCwgJyArIGRpc3RhbmNlLnkgKyAncHgsIDApJyk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBab29tLnByb3RvdHlwZS56b29tU3dpcGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgICAgIHZhciBzdGFydENvb3JkcyA9IHt9O1xyXG4gICAgICAgICAgICB2YXIgZW5kQ29vcmRzID0ge307XHJcbiAgICAgICAgICAgIHZhciBpc01vdmVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIC8vIEFsbG93IHggZGlyZWN0aW9uIGRyYWdcclxuICAgICAgICAgICAgdmFyIGFsbG93WCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAvLyBBbGxvdyBZIGRpcmVjdGlvbiBkcmFnXHJcbiAgICAgICAgICAgIHZhciBhbGxvd1kgPSBmYWxzZTtcclxuICAgICAgICAgICAgdmFyIHN0YXJ0VGltZSA9IG5ldyBEYXRlKCk7XHJcbiAgICAgICAgICAgIHZhciBlbmRUaW1lID0gbmV3IERhdGUoKTtcclxuICAgICAgICAgICAgdmFyIHBvc3NpYmxlU3dpcGVDb3JkcztcclxuICAgICAgICAgICAgdmFyIF9MR2VsO1xyXG4gICAgICAgICAgICB2YXIgJGl0ZW0gPSB0aGlzLmNvcmUuZ2V0U2xpZGVJdGVtKHRoaXMuY29yZS5pbmRleCk7XHJcbiAgICAgICAgICAgIHRoaXMuY29yZS4kaW5uZXIub24oJ3RvdWNoc3RhcnQubGcnLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgLy8gQWxsb3cgem9vbSBvbmx5IG9uIGltYWdlXHJcbiAgICAgICAgICAgICAgICBpZiAoIV90aGlzLmlzSW1hZ2VTbGlkZSgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgJGl0ZW0gPSBfdGhpcy5jb3JlLmdldFNsaWRlSXRlbShfdGhpcy5jb3JlLmluZGV4KTtcclxuICAgICAgICAgICAgICAgIGlmICgoX3RoaXMuJExHKGUudGFyZ2V0KS5oYXNDbGFzcygnbGctaXRlbScpIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgJGl0ZW0uZ2V0KCkuY29udGFpbnMoZS50YXJnZXQpKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgIGUudGFyZ2V0VG91Y2hlcy5sZW5ndGggPT09IDEgJiZcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5jb3JlLm91dGVyLmhhc0NsYXNzKCdsZy16b29tZWQnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICBzdGFydFRpbWUgPSBuZXcgRGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmNvcmUudG91Y2hBY3Rpb24gPSAnem9vbVN3aXBlJztcclxuICAgICAgICAgICAgICAgICAgICBfTEdlbCA9IF90aGlzLmNvcmVcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmdldFNsaWRlSXRlbShfdGhpcy5jb3JlLmluZGV4KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuZmluZCgnLmxnLWltZy13cmFwJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmZpcnN0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRyYWdBbGxvd2VkQXhpc2VzID0gX3RoaXMuZ2V0RHJhZ0FsbG93ZWRBeGlzZXMoTWF0aC5hYnMoX3RoaXMucm90YXRlVmFsdWUpKTtcclxuICAgICAgICAgICAgICAgICAgICBhbGxvd1kgPSBkcmFnQWxsb3dlZEF4aXNlcy5hbGxvd1k7XHJcbiAgICAgICAgICAgICAgICAgICAgYWxsb3dYID0gZHJhZ0FsbG93ZWRBeGlzZXMuYWxsb3dYO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChhbGxvd1ggfHwgYWxsb3dZKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0Q29vcmRzID0gX3RoaXMuZ2V0U3dpcGVDb3JkcyhlLCBNYXRoLmFicyhfdGhpcy5yb3RhdGVWYWx1ZSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBwb3NzaWJsZVN3aXBlQ29yZHMgPSBfdGhpcy5nZXRQb3NzaWJsZVN3aXBlRHJhZ0NvcmRzKF90aGlzLnJvdGF0ZVZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyByZXNldCBvcGFjaXR5IGFuZCB0cmFuc2l0aW9uIGR1cmF0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuY29yZS5vdXRlci5hZGRDbGFzcygnbGctem9vbS1kcmFnZ2luZyBsZy16b29tLWRyYWctdHJhbnNpdGlvbicpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdGhpcy5jb3JlLiRpbm5lci5vbigndG91Y2htb3ZlLmxnJywgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChlLnRhcmdldFRvdWNoZXMubGVuZ3RoID09PSAxICYmXHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuY29yZS50b3VjaEFjdGlvbiA9PT0gJ3pvb21Td2lwZScgJiZcclxuICAgICAgICAgICAgICAgICAgICAoX3RoaXMuJExHKGUudGFyZ2V0KS5oYXNDbGFzcygnbGctaXRlbScpIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRpdGVtLmdldCgpLmNvbnRhaW5zKGUudGFyZ2V0KSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuY29yZS50b3VjaEFjdGlvbiA9ICd6b29tU3dpcGUnO1xyXG4gICAgICAgICAgICAgICAgICAgIGVuZENvb3JkcyA9IF90aGlzLmdldFN3aXBlQ29yZHMoZSwgTWF0aC5hYnMoX3RoaXMucm90YXRlVmFsdWUpKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZGlzdGFuY2UgPSBfdGhpcy5nZXRab29tU3dpcGVDb3JkcyhzdGFydENvb3JkcywgZW5kQ29vcmRzLCBhbGxvd1gsIGFsbG93WSwgcG9zc2libGVTd2lwZUNvcmRzKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoTWF0aC5hYnMoZW5kQ29vcmRzLnggLSBzdGFydENvb3Jkcy54KSA+IDE1IHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIE1hdGguYWJzKGVuZENvb3Jkcy55IC0gc3RhcnRDb29yZHMueSkgPiAxNSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpc01vdmVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuc2V0Wm9vbVN3aXBlU3R5bGVzKF9MR2VsLCBkaXN0YW5jZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdGhpcy5jb3JlLiRpbm5lci5vbigndG91Y2hlbmQubGcnLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLmNvcmUudG91Y2hBY3Rpb24gPT09ICd6b29tU3dpcGUnICYmXHJcbiAgICAgICAgICAgICAgICAgICAgKF90aGlzLiRMRyhlLnRhcmdldCkuaGFzQ2xhc3MoJ2xnLWl0ZW0nKSB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkaXRlbS5nZXQoKS5jb250YWlucyhlLnRhcmdldCkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuY29yZS50b3VjaEFjdGlvbiA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5jb3JlLm91dGVyLnJlbW92ZUNsYXNzKCdsZy16b29tLWRyYWdnaW5nJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpc01vdmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaXNNb3ZlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGVuZFRpbWUgPSBuZXcgRGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0b3VjaER1cmF0aW9uID0gZW5kVGltZS52YWx1ZU9mKCkgLSBzdGFydFRpbWUudmFsdWVPZigpO1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnRvdWNoZW5kWm9vbShzdGFydENvb3JkcywgZW5kQ29vcmRzLCBhbGxvd1gsIGFsbG93WSwgdG91Y2hEdXJhdGlvbiwgX3RoaXMucm90YXRlVmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIFpvb20ucHJvdG90eXBlLnpvb21EcmFnID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgICAgICB2YXIgc3RhcnRDb29yZHMgPSB7fTtcclxuICAgICAgICAgICAgdmFyIGVuZENvb3JkcyA9IHt9O1xyXG4gICAgICAgICAgICB2YXIgaXNEcmFnZ2luZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICB2YXIgaXNNb3ZlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAvLyBBbGxvdyB4IGRpcmVjdGlvbiBkcmFnXHJcbiAgICAgICAgICAgIHZhciBhbGxvd1ggPSBmYWxzZTtcclxuICAgICAgICAgICAgLy8gQWxsb3cgWSBkaXJlY3Rpb24gZHJhZ1xyXG4gICAgICAgICAgICB2YXIgYWxsb3dZID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHZhciBzdGFydFRpbWU7XHJcbiAgICAgICAgICAgIHZhciBlbmRUaW1lO1xyXG4gICAgICAgICAgICB2YXIgcG9zc2libGVTd2lwZUNvcmRzO1xyXG4gICAgICAgICAgICB2YXIgX0xHZWw7XHJcbiAgICAgICAgICAgIHRoaXMuY29yZS5vdXRlci5vbignbW91c2Vkb3duLmxnLnpvb20nLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgLy8gQWxsb3cgem9vbSBvbmx5IG9uIGltYWdlXHJcbiAgICAgICAgICAgICAgICBpZiAoIV90aGlzLmlzSW1hZ2VTbGlkZSgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdmFyICRpdGVtID0gX3RoaXMuY29yZS5nZXRTbGlkZUl0ZW0oX3RoaXMuY29yZS5pbmRleCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMuJExHKGUudGFyZ2V0KS5oYXNDbGFzcygnbGctaXRlbScpIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgJGl0ZW0uZ2V0KCkuY29udGFpbnMoZS50YXJnZXQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRUaW1lID0gbmV3IERhdGUoKTtcclxuICAgICAgICAgICAgICAgICAgICBfTEdlbCA9IF90aGlzLmNvcmVcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmdldFNsaWRlSXRlbShfdGhpcy5jb3JlLmluZGV4KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuZmluZCgnLmxnLWltZy13cmFwJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmZpcnN0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRyYWdBbGxvd2VkQXhpc2VzID0gX3RoaXMuZ2V0RHJhZ0FsbG93ZWRBeGlzZXMoTWF0aC5hYnMoX3RoaXMucm90YXRlVmFsdWUpKTtcclxuICAgICAgICAgICAgICAgICAgICBhbGxvd1kgPSBkcmFnQWxsb3dlZEF4aXNlcy5hbGxvd1k7XHJcbiAgICAgICAgICAgICAgICAgICAgYWxsb3dYID0gZHJhZ0FsbG93ZWRBeGlzZXMuYWxsb3dYO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChfdGhpcy5jb3JlLm91dGVyLmhhc0NsYXNzKCdsZy16b29tZWQnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMuJExHKGUudGFyZ2V0KS5oYXNDbGFzcygnbGctb2JqZWN0JykgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChhbGxvd1ggfHwgYWxsb3dZKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRDb29yZHMgPSBfdGhpcy5nZXREcmFnQ29yZHMoZSwgTWF0aC5hYnMoX3RoaXMucm90YXRlVmFsdWUpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc3NpYmxlU3dpcGVDb3JkcyA9IF90aGlzLmdldFBvc3NpYmxlU3dpcGVEcmFnQ29yZHMoX3RoaXMucm90YXRlVmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNEcmFnZ2luZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAqKiBGaXggZm9yIHdlYmtpdCBjdXJzb3IgaXNzdWUgaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTI2NzIzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5jb3JlLm91dGVyLmdldCgpLnNjcm9sbExlZnQgKz0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmNvcmUub3V0ZXIuZ2V0KCkuc2Nyb2xsTGVmdCAtPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuY29yZS5vdXRlclxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnbGctZ3JhYicpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCdsZy1ncmFiYmluZyBsZy16b29tLWRyYWctdHJhbnNpdGlvbiBsZy16b29tLWRyYWdnaW5nJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyByZXNldCBvcGFjaXR5IGFuZCB0cmFuc2l0aW9uIGR1cmF0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB0aGlzLiRMRyh3aW5kb3cpLm9uKFwibW91c2Vtb3ZlLmxnLnpvb20uZ2xvYmFsXCIgKyB0aGlzLmNvcmUubGdJZCwgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChpc0RyYWdnaW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaXNNb3ZlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgZW5kQ29vcmRzID0gX3RoaXMuZ2V0RHJhZ0NvcmRzKGUsIE1hdGguYWJzKF90aGlzLnJvdGF0ZVZhbHVlKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRpc3RhbmNlID0gX3RoaXMuZ2V0Wm9vbVN3aXBlQ29yZHMoc3RhcnRDb29yZHMsIGVuZENvb3JkcywgYWxsb3dYLCBhbGxvd1ksIHBvc3NpYmxlU3dpcGVDb3Jkcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuc2V0Wm9vbVN3aXBlU3R5bGVzKF9MR2VsLCBkaXN0YW5jZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB0aGlzLiRMRyh3aW5kb3cpLm9uKFwibW91c2V1cC5sZy56b29tLmdsb2JhbFwiICsgdGhpcy5jb3JlLmxnSWQsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaXNEcmFnZ2luZykge1xyXG4gICAgICAgICAgICAgICAgICAgIGVuZFRpbWUgPSBuZXcgRGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlzRHJhZ2dpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5jb3JlLm91dGVyLnJlbW92ZUNsYXNzKCdsZy16b29tLWRyYWdnaW5nJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gRml4IGZvciBjaHJvbWUgbW91c2UgbW92ZSBvbiBjbGlja1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc01vdmVkICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChzdGFydENvb3Jkcy54ICE9PSBlbmRDb29yZHMueCB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRDb29yZHMueSAhPT0gZW5kQ29vcmRzLnkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZENvb3JkcyA9IF90aGlzLmdldERyYWdDb3JkcyhlLCBNYXRoLmFicyhfdGhpcy5yb3RhdGVWYWx1ZSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdG91Y2hEdXJhdGlvbiA9IGVuZFRpbWUudmFsdWVPZigpIC0gc3RhcnRUaW1lLnZhbHVlT2YoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMudG91Y2hlbmRab29tKHN0YXJ0Q29vcmRzLCBlbmRDb29yZHMsIGFsbG93WCwgYWxsb3dZLCB0b3VjaER1cmF0aW9uLCBfdGhpcy5yb3RhdGVWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlzTW92ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIF90aGlzLmNvcmUub3V0ZXIucmVtb3ZlQ2xhc3MoJ2xnLWdyYWJiaW5nJykuYWRkQ2xhc3MoJ2xnLWdyYWInKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBab29tLnByb3RvdHlwZS5jbG9zZUdhbGxlcnkgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVzZXRab29tKCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBab29tLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAvLyBVbmJpbmQgYWxsIGV2ZW50cyBhZGRlZCBieSBsaWdodEdhbGxlcnkgem9vbSBwbHVnaW5cclxuICAgICAgICAgICAgdGhpcy4kTEcod2luZG93KS5vZmYoXCIubGcuem9vbS5nbG9iYWxcIiArIHRoaXMuY29yZS5sZ0lkKTtcclxuICAgICAgICAgICAgdGhpcy5jb3JlLkxHZWwub2ZmKCcubGcuem9vbScpO1xyXG4gICAgICAgICAgICB0aGlzLmNvcmUuTEdlbC5vZmYoJy56b29tJyk7XHJcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnpvb21hYmxlVGltZW91dCk7XHJcbiAgICAgICAgICAgIHRoaXMuem9vbWFibGVUaW1lb3V0ID0gZmFsc2U7XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gWm9vbTtcclxuICAgIH0oKSk7XG5cbiAgICByZXR1cm4gWm9vbTtcblxufSkpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxnLXpvb20udW1kLmpzLm1hcFxuIiwiLyohXG4gKiBsaWdodGdhbGxlcnkgfCAyLjQuMC1iZXRhLjAgfCBEZWNlbWJlciAxMnRoIDIwMjFcbiAqIGh0dHA6Ly93d3cubGlnaHRnYWxsZXJ5anMuY29tL1xuICogQ29weXJpZ2h0IChjKSAyMDIwIFNhY2hpbiBOZXJhdmF0aDtcbiAqIEBsaWNlbnNlIEdQTHYzXG4gKi9cblxuKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKSA6XG4gICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKGZhY3RvcnkpIDpcbiAgICAoZ2xvYmFsID0gdHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsVGhpcyA6IGdsb2JhbCB8fCBzZWxmLCBnbG9iYWwubGdWaWRlbyA9IGZhY3RvcnkoKSk7XG59KHRoaXMsIChmdW5jdGlvbiAoKSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8qISAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gICAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXHJcblxyXG4gICAgUGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kL29yIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3IgYW55XHJcbiAgICBwdXJwb3NlIHdpdGggb3Igd2l0aG91dCBmZWUgaXMgaGVyZWJ5IGdyYW50ZWQuXHJcblxyXG4gICAgVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiBBTkQgVEhFIEFVVEhPUiBESVNDTEFJTVMgQUxMIFdBUlJBTlRJRVMgV0lUSFxyXG4gICAgUkVHQVJEIFRPIFRISVMgU09GVFdBUkUgSU5DTFVESU5HIEFMTCBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZXHJcbiAgICBBTkQgRklUTkVTUy4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUiBCRSBMSUFCTEUgRk9SIEFOWSBTUEVDSUFMLCBESVJFQ1QsXHJcbiAgICBJTkRJUkVDVCwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIE9SIEFOWSBEQU1BR0VTIFdIQVRTT0VWRVIgUkVTVUxUSU5HIEZST01cclxuICAgIExPU1MgT0YgVVNFLCBEQVRBIE9SIFBST0ZJVFMsIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBORUdMSUdFTkNFIE9SXHJcbiAgICBPVEhFUiBUT1JUSU9VUyBBQ1RJT04sIEFSSVNJTkcgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgVVNFIE9SXHJcbiAgICBQRVJGT1JNQU5DRSBPRiBUSElTIFNPRlRXQVJFLlxyXG4gICAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuXHJcbiAgICB2YXIgX19hc3NpZ24gPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gX19hc3NpZ24odCkge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpIHRbcF0gPSBzW3BdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0O1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbiAgICB9O1xuXG4gICAgdmFyIHZpZGVvU2V0dGluZ3MgPSB7XHJcbiAgICAgICAgYXV0b3BsYXlGaXJzdFZpZGVvOiB0cnVlLFxyXG4gICAgICAgIHlvdVR1YmVQbGF5ZXJQYXJhbXM6IGZhbHNlLFxyXG4gICAgICAgIHZpbWVvUGxheWVyUGFyYW1zOiBmYWxzZSxcclxuICAgICAgICB3aXN0aWFQbGF5ZXJQYXJhbXM6IGZhbHNlLFxyXG4gICAgICAgIGdvdG9OZXh0U2xpZGVPblZpZGVvRW5kOiB0cnVlLFxyXG4gICAgICAgIGF1dG9wbGF5VmlkZW9PblNsaWRlOiBmYWxzZSxcclxuICAgICAgICB2aWRlb2pzOiBmYWxzZSxcclxuICAgICAgICB2aWRlb2pzT3B0aW9uczoge30sXHJcbiAgICB9O1xuXG4gICAgLyoqXHJcbiAgICAgKiBMaXN0IG9mIGxpZ2h0R2FsbGVyeSBldmVudHNcclxuICAgICAqIEFsbCBldmVudHMgc2hvdWxkIGJlIGRvY3VtZW50ZWQgaGVyZVxyXG4gICAgICogQmVsb3cgaW50ZXJmYWNlcyBhcmUgdXNlZCB0byBidWlsZCB0aGUgd2Vic2l0ZSBkb2N1bWVudGF0aW9uc1xyXG4gICAgICogKi9cclxuICAgIHZhciBsR0V2ZW50cyA9IHtcclxuICAgICAgICBhZnRlckFwcGVuZFNsaWRlOiAnbGdBZnRlckFwcGVuZFNsaWRlJyxcclxuICAgICAgICBpbml0OiAnbGdJbml0JyxcclxuICAgICAgICBoYXNWaWRlbzogJ2xnSGFzVmlkZW8nLFxyXG4gICAgICAgIGNvbnRhaW5lclJlc2l6ZTogJ2xnQ29udGFpbmVyUmVzaXplJyxcclxuICAgICAgICB1cGRhdGVTbGlkZXM6ICdsZ1VwZGF0ZVNsaWRlcycsXHJcbiAgICAgICAgYWZ0ZXJBcHBlbmRTdWJIdG1sOiAnbGdBZnRlckFwcGVuZFN1Ykh0bWwnLFxyXG4gICAgICAgIGJlZm9yZU9wZW46ICdsZ0JlZm9yZU9wZW4nLFxyXG4gICAgICAgIGFmdGVyT3BlbjogJ2xnQWZ0ZXJPcGVuJyxcclxuICAgICAgICBzbGlkZUl0ZW1Mb2FkOiAnbGdTbGlkZUl0ZW1Mb2FkJyxcclxuICAgICAgICBiZWZvcmVTbGlkZTogJ2xnQmVmb3JlU2xpZGUnLFxyXG4gICAgICAgIGFmdGVyU2xpZGU6ICdsZ0FmdGVyU2xpZGUnLFxyXG4gICAgICAgIHBvc3RlckNsaWNrOiAnbGdQb3N0ZXJDbGljaycsXHJcbiAgICAgICAgZHJhZ1N0YXJ0OiAnbGdEcmFnU3RhcnQnLFxyXG4gICAgICAgIGRyYWdNb3ZlOiAnbGdEcmFnTW92ZScsXHJcbiAgICAgICAgZHJhZ0VuZDogJ2xnRHJhZ0VuZCcsXHJcbiAgICAgICAgYmVmb3JlTmV4dFNsaWRlOiAnbGdCZWZvcmVOZXh0U2xpZGUnLFxyXG4gICAgICAgIGJlZm9yZVByZXZTbGlkZTogJ2xnQmVmb3JlUHJldlNsaWRlJyxcclxuICAgICAgICBiZWZvcmVDbG9zZTogJ2xnQmVmb3JlQ2xvc2UnLFxyXG4gICAgICAgIGFmdGVyQ2xvc2U6ICdsZ0FmdGVyQ2xvc2UnLFxyXG4gICAgICAgIHJvdGF0ZUxlZnQ6ICdsZ1JvdGF0ZUxlZnQnLFxyXG4gICAgICAgIHJvdGF0ZVJpZ2h0OiAnbGdSb3RhdGVSaWdodCcsXHJcbiAgICAgICAgZmxpcEhvcml6b250YWw6ICdsZ0ZsaXBIb3Jpem9udGFsJyxcclxuICAgICAgICBmbGlwVmVydGljYWw6ICdsZ0ZsaXBWZXJ0aWNhbCcsXHJcbiAgICAgICAgYXV0b3BsYXk6ICdsZ0F1dG9wbGF5JyxcclxuICAgICAgICBhdXRvcGxheVN0YXJ0OiAnbGdBdXRvcGxheVN0YXJ0JyxcclxuICAgICAgICBhdXRvcGxheVN0b3A6ICdsZ0F1dG9wbGF5U3RvcCcsXHJcbiAgICB9O1xuXG4gICAgdmFyIHBhcmFtID0gZnVuY3Rpb24gKG9iaikge1xyXG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyhvYmopXHJcbiAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKGspIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChrKSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudChvYmpba10pO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5qb2luKCcmJyk7XHJcbiAgICB9O1xyXG4gICAgdmFyIGdldFZpbWVvVVJMUGFyYW1zID0gZnVuY3Rpb24gKGRlZmF1bHRQYXJhbXMsIHZpZGVvSW5mbykge1xyXG4gICAgICAgIGlmICghdmlkZW9JbmZvIHx8ICF2aWRlb0luZm8udmltZW8pXHJcbiAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICB2YXIgdXJsUGFyYW1zID0gdmlkZW9JbmZvLnZpbWVvWzJdIHx8ICcnO1xyXG4gICAgICAgIHVybFBhcmFtcyA9XHJcbiAgICAgICAgICAgIHVybFBhcmFtc1swXSA9PSAnPycgPyAnJicgKyB1cmxQYXJhbXMuc2xpY2UoMSkgOiB1cmxQYXJhbXMgfHwgJyc7XHJcbiAgICAgICAgdmFyIGRlZmF1bHRQbGF5ZXJQYXJhbXMgPSBkZWZhdWx0UGFyYW1zXHJcbiAgICAgICAgICAgID8gJyYnICsgcGFyYW0oZGVmYXVsdFBhcmFtcylcclxuICAgICAgICAgICAgOiAnJztcclxuICAgICAgICAvLyBGb3IgdmltZW8gbGFzdCBwYXJtcyBnZXRzIHByaW9yaXR5IGlmIGR1cGxpY2F0ZXMgZm91bmRcclxuICAgICAgICB2YXIgdmltZW9QbGF5ZXJQYXJhbXMgPSBcIj9hdXRvcGxheT0wJm11dGVkPTFcIiArIGRlZmF1bHRQbGF5ZXJQYXJhbXMgKyB1cmxQYXJhbXM7XHJcbiAgICAgICAgcmV0dXJuIHZpbWVvUGxheWVyUGFyYW1zO1xyXG4gICAgfTtcblxuICAgIC8qKlxyXG4gICAgICogVmlkZW8gbW9kdWxlIGZvciBsaWdodEdhbGxlcnlcclxuICAgICAqIFN1cHBvcnRzIEhUTUw1LCBZb3VUdWJlLCBWaW1lbywgd2lzdGlhIHZpZGVvc1xyXG4gICAgICpcclxuICAgICAqXHJcbiAgICAgKiBAcmVmIFdpc3RpYVxyXG4gICAgICogaHR0cHM6Ly93aXN0aWEuY29tL3N1cHBvcnQvaW50ZWdyYXRpb25zL3dvcmRwcmVzcyhIb3cgdG8gZ2V0IHVybClcclxuICAgICAqIGh0dHBzOi8vd2lzdGlhLmNvbS9zdXBwb3J0L2RldmVsb3BlcnMvZW1iZWQtb3B0aW9ucyN1c2luZy1lbWJlZC1vcHRpb25zXHJcbiAgICAgKiBodHRwczovL3dpc3RpYS5jb20vc3VwcG9ydC9kZXZlbG9wZXJzL3BsYXllci1hcGlcclxuICAgICAqIGh0dHBzOi8vd2lzdGlhLmNvbS9zdXBwb3J0L2RldmVsb3BlcnMvY29uc3RydWN0LWFuLWVtYmVkLWNvZGVcclxuICAgICAqIGh0dHA6Ly9qc2ZpZGRsZS5uZXQveHZubTd4TG0vXHJcbiAgICAgKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvdmlkZW9cclxuICAgICAqIGh0dHBzOi8vd2lzdGlhLmNvbS9zdXBwb3J0L2VtYmVkLWFuZC1zaGFyZS9zaGFyaW5nLXZpZGVvc1xyXG4gICAgICogaHR0cHM6Ly9wcml2YXRlLXNoYXJpbmcud2lzdGlhLmNvbS9tZWRpYXMvbXdocnVscnVjalxyXG4gICAgICpcclxuICAgICAqIEByZWYgWW91dHViZVxyXG4gICAgICogaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20veW91dHViZS9wbGF5ZXJfcGFyYW1ldGVycyNlbmFibGVqc2FwaVxyXG4gICAgICogaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20veW91dHViZS9pZnJhbWVfYXBpX3JlZmVyZW5jZVxyXG4gICAgICogaHR0cHM6Ly9kZXZlbG9wZXIuY2hyb21lLmNvbS9ibG9nL2F1dG9wbGF5LyNpZnJhbWUtZGVsZWdhdGlvblxyXG4gICAgICpcclxuICAgICAqIEByZWYgVmltZW9cclxuICAgICAqIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzEwNDg4OTQzL2Vhc3ktd2F5LXRvLWdldC12aW1lby1pZC1mcm9tLWEtdmltZW8tdXJsXHJcbiAgICAgKiBodHRwczovL3ZpbWVvLnplbmRlc2suY29tL2hjL2VuLXVzL2FydGljbGVzLzM2MDAwMDEyMTY2OC1TdGFydGluZy1wbGF5YmFjay1hdC1hLXNwZWNpZmljLXRpbWVjb2RlXHJcbiAgICAgKiBodHRwczovL3ZpbWVvLnplbmRlc2suY29tL2hjL2VuLXVzL2FydGljbGVzLzM2MDAwMTQ5NDQ0Ny1Vc2luZy1QbGF5ZXItUGFyYW1ldGVyc1xyXG4gICAgICovXHJcbiAgICB2YXIgVmlkZW8gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgZnVuY3Rpb24gVmlkZW8oaW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgLy8gZ2V0IGxpZ2h0R2FsbGVyeSBjb3JlIHBsdWdpbiBpbnN0YW5jZVxyXG4gICAgICAgICAgICB0aGlzLmNvcmUgPSBpbnN0YW5jZTtcclxuICAgICAgICAgICAgdGhpcy5zZXR0aW5ncyA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCB2aWRlb1NldHRpbmdzKSwgdGhpcy5jb3JlLnNldHRpbmdzKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFZpZGVvLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogRXZlbnQgdHJpZ2dlcmVkIHdoZW4gdmlkZW8gdXJsIGZvdW5kIHdpdGhvdXQgcG9zdGVyXHJcbiAgICAgICAgICAgICAqIEFwcGVuZCB2aWRlbyBIVE1MXHJcbiAgICAgICAgICAgICAqIFBsYXkgaWYgYXV0b3BsYXlGaXJzdFZpZGVvIGlzIHRydWVcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIHRoaXMuY29yZS5MR2VsLm9uKGxHRXZlbnRzLmhhc1ZpZGVvICsgXCIudmlkZW9cIiwgdGhpcy5vbkhhc1ZpZGVvLmJpbmQodGhpcykpO1xyXG4gICAgICAgICAgICB0aGlzLmNvcmUuTEdlbC5vbihsR0V2ZW50cy5wb3N0ZXJDbGljayArIFwiLnZpZGVvXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHZhciAkZWwgPSBfdGhpcy5jb3JlLmdldFNsaWRlSXRlbShfdGhpcy5jb3JlLmluZGV4KTtcclxuICAgICAgICAgICAgICAgIF90aGlzLmxvYWRWaWRlb09uUG9zdGVyQ2xpY2soJGVsKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHRoaXMuY29yZS5MR2VsLm9uKGxHRXZlbnRzLnNsaWRlSXRlbUxvYWQgKyBcIi52aWRlb1wiLCB0aGlzLm9uU2xpZGVJdGVtTG9hZC5iaW5kKHRoaXMpKTtcclxuICAgICAgICAgICAgLy8gQGRlc2MgZmlyZWQgaW1tZWRpYXRlbHkgYmVmb3JlIGVhY2ggc2xpZGUgdHJhbnNpdGlvbi5cclxuICAgICAgICAgICAgdGhpcy5jb3JlLkxHZWwub24obEdFdmVudHMuYmVmb3JlU2xpZGUgKyBcIi52aWRlb1wiLCB0aGlzLm9uQmVmb3JlU2xpZGUuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgICAgIC8vIEBkZXNjIGZpcmVkIGltbWVkaWF0ZWx5IGFmdGVyIGVhY2ggc2xpZGUgdHJhbnNpdGlvbi5cclxuICAgICAgICAgICAgdGhpcy5jb3JlLkxHZWwub24obEdFdmVudHMuYWZ0ZXJTbGlkZSArIFwiLnZpZGVvXCIsIHRoaXMub25BZnRlclNsaWRlLmJpbmQodGhpcykpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2MgRXZlbnQgdHJpZ2dlcmVkIHdoZW4gYSBzbGlkZSBpcyBjb21wbGV0ZWx5IGxvYWRlZFxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHBhcmFtIHtFdmVudH0gZXZlbnQgLSBsaWdodEdhbGxleSBjdXN0b20gZXZlbnRcclxuICAgICAgICAgKi9cclxuICAgICAgICBWaWRlby5wcm90b3R5cGUub25TbGlkZUl0ZW1Mb2FkID0gZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgICAgIHZhciBfYSA9IGV2ZW50LmRldGFpbCwgaXNGaXJzdFNsaWRlID0gX2EuaXNGaXJzdFNsaWRlLCBpbmRleCA9IF9hLmluZGV4O1xyXG4gICAgICAgICAgICAvLyBTaG91bGQgY2hlY2sgdGhlIGFjdGl2ZSBzbGlkZSBhcyB3ZWxsIGFzIHVzZXIgbWF5IGhhdmUgbW92ZWQgdG8gZGlmZmVyZW50IHNsaWRlIGJlZm9yZSB0aGUgZmlyc3Qgc2xpZGUgaXMgbG9hZGVkXHJcbiAgICAgICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmF1dG9wbGF5Rmlyc3RWaWRlbyAmJlxyXG4gICAgICAgICAgICAgICAgaXNGaXJzdFNsaWRlICYmXHJcbiAgICAgICAgICAgICAgICBpbmRleCA9PT0gdGhpcy5jb3JlLmluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICAvLyBEZWxheSBpcyBqdXN0IGZvciB0aGUgdHJhbnNpdGlvbiBlZmZlY3Qgb24gdmlkZW8gbG9hZFxyXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMubG9hZEFuZFBsYXlWaWRlbyhpbmRleCk7XHJcbiAgICAgICAgICAgICAgICB9LCAyMDApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIFNob3VsZCBub3QgY2FsbCBvbiBmaXJzdCBzbGlkZS4gc2hvdWxkIGNoZWNrIG9ubHkgaWYgdGhlIHNsaWRlIGlzIGFjdGl2ZVxyXG4gICAgICAgICAgICBpZiAoIWlzRmlyc3RTbGlkZSAmJlxyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXR0aW5ncy5hdXRvcGxheVZpZGVvT25TbGlkZSAmJlxyXG4gICAgICAgICAgICAgICAgaW5kZXggPT09IHRoaXMuY29yZS5pbmRleCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sb2FkQW5kUGxheVZpZGVvKGluZGV4KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2MgRXZlbnQgdHJpZ2dlcmVkIHdoZW4gdmlkZW8gdXJsIG9yIHBvc3RlciBmb3VuZFxyXG4gICAgICAgICAqIEFwcGVuZCB2aWRlbyBIVE1MIGlzIHBvc3RlciBpcyBub3QgZ2l2ZW5cclxuICAgICAgICAgKiBQbGF5IGlmIGF1dG9wbGF5Rmlyc3RWaWRlbyBpcyB0cnVlXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudCAtIEphdmFzY3JpcHQgRXZlbnQgb2JqZWN0LlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIFZpZGVvLnByb3RvdHlwZS5vbkhhc1ZpZGVvID0gZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgIHZhciBfYSA9IGV2ZW50LmRldGFpbCwgaW5kZXggPSBfYS5pbmRleCwgc3JjID0gX2Euc3JjLCBodG1sNVZpZGVvID0gX2EuaHRtbDVWaWRlbywgaGFzUG9zdGVyID0gX2EuaGFzUG9zdGVyO1xyXG4gICAgICAgICAgICBpZiAoIWhhc1Bvc3Rlcikge1xyXG4gICAgICAgICAgICAgICAgLy8gQWxsIGZ1bmN0aW9ucyBhcmUgY2FsbGVkIHNlcGFyYXRlbHkgaWYgcG9zdGVyIGV4aXN0IGluIGxvYWRWaWRlb09uUG9zdGVyQ2xpY2sgZnVuY3Rpb25cclxuICAgICAgICAgICAgICAgIHRoaXMuYXBwZW5kVmlkZW9zKHRoaXMuY29yZS5nZXRTbGlkZUl0ZW0oaW5kZXgpLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3JjOiBzcmMsXHJcbiAgICAgICAgICAgICAgICAgICAgYWRkQ2xhc3M6ICdsZy1vYmplY3QnLFxyXG4gICAgICAgICAgICAgICAgICAgIGluZGV4OiBpbmRleCxcclxuICAgICAgICAgICAgICAgICAgICBodG1sNVZpZGVvOiBodG1sNVZpZGVvLFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAvLyBBdXRvbWF0aWNhbGx5IG5hdmlnYXRlIHRvIG5leHQgc2xpZGUgb25jZSB2aWRlbyByZWFjaGVzIHRoZSBlbmQuXHJcbiAgICAgICAgICAgICAgICB0aGlzLmdvdG9OZXh0U2xpZGVPblZpZGVvRW5kKHNyYywgaW5kZXgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzYyBmaXJlZCBpbW1lZGlhdGVseSBiZWZvcmUgZWFjaCBzbGlkZSB0cmFuc2l0aW9uLlxyXG4gICAgICAgICAqIFBhdXNlIHRoZSBwcmV2aW91cyB2aWRlb1xyXG4gICAgICAgICAqIEhpZGUgdGhlIGRvd25sb2FkIGJ1dHRvbiBpZiB0aGUgc2xpZGUgY29udGFpbnMgWW91VHViZSwgVmltZW8sIG9yIFdpc3RpYSB2aWRlb3MuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudCAtIEphdmFzY3JpcHQgRXZlbnQgb2JqZWN0LlxyXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBwcmV2SW5kZXggLSBQcmV2aW91cyBpbmRleCBvZiB0aGUgc2xpZGUuXHJcbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IC0gQ3VycmVudCBpbmRleCBvZiB0aGUgc2xpZGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBWaWRlby5wcm90b3R5cGUub25CZWZvcmVTbGlkZSA9IGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5jb3JlLmxHYWxsZXJ5T24pIHtcclxuICAgICAgICAgICAgICAgIHZhciBwcmV2SW5kZXggPSBldmVudC5kZXRhaWwucHJldkluZGV4O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wYXVzZVZpZGVvKHByZXZJbmRleCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjIGZpcmVkIGltbWVkaWF0ZWx5IGFmdGVyIGVhY2ggc2xpZGUgdHJhbnNpdGlvbi5cclxuICAgICAgICAgKiBQbGF5IHZpZGVvIGlmIGF1dG9wbGF5VmlkZW9PblNsaWRlIG9wdGlvbiBpcyBlbmFibGVkLlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHBhcmFtIHtFdmVudH0gZXZlbnQgLSBKYXZhc2NyaXB0IEV2ZW50IG9iamVjdC5cclxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gcHJldkluZGV4IC0gUHJldmlvdXMgaW5kZXggb2YgdGhlIHNsaWRlLlxyXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCAtIEN1cnJlbnQgaW5kZXggb2YgdGhlIHNsaWRlXHJcbiAgICAgICAgICogQHRvZG8gc2hvdWxkIGNoZWNrIG9uIG9uU2xpZGVMb2FkIGFzIHdlbGwgaWYgdmlkZW8gaXMgbm90IGxvYWRlZCBvbiBhZnRlciBzbGlkZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIFZpZGVvLnByb3RvdHlwZS5vbkFmdGVyU2xpZGUgPSBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAgICAgdmFyIF9hID0gZXZlbnQuZGV0YWlsLCBpbmRleCA9IF9hLmluZGV4LCBwcmV2SW5kZXggPSBfYS5wcmV2SW5kZXg7XHJcbiAgICAgICAgICAgIC8vIERvIG5vdCBjYWxsIG9uIGZpcnN0IHNsaWRlXHJcbiAgICAgICAgICAgIHZhciAkc2xpZGUgPSB0aGlzLmNvcmUuZ2V0U2xpZGVJdGVtKGluZGV4KTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MuYXV0b3BsYXlWaWRlb09uU2xpZGUgJiYgaW5kZXggIT09IHByZXZJbmRleCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCRzbGlkZS5oYXNDbGFzcygnbGctY29tcGxldGUnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5sb2FkQW5kUGxheVZpZGVvKGluZGV4KTtcclxuICAgICAgICAgICAgICAgICAgICB9LCAxMDApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBWaWRlby5wcm90b3R5cGUubG9hZEFuZFBsYXlWaWRlbyA9IGZ1bmN0aW9uIChpbmRleCkge1xyXG4gICAgICAgICAgICB2YXIgJHNsaWRlID0gdGhpcy5jb3JlLmdldFNsaWRlSXRlbShpbmRleCk7XHJcbiAgICAgICAgICAgIHZhciBjdXJyZW50R2FsbGVyeUl0ZW0gPSB0aGlzLmNvcmUuZ2FsbGVyeUl0ZW1zW2luZGV4XTtcclxuICAgICAgICAgICAgaWYgKGN1cnJlbnRHYWxsZXJ5SXRlbS5wb3N0ZXIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubG9hZFZpZGVvT25Qb3N0ZXJDbGljaygkc2xpZGUsIHRydWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wbGF5VmlkZW8oaW5kZXgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBQbGF5IEhUTUw1LCBZb3V0dWJlLCBWaW1lbyBvciBXaXN0aWEgdmlkZW9zIGluIGEgcGFydGljdWxhciBzbGlkZS5cclxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggLSBJbmRleCBvZiB0aGUgc2xpZGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBWaWRlby5wcm90b3R5cGUucGxheVZpZGVvID0gZnVuY3Rpb24gKGluZGV4KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29udHJvbFZpZGVvKGluZGV4LCAncGxheScpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogUGF1c2UgSFRNTDUsIFlvdXR1YmUsIFZpbWVvIG9yIFdpc3RpYSB2aWRlb3MgaW4gYSBwYXJ0aWN1bGFyIHNsaWRlLlxyXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCAtIEluZGV4IG9mIHRoZSBzbGlkZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIFZpZGVvLnByb3RvdHlwZS5wYXVzZVZpZGVvID0gZnVuY3Rpb24gKGluZGV4KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29udHJvbFZpZGVvKGluZGV4LCAncGF1c2UnKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIFZpZGVvLnByb3RvdHlwZS5nZXRWaWRlb0h0bWwgPSBmdW5jdGlvbiAoc3JjLCBhZGRDbGFzcywgaW5kZXgsIGh0bWw1VmlkZW8pIHtcclxuICAgICAgICAgICAgdmFyIHZpZGVvID0gJyc7XHJcbiAgICAgICAgICAgIHZhciB2aWRlb0luZm8gPSB0aGlzLmNvcmUuZ2FsbGVyeUl0ZW1zW2luZGV4XVxyXG4gICAgICAgICAgICAgICAgLl9fc2xpZGVWaWRlb0luZm8gfHwge307XHJcbiAgICAgICAgICAgIHZhciBjdXJyZW50R2FsbGVyeUl0ZW0gPSB0aGlzLmNvcmUuZ2FsbGVyeUl0ZW1zW2luZGV4XTtcclxuICAgICAgICAgICAgdmFyIHZpZGVvVGl0bGUgPSBjdXJyZW50R2FsbGVyeUl0ZW0udGl0bGUgfHwgY3VycmVudEdhbGxlcnlJdGVtLmFsdDtcclxuICAgICAgICAgICAgdmlkZW9UaXRsZSA9IHZpZGVvVGl0bGUgPyAndGl0bGU9XCInICsgdmlkZW9UaXRsZSArICdcIicgOiAnJztcclxuICAgICAgICAgICAgdmFyIGNvbW1vbklmcmFtZVByb3BzID0gXCJhbGxvd3RyYW5zcGFyZW5jeT1cXFwidHJ1ZVxcXCJcXG4gICAgICAgICAgICBmcmFtZWJvcmRlcj1cXFwiMFxcXCJcXG4gICAgICAgICAgICBzY3JvbGxpbmc9XFxcIm5vXFxcIlxcbiAgICAgICAgICAgIGFsbG93ZnVsbHNjcmVlblxcbiAgICAgICAgICAgIG1vemFsbG93ZnVsbHNjcmVlblxcbiAgICAgICAgICAgIHdlYmtpdGFsbG93ZnVsbHNjcmVlblxcbiAgICAgICAgICAgIG9hbGxvd2Z1bGxzY3JlZW5cXG4gICAgICAgICAgICBtc2FsbG93ZnVsbHNjcmVlblwiO1xyXG4gICAgICAgICAgICBpZiAodmlkZW9JbmZvLnlvdXR1YmUpIHtcclxuICAgICAgICAgICAgICAgIHZhciB2aWRlb0lkID0gJ2xnLXlvdXR1YmUnICsgaW5kZXg7XHJcbiAgICAgICAgICAgICAgICB2YXIgc2xpZGVVcmxQYXJhbXMgPSB2aWRlb0luZm8ueW91dHViZVsyXVxyXG4gICAgICAgICAgICAgICAgICAgID8gdmlkZW9JbmZvLnlvdXR1YmVbMl0gKyAnJidcclxuICAgICAgICAgICAgICAgICAgICA6ICcnO1xyXG4gICAgICAgICAgICAgICAgLy8gRm9yIHlvdXR1YmUgZmlyc3QgcGFybXMgZ2V0cyBwcmlvcml0eSBpZiBkdXBsaWNhdGVzIGZvdW5kXHJcbiAgICAgICAgICAgICAgICB2YXIgeW91VHViZVBsYXllclBhcmFtcyA9IFwiP1wiICsgc2xpZGVVcmxQYXJhbXMgKyBcIndtb2RlPW9wYXF1ZSZhdXRvcGxheT0wJm11dGU9MSZlbmFibGVqc2FwaT0xXCI7XHJcbiAgICAgICAgICAgICAgICB2YXIgcGxheWVyUGFyYW1zID0geW91VHViZVBsYXllclBhcmFtcyArXHJcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMuc2V0dGluZ3MueW91VHViZVBsYXllclBhcmFtc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICA/ICcmJyArIHBhcmFtKHRoaXMuc2V0dGluZ3MueW91VHViZVBsYXllclBhcmFtcylcclxuICAgICAgICAgICAgICAgICAgICAgICAgOiAnJyk7XHJcbiAgICAgICAgICAgICAgICB2aWRlbyA9IFwiPGlmcmFtZSBhbGxvdz1cXFwiYXV0b3BsYXlcXFwiIGlkPVwiICsgdmlkZW9JZCArIFwiIGNsYXNzPVxcXCJsZy12aWRlby1vYmplY3QgbGcteW91dHViZSBcIiArIGFkZENsYXNzICsgXCJcXFwiIFwiICsgdmlkZW9UaXRsZSArIFwiIHNyYz1cXFwiLy93d3cueW91dHViZS5jb20vZW1iZWQvXCIgKyAodmlkZW9JbmZvLnlvdXR1YmVbMV0gKyBwbGF5ZXJQYXJhbXMpICsgXCJcXFwiIFwiICsgY29tbW9uSWZyYW1lUHJvcHMgKyBcIj48L2lmcmFtZT5cIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICh2aWRlb0luZm8udmltZW8pIHtcclxuICAgICAgICAgICAgICAgIHZhciB2aWRlb0lkID0gJ2xnLXZpbWVvJyArIGluZGV4O1xyXG4gICAgICAgICAgICAgICAgdmFyIHBsYXllclBhcmFtcyA9IGdldFZpbWVvVVJMUGFyYW1zKHRoaXMuc2V0dGluZ3MudmltZW9QbGF5ZXJQYXJhbXMsIHZpZGVvSW5mbyk7XHJcbiAgICAgICAgICAgICAgICB2aWRlbyA9IFwiPGlmcmFtZSBhbGxvdz1cXFwiYXV0b3BsYXlcXFwiIGlkPVwiICsgdmlkZW9JZCArIFwiIGNsYXNzPVxcXCJsZy12aWRlby1vYmplY3QgbGctdmltZW8gXCIgKyBhZGRDbGFzcyArIFwiXFxcIiBcIiArIHZpZGVvVGl0bGUgKyBcIiBzcmM9XFxcIi8vcGxheWVyLnZpbWVvLmNvbS92aWRlby9cIiArICh2aWRlb0luZm8udmltZW9bMV0gKyBwbGF5ZXJQYXJhbXMpICsgXCJcXFwiIFwiICsgY29tbW9uSWZyYW1lUHJvcHMgKyBcIj48L2lmcmFtZT5cIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICh2aWRlb0luZm8ud2lzdGlhKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgd2lzdGlhSWQgPSAnbGctd2lzdGlhJyArIGluZGV4O1xyXG4gICAgICAgICAgICAgICAgdmFyIHBsYXllclBhcmFtcyA9IHBhcmFtKHRoaXMuc2V0dGluZ3Mud2lzdGlhUGxheWVyUGFyYW1zKTtcclxuICAgICAgICAgICAgICAgIHBsYXllclBhcmFtcyA9IHBsYXllclBhcmFtcyA/ICc/JyArIHBsYXllclBhcmFtcyA6ICcnO1xyXG4gICAgICAgICAgICAgICAgdmlkZW8gPSBcIjxpZnJhbWUgYWxsb3c9XFxcImF1dG9wbGF5XFxcIiBpZD1cXFwiXCIgKyB3aXN0aWFJZCArIFwiXFxcIiBzcmM9XFxcIi8vZmFzdC53aXN0aWEubmV0L2VtYmVkL2lmcmFtZS9cIiArICh2aWRlb0luZm8ud2lzdGlhWzRdICsgcGxheWVyUGFyYW1zKSArIFwiXFxcIiBcIiArIHZpZGVvVGl0bGUgKyBcIiBjbGFzcz1cXFwid2lzdGlhX2VtYmVkIGxnLXZpZGVvLW9iamVjdCBsZy13aXN0aWEgXCIgKyBhZGRDbGFzcyArIFwiXFxcIiBuYW1lPVxcXCJ3aXN0aWFfZW1iZWRcXFwiIFwiICsgY29tbW9uSWZyYW1lUHJvcHMgKyBcIj48L2lmcmFtZT5cIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICh2aWRlb0luZm8uaHRtbDUpIHtcclxuICAgICAgICAgICAgICAgIHZhciBodG1sNVZpZGVvTWFya3VwID0gJyc7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGh0bWw1VmlkZW8uc291cmNlLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaHRtbDVWaWRlb01hcmt1cCArPSBcIjxzb3VyY2Ugc3JjPVxcXCJcIiArIGh0bWw1VmlkZW8uc291cmNlW2ldLnNyYyArIFwiXFxcIiB0eXBlPVxcXCJcIiArIGh0bWw1VmlkZW8uc291cmNlW2ldLnR5cGUgKyBcIlxcXCI+XCI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoaHRtbDVWaWRlby50cmFja3MpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgX2xvb3BfMSA9IGZ1bmN0aW9uIChpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0cmFja0F0dHJpYnV0ZXMgPSAnJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRyYWNrID0gaHRtbDVWaWRlby50cmFja3NbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKHRyYWNrIHx8IHt9KS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYWNrQXR0cmlidXRlcyArPSBrZXkgKyBcIj1cXFwiXCIgKyB0cmFja1trZXldICsgXCJcXFwiIFwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaHRtbDVWaWRlb01hcmt1cCArPSBcIjx0cmFjayBcIiArIHRyYWNrQXR0cmlidXRlcyArIFwiPlwiO1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBodG1sNVZpZGVvLnRyYWNrcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfbG9vcF8xKGkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHZhciBodG1sNVZpZGVvQXR0cnNfMSA9ICcnO1xyXG4gICAgICAgICAgICAgICAgdmFyIHZpZGVvQXR0cmlidXRlc18xID0gaHRtbDVWaWRlby5hdHRyaWJ1dGVzIHx8IHt9O1xyXG4gICAgICAgICAgICAgICAgT2JqZWN0LmtleXModmlkZW9BdHRyaWJ1dGVzXzEgfHwge30pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGh0bWw1VmlkZW9BdHRyc18xICs9IGtleSArIFwiPVxcXCJcIiArIHZpZGVvQXR0cmlidXRlc18xW2tleV0gKyBcIlxcXCIgXCI7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHZpZGVvID0gXCI8dmlkZW8gY2xhc3M9XFxcImxnLXZpZGVvLW9iamVjdCBsZy1odG1sNSBcIiArICh0aGlzLnNldHRpbmdzLnZpZGVvanMgPyAndmlkZW8tanMnIDogJycpICsgXCJcXFwiIFwiICsgaHRtbDVWaWRlb0F0dHJzXzEgKyBcIj5cXG4gICAgICAgICAgICAgICAgXCIgKyBodG1sNVZpZGVvTWFya3VwICsgXCJcXG4gICAgICAgICAgICAgICAgWW91ciBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgSFRNTDUgdmlkZW8uXFxuICAgICAgICAgICAgPC92aWRlbz5cIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdmlkZW87XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzYyAtIEFwcGVuZCB2aWRlb3MgdG8gdGhlIHNsaWRlXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbCAtIHNsaWRlIGVsZW1lbnRcclxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gdmlkZW9QYXJhbXMgLSBWaWRlbyBwYXJhbWV0ZXJzLCBDb250YWlucyBzcmMsIGNsYXNzLCBpbmRleCwgaHRtbFZpZGVvXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgVmlkZW8ucHJvdG90eXBlLmFwcGVuZFZpZGVvcyA9IGZ1bmN0aW9uIChlbCwgdmlkZW9QYXJhbXMpIHtcclxuICAgICAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgICAgICB2YXIgdmlkZW9IdG1sID0gdGhpcy5nZXRWaWRlb0h0bWwodmlkZW9QYXJhbXMuc3JjLCB2aWRlb1BhcmFtcy5hZGRDbGFzcywgdmlkZW9QYXJhbXMuaW5kZXgsIHZpZGVvUGFyYW1zLmh0bWw1VmlkZW8pO1xyXG4gICAgICAgICAgICBlbC5maW5kKCcubGctdmlkZW8tY29udCcpLmFwcGVuZCh2aWRlb0h0bWwpO1xyXG4gICAgICAgICAgICB2YXIgJHZpZGVvRWxlbWVudCA9IGVsLmZpbmQoJy5sZy12aWRlby1vYmplY3QnKS5maXJzdCgpO1xyXG4gICAgICAgICAgICBpZiAodmlkZW9QYXJhbXMuaHRtbDVWaWRlbykge1xyXG4gICAgICAgICAgICAgICAgJHZpZGVvRWxlbWVudC5vbignbW91c2Vkb3duLmxnLnZpZGVvJywgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MudmlkZW9qcyAmJiAoKF9hID0gdGhpcy5jb3JlLmdhbGxlcnlJdGVtc1t2aWRlb1BhcmFtcy5pbmRleF0uX19zbGlkZVZpZGVvSW5mbykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmh0bWw1KSkge1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmlkZW9qcygkdmlkZW9FbGVtZW50LmdldCgpLCB0aGlzLnNldHRpbmdzLnZpZGVvanNPcHRpb25zKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignbGlnaHRHYWxsZXJ5Oi0gTWFrZSBzdXJlIHlvdSBoYXZlIGluY2x1ZGVkIHZpZGVvanMnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgVmlkZW8ucHJvdG90eXBlLmdvdG9OZXh0U2xpZGVPblZpZGVvRW5kID0gZnVuY3Rpb24gKHNyYywgaW5kZXgpIHtcclxuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAgICAgdmFyICR2aWRlb0VsZW1lbnQgPSB0aGlzLmNvcmVcclxuICAgICAgICAgICAgICAgIC5nZXRTbGlkZUl0ZW0oaW5kZXgpXHJcbiAgICAgICAgICAgICAgICAuZmluZCgnLmxnLXZpZGVvLW9iamVjdCcpXHJcbiAgICAgICAgICAgICAgICAuZmlyc3QoKTtcclxuICAgICAgICAgICAgdmFyIHZpZGVvSW5mbyA9IHRoaXMuY29yZS5nYWxsZXJ5SXRlbXNbaW5kZXhdLl9fc2xpZGVWaWRlb0luZm8gfHwge307XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmdvdG9OZXh0U2xpZGVPblZpZGVvRW5kKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodmlkZW9JbmZvLmh0bWw1KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHZpZGVvRWxlbWVudC5vbignZW5kZWQnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmNvcmUuZ29Ub05leHRTbGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodmlkZW9JbmZvLnZpbWVvKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3ZpbWVvL3BsYXllci5qcy8jZW5kZWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFZpbWVvLlBsYXllcigkdmlkZW9FbGVtZW50LmdldCgpKS5vbignZW5kZWQnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5jb3JlLmdvVG9OZXh0U2xpZGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ2xpZ2h0R2FsbGVyeTotIE1ha2Ugc3VyZSB5b3UgaGF2ZSBpbmNsdWRlZCAvL2dpdGh1Yi5jb20vdmltZW8vcGxheWVyLmpzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodmlkZW9JbmZvLndpc3RpYSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5fd3EgPSB3aW5kb3cuX3dxIHx8IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBAdG9kbyBFdmVudCBpcyBnZXR0aWduIHRyaWdnZXJlZCBtdWx0aXBsZSB0aW1lc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cuX3dxLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6ICR2aWRlb0VsZW1lbnQuYXR0cignaWQnKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uUmVhZHk6IGZ1bmN0aW9uICh2aWRlbykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZGVvLmJpbmQoJ2VuZCcsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuY29yZS5nb1RvTmV4dFNsaWRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignbGlnaHRHYWxsZXJ5Oi0gTWFrZSBzdXJlIHlvdSBoYXZlIGluY2x1ZGVkIC8vZmFzdC53aXN0aWEuY29tL2Fzc2V0cy9leHRlcm5hbC9FLXYxLmpzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBWaWRlby5wcm90b3R5cGUuY29udHJvbFZpZGVvID0gZnVuY3Rpb24gKGluZGV4LCBhY3Rpb24pIHtcclxuICAgICAgICAgICAgdmFyICR2aWRlb0VsZW1lbnQgPSB0aGlzLmNvcmVcclxuICAgICAgICAgICAgICAgIC5nZXRTbGlkZUl0ZW0oaW5kZXgpXHJcbiAgICAgICAgICAgICAgICAuZmluZCgnLmxnLXZpZGVvLW9iamVjdCcpXHJcbiAgICAgICAgICAgICAgICAuZmlyc3QoKTtcclxuICAgICAgICAgICAgdmFyIHZpZGVvSW5mbyA9IHRoaXMuY29yZS5nYWxsZXJ5SXRlbXNbaW5kZXhdLl9fc2xpZGVWaWRlb0luZm8gfHwge307XHJcbiAgICAgICAgICAgIGlmICghJHZpZGVvRWxlbWVudC5nZXQoKSlcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgaWYgKHZpZGVvSW5mby55b3V0dWJlKSB7XHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgICR2aWRlb0VsZW1lbnQuZ2V0KCkuY29udGVudFdpbmRvdy5wb3N0TWVzc2FnZShcIntcXFwiZXZlbnRcXFwiOlxcXCJjb21tYW5kXFxcIixcXFwiZnVuY1xcXCI6XFxcIlwiICsgYWN0aW9uICsgXCJWaWRlb1xcXCIsXFxcImFyZ3NcXFwiOlxcXCJcXFwifVwiLCAnKicpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwibGlnaHRHYWxsZXJ5Oi0gXCIgKyBlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICh2aWRlb0luZm8udmltZW8pIHtcclxuICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3IFZpbWVvLlBsYXllcigkdmlkZW9FbGVtZW50LmdldCgpKVthY3Rpb25dKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ2xpZ2h0R2FsbGVyeTotIE1ha2Ugc3VyZSB5b3UgaGF2ZSBpbmNsdWRlZCAvL2dpdGh1Yi5jb20vdmltZW8vcGxheWVyLmpzJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAodmlkZW9JbmZvLmh0bWw1KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy52aWRlb2pzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmlkZW9qcygkdmlkZW9FbGVtZW50LmdldCgpKVthY3Rpb25dKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ2xpZ2h0R2FsbGVyeTotIE1ha2Ugc3VyZSB5b3UgaGF2ZSBpbmNsdWRlZCB2aWRlb2pzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHZpZGVvRWxlbWVudC5nZXQoKVthY3Rpb25dKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAodmlkZW9JbmZvLndpc3RpYSkge1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICB3aW5kb3cuX3dxID0gd2luZG93Ll93cSB8fCBbXTtcclxuICAgICAgICAgICAgICAgICAgICAvLyBAdG9kbyBGaW5kIGEgd2F5IHRvIGRlc3Ryb3kgd2lzdGlhIHBsYXllciBpbnN0YW5jZVxyXG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5fd3EucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiAkdmlkZW9FbGVtZW50LmF0dHIoJ2lkJyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uUmVhZHk6IGZ1bmN0aW9uICh2aWRlbykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlkZW9bYWN0aW9uXSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdsaWdodEdhbGxlcnk6LSBNYWtlIHN1cmUgeW91IGhhdmUgaW5jbHVkZWQgLy9mYXN0Lndpc3RpYS5jb20vYXNzZXRzL2V4dGVybmFsL0UtdjEuanMnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgVmlkZW8ucHJvdG90eXBlLmxvYWRWaWRlb09uUG9zdGVyQ2xpY2sgPSBmdW5jdGlvbiAoJGVsLCBmb3JjZVBsYXkpIHtcclxuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAgICAgLy8gY2hlY2sgc2xpZGUgaGFzIHBvc3RlclxyXG4gICAgICAgICAgICBpZiAoISRlbC5oYXNDbGFzcygnbGctdmlkZW8tbG9hZGVkJykpIHtcclxuICAgICAgICAgICAgICAgIC8vIGNoZWNrIGFscmVhZHkgdmlkZW8gZWxlbWVudCBwcmVzZW50XHJcbiAgICAgICAgICAgICAgICBpZiAoISRlbC5oYXNDbGFzcygnbGctaGFzLXZpZGVvJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAkZWwuYWRkQ2xhc3MoJ2xnLWhhcy12aWRlbycpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBfaHRtbCA9IHZvaWQgMDtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgX3NyYyA9IHRoaXMuY29yZS5nYWxsZXJ5SXRlbXNbdGhpcy5jb3JlLmluZGV4XS5zcmM7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZpZGVvID0gdGhpcy5jb3JlLmdhbGxlcnlJdGVtc1t0aGlzLmNvcmUuaW5kZXhdLnZpZGVvO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh2aWRlbykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfaHRtbCA9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgdmlkZW8gPT09ICdzdHJpbmcnID8gSlNPTi5wYXJzZSh2aWRlbykgOiB2aWRlbztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZpZGVvSnNQbGF5ZXJfMSA9IHRoaXMuYXBwZW5kVmlkZW9zKCRlbCwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzcmM6IF9zcmMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZENsYXNzOiAnJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXg6IHRoaXMuY29yZS5pbmRleCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaHRtbDVWaWRlbzogX2h0bWwsXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nb3RvTmV4dFNsaWRlT25WaWRlb0VuZChfc3JjLCB0aGlzLmNvcmUuaW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciAkdGVtcEltZyA9ICRlbC5maW5kKCcubGctb2JqZWN0JykuZmlyc3QoKS5nZXQoKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyBAdG9kbyBtYWtlIHN1cmUgaXQgaXMgd29ya2luZ1xyXG4gICAgICAgICAgICAgICAgICAgICRlbC5maW5kKCcubGctdmlkZW8tY29udCcpLmZpcnN0KCkuYXBwZW5kKCR0ZW1wSW1nKTtcclxuICAgICAgICAgICAgICAgICAgICAkZWwuYWRkQ2xhc3MoJ2xnLXZpZGVvLWxvYWRpbmcnKTtcclxuICAgICAgICAgICAgICAgICAgICB2aWRlb0pzUGxheWVyXzEgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmlkZW9Kc1BsYXllcl8xLnJlYWR5KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZGVvSnNQbGF5ZXJfMS5vbignbG9hZGVkbWV0YWRhdGEnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMub25WaWRlb0xvYWRBZnRlclBvc3RlckNsaWNrKCRlbCwgX3RoaXMuY29yZS5pbmRleCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgJGVsLmZpbmQoJy5sZy12aWRlby1vYmplY3QnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuZmlyc3QoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAub24oJ2xvYWQubGcgZXJyb3IubGcgbG9hZGVkbWV0YWRhdGEubGcnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMub25WaWRlb0xvYWRBZnRlclBvc3RlckNsaWNrKCRlbCwgX3RoaXMuY29yZS5pbmRleCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIDUwKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGxheVZpZGVvKHRoaXMuY29yZS5pbmRleCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoZm9yY2VQbGF5KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBsYXlWaWRlbyh0aGlzLmNvcmUuaW5kZXgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBWaWRlby5wcm90b3R5cGUub25WaWRlb0xvYWRBZnRlclBvc3RlckNsaWNrID0gZnVuY3Rpb24gKCRlbCwgaW5kZXgpIHtcclxuICAgICAgICAgICAgJGVsLmFkZENsYXNzKCdsZy12aWRlby1sb2FkZWQnKTtcclxuICAgICAgICAgICAgdGhpcy5wbGF5VmlkZW8oaW5kZXgpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgVmlkZW8ucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29yZS5MR2VsLm9mZignLmxnLnZpZGVvJyk7XHJcbiAgICAgICAgICAgIHRoaXMuY29yZS5MR2VsLm9mZignLnZpZGVvJyk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gVmlkZW87XHJcbiAgICB9KCkpO1xuXG4gICAgcmV0dXJuIFZpZGVvO1xuXG59KSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGctdmlkZW8udW1kLmpzLm1hcFxuIiwiLyohXG4gKiBsaWdodGdhbGxlcnkgfCAyLjQuMC1iZXRhLjAgfCBEZWNlbWJlciAxMnRoIDIwMjFcbiAqIGh0dHA6Ly93d3cubGlnaHRnYWxsZXJ5anMuY29tL1xuICogQ29weXJpZ2h0IChjKSAyMDIwIFNhY2hpbiBOZXJhdmF0aDtcbiAqIEBsaWNlbnNlIEdQTHYzXG4gKi9cblxuKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKSA6XG4gICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKGZhY3RvcnkpIDpcbiAgICAoZ2xvYmFsID0gdHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsVGhpcyA6IGdsb2JhbCB8fCBzZWxmLCBnbG9iYWwubGdSb3RhdGUgPSBmYWN0b3J5KCkpO1xufSh0aGlzLCAoZnVuY3Rpb24gKCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvKiEgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuICAgIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxyXG5cclxuICAgIFBlcm1pc3Npb24gdG8gdXNlLCBjb3B5LCBtb2RpZnksIGFuZC9vciBkaXN0cmlidXRlIHRoaXMgc29mdHdhcmUgZm9yIGFueVxyXG4gICAgcHVycG9zZSB3aXRoIG9yIHdpdGhvdXQgZmVlIGlzIGhlcmVieSBncmFudGVkLlxyXG5cclxuICAgIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTIFdJVEhcclxuICAgIFJFR0FSRCBUTyBUSElTIFNPRlRXQVJFIElOQ0xVRElORyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWVxyXG4gICAgQU5EIEZJVE5FU1MuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1IgQkUgTElBQkxFIEZPUiBBTlkgU1BFQ0lBTCwgRElSRUNULFxyXG4gICAgSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFUyBXSEFUU09FVkVSIFJFU1VMVElORyBGUk9NXHJcbiAgICBMT1NTIE9GIFVTRSwgREFUQSBPUiBQUk9GSVRTLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgTkVHTElHRU5DRSBPUlxyXG4gICAgT1RIRVIgVE9SVElPVVMgQUNUSU9OLCBBUklTSU5HIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFVTRSBPUlxyXG4gICAgUEVSRk9STUFOQ0UgT0YgVEhJUyBTT0ZUV0FSRS5cclxuICAgICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXHJcblxyXG4gICAgdmFyIF9fYXNzaWduID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uIF9fYXNzaWduKHQpIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKSB0W3BdID0gc1twXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdDtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG4gICAgfTtcblxuICAgIC8qKlxyXG4gICAgICogTGlzdCBvZiBsaWdodEdhbGxlcnkgZXZlbnRzXHJcbiAgICAgKiBBbGwgZXZlbnRzIHNob3VsZCBiZSBkb2N1bWVudGVkIGhlcmVcclxuICAgICAqIEJlbG93IGludGVyZmFjZXMgYXJlIHVzZWQgdG8gYnVpbGQgdGhlIHdlYnNpdGUgZG9jdW1lbnRhdGlvbnNcclxuICAgICAqICovXHJcbiAgICB2YXIgbEdFdmVudHMgPSB7XHJcbiAgICAgICAgYWZ0ZXJBcHBlbmRTbGlkZTogJ2xnQWZ0ZXJBcHBlbmRTbGlkZScsXHJcbiAgICAgICAgaW5pdDogJ2xnSW5pdCcsXHJcbiAgICAgICAgaGFzVmlkZW86ICdsZ0hhc1ZpZGVvJyxcclxuICAgICAgICBjb250YWluZXJSZXNpemU6ICdsZ0NvbnRhaW5lclJlc2l6ZScsXHJcbiAgICAgICAgdXBkYXRlU2xpZGVzOiAnbGdVcGRhdGVTbGlkZXMnLFxyXG4gICAgICAgIGFmdGVyQXBwZW5kU3ViSHRtbDogJ2xnQWZ0ZXJBcHBlbmRTdWJIdG1sJyxcclxuICAgICAgICBiZWZvcmVPcGVuOiAnbGdCZWZvcmVPcGVuJyxcclxuICAgICAgICBhZnRlck9wZW46ICdsZ0FmdGVyT3BlbicsXHJcbiAgICAgICAgc2xpZGVJdGVtTG9hZDogJ2xnU2xpZGVJdGVtTG9hZCcsXHJcbiAgICAgICAgYmVmb3JlU2xpZGU6ICdsZ0JlZm9yZVNsaWRlJyxcclxuICAgICAgICBhZnRlclNsaWRlOiAnbGdBZnRlclNsaWRlJyxcclxuICAgICAgICBwb3N0ZXJDbGljazogJ2xnUG9zdGVyQ2xpY2snLFxyXG4gICAgICAgIGRyYWdTdGFydDogJ2xnRHJhZ1N0YXJ0JyxcclxuICAgICAgICBkcmFnTW92ZTogJ2xnRHJhZ01vdmUnLFxyXG4gICAgICAgIGRyYWdFbmQ6ICdsZ0RyYWdFbmQnLFxyXG4gICAgICAgIGJlZm9yZU5leHRTbGlkZTogJ2xnQmVmb3JlTmV4dFNsaWRlJyxcclxuICAgICAgICBiZWZvcmVQcmV2U2xpZGU6ICdsZ0JlZm9yZVByZXZTbGlkZScsXHJcbiAgICAgICAgYmVmb3JlQ2xvc2U6ICdsZ0JlZm9yZUNsb3NlJyxcclxuICAgICAgICBhZnRlckNsb3NlOiAnbGdBZnRlckNsb3NlJyxcclxuICAgICAgICByb3RhdGVMZWZ0OiAnbGdSb3RhdGVMZWZ0JyxcclxuICAgICAgICByb3RhdGVSaWdodDogJ2xnUm90YXRlUmlnaHQnLFxyXG4gICAgICAgIGZsaXBIb3Jpem9udGFsOiAnbGdGbGlwSG9yaXpvbnRhbCcsXHJcbiAgICAgICAgZmxpcFZlcnRpY2FsOiAnbGdGbGlwVmVydGljYWwnLFxyXG4gICAgICAgIGF1dG9wbGF5OiAnbGdBdXRvcGxheScsXHJcbiAgICAgICAgYXV0b3BsYXlTdGFydDogJ2xnQXV0b3BsYXlTdGFydCcsXHJcbiAgICAgICAgYXV0b3BsYXlTdG9wOiAnbGdBdXRvcGxheVN0b3AnLFxyXG4gICAgfTtcblxuICAgIHZhciByb3RhdGVTZXR0aW5ncyA9IHtcclxuICAgICAgICByb3RhdGU6IHRydWUsXHJcbiAgICAgICAgcm90YXRlU3BlZWQ6IDQwMCxcclxuICAgICAgICByb3RhdGVMZWZ0OiB0cnVlLFxyXG4gICAgICAgIHJvdGF0ZVJpZ2h0OiB0cnVlLFxyXG4gICAgICAgIGZsaXBIb3Jpem9udGFsOiB0cnVlLFxyXG4gICAgICAgIGZsaXBWZXJ0aWNhbDogdHJ1ZSxcclxuICAgICAgICByb3RhdGVQbHVnaW5TdHJpbmdzOiB7XHJcbiAgICAgICAgICAgIGZsaXBWZXJ0aWNhbDogJ0ZsaXAgdmVydGljYWwnLFxyXG4gICAgICAgICAgICBmbGlwSG9yaXpvbnRhbDogJ0ZsaXAgaG9yaXpvbnRhbCcsXHJcbiAgICAgICAgICAgIHJvdGF0ZUxlZnQ6ICdSb3RhdGUgbGVmdCcsXHJcbiAgICAgICAgICAgIHJvdGF0ZVJpZ2h0OiAnUm90YXRlIHJpZ2h0JyxcclxuICAgICAgICB9LFxyXG4gICAgfTtcblxuICAgIHZhciBSb3RhdGUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgZnVuY3Rpb24gUm90YXRlKGluc3RhbmNlLCAkTEcpIHtcclxuICAgICAgICAgICAgLy8gZ2V0IGxpZ2h0R2FsbGVyeSBjb3JlIHBsdWdpbiBpbnN0YW5jZVxyXG4gICAgICAgICAgICB0aGlzLmNvcmUgPSBpbnN0YW5jZTtcclxuICAgICAgICAgICAgdGhpcy4kTEcgPSAkTEc7XHJcbiAgICAgICAgICAgIC8vIGV4dGVuZCBtb2R1bGUgZGVmYXVsdCBzZXR0aW5ncyB3aXRoIGxpZ2h0R2FsbGVyeSBjb3JlIHNldHRpbmdzXHJcbiAgICAgICAgICAgIHRoaXMuc2V0dGluZ3MgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgcm90YXRlU2V0dGluZ3MpLCB0aGlzLmNvcmUuc2V0dGluZ3MpO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcbiAgICAgICAgUm90YXRlLnByb3RvdHlwZS5idWlsZFRlbXBsYXRlcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHJvdGF0ZUljb25zID0gJyc7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmZsaXBWZXJ0aWNhbCkge1xyXG4gICAgICAgICAgICAgICAgcm90YXRlSWNvbnMgKz0gXCI8YnV0dG9uIHR5cGU9XFxcImJ1dHRvblxcXCIgaWQ9XFxcImxnLWZsaXAtdmVyXFxcIiBhcmlhLWxhYmVsPVxcXCJcIiArIHRoaXMuc2V0dGluZ3Mucm90YXRlUGx1Z2luU3RyaW5nc1snZmxpcFZlcnRpY2FsJ10gKyBcIlxcXCIgY2xhc3M9XFxcImxnLWZsaXAtdmVyIGxnLWljb25cXFwiPjwvYnV0dG9uPlwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmZsaXBIb3Jpem9udGFsKSB7XHJcbiAgICAgICAgICAgICAgICByb3RhdGVJY29ucyArPSBcIjxidXR0b24gdHlwZT1cXFwiYnV0dG9uXFxcIiBpZD1cXFwibGctZmxpcC1ob3JcXFwiIGFyaWEtbGFiZWw9XFxcIlwiICsgdGhpcy5zZXR0aW5ncy5yb3RhdGVQbHVnaW5TdHJpbmdzWydmbGlwSG9yaXpvbnRhbCddICsgXCJcXFwiIGNsYXNzPVxcXCJsZy1mbGlwLWhvciBsZy1pY29uXFxcIj48L2J1dHRvbj5cIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5yb3RhdGVMZWZ0KSB7XHJcbiAgICAgICAgICAgICAgICByb3RhdGVJY29ucyArPSBcIjxidXR0b24gdHlwZT1cXFwiYnV0dG9uXFxcIiBpZD1cXFwibGctcm90YXRlLWxlZnRcXFwiIGFyaWEtbGFiZWw9XFxcIlwiICsgdGhpcy5zZXR0aW5ncy5yb3RhdGVQbHVnaW5TdHJpbmdzWydyb3RhdGVMZWZ0J10gKyBcIlxcXCIgY2xhc3M9XFxcImxnLXJvdGF0ZS1sZWZ0IGxnLWljb25cXFwiPjwvYnV0dG9uPlwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnNldHRpbmdzLnJvdGF0ZVJpZ2h0KSB7XHJcbiAgICAgICAgICAgICAgICByb3RhdGVJY29ucyArPSBcIjxidXR0b24gdHlwZT1cXFwiYnV0dG9uXFxcIiBpZD1cXFwibGctcm90YXRlLXJpZ2h0XFxcIiBhcmlhLWxhYmVsPVxcXCJcIiArIHRoaXMuc2V0dGluZ3Mucm90YXRlUGx1Z2luU3RyaW5nc1sncm90YXRlUmlnaHQnXSArIFwiXFxcIiBjbGFzcz1cXFwibGctcm90YXRlLXJpZ2h0IGxnLWljb25cXFwiPjwvYnV0dG9uPlwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuY29yZS4kdG9vbGJhci5hcHBlbmQocm90YXRlSWNvbnMpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgUm90YXRlLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuc2V0dGluZ3Mucm90YXRlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5idWlsZFRlbXBsYXRlcygpO1xyXG4gICAgICAgICAgICAvLyBTYXZlIHJvdGF0ZSBjb25maWcgZm9yIGVhY2ggaXRlbSB0byBwZXJzaXN0IGl0cyByb3RhdGUsIGZsaXAgdmFsdWVzXHJcbiAgICAgICAgICAgIC8vIGV2ZW4gYWZ0ZXIgbmF2aWdhdGluZyB0byBkaWZlcmVudCBzbGlkZXNcclxuICAgICAgICAgICAgdGhpcy5yb3RhdGVWYWx1ZXNMaXN0ID0ge307XHJcbiAgICAgICAgICAgIC8vIGV2ZW50IHRyaWdnZXJlZCBhZnRlciBhcHBlbmRpbmcgc2xpZGUgY29udGVudFxyXG4gICAgICAgICAgICB0aGlzLmNvcmUuTEdlbC5vbihsR0V2ZW50cy5hZnRlckFwcGVuZFNsaWRlICsgXCIucm90YXRlXCIsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gZXZlbnQuZGV0YWlsLmluZGV4O1xyXG4gICAgICAgICAgICAgICAgdmFyIGltYWdlV3JhcCA9IF90aGlzLmNvcmVcclxuICAgICAgICAgICAgICAgICAgICAuZ2V0U2xpZGVJdGVtKGluZGV4KVxyXG4gICAgICAgICAgICAgICAgICAgIC5maW5kKCcubGctaW1nLXdyYXAnKVxyXG4gICAgICAgICAgICAgICAgICAgIC5maXJzdCgpO1xyXG4gICAgICAgICAgICAgICAgaW1hZ2VXcmFwLndyYXAoJ2xnLWltZy1yb3RhdGUnKTtcclxuICAgICAgICAgICAgICAgIF90aGlzLmNvcmVcclxuICAgICAgICAgICAgICAgICAgICAuZ2V0U2xpZGVJdGVtKF90aGlzLmNvcmUuaW5kZXgpXHJcbiAgICAgICAgICAgICAgICAgICAgLmZpbmQoJy5sZy1pbWctcm90YXRlJylcclxuICAgICAgICAgICAgICAgICAgICAuY3NzKCd0cmFuc2l0aW9uLWR1cmF0aW9uJywgX3RoaXMuc2V0dGluZ3Mucm90YXRlU3BlZWQgKyAnbXMnKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHRoaXMuY29yZS5vdXRlclxyXG4gICAgICAgICAgICAgICAgLmZpbmQoJyNsZy1yb3RhdGUtbGVmdCcpXHJcbiAgICAgICAgICAgICAgICAuZmlyc3QoKVxyXG4gICAgICAgICAgICAgICAgLm9uKCdjbGljay5sZycsIHRoaXMucm90YXRlTGVmdC5iaW5kKHRoaXMpKTtcclxuICAgICAgICAgICAgdGhpcy5jb3JlLm91dGVyXHJcbiAgICAgICAgICAgICAgICAuZmluZCgnI2xnLXJvdGF0ZS1yaWdodCcpXHJcbiAgICAgICAgICAgICAgICAuZmlyc3QoKVxyXG4gICAgICAgICAgICAgICAgLm9uKCdjbGljay5sZycsIHRoaXMucm90YXRlUmlnaHQuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgICAgIHRoaXMuY29yZS5vdXRlclxyXG4gICAgICAgICAgICAgICAgLmZpbmQoJyNsZy1mbGlwLWhvcicpXHJcbiAgICAgICAgICAgICAgICAuZmlyc3QoKVxyXG4gICAgICAgICAgICAgICAgLm9uKCdjbGljay5sZycsIHRoaXMuZmxpcEhvcml6b250YWwuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgICAgIHRoaXMuY29yZS5vdXRlclxyXG4gICAgICAgICAgICAgICAgLmZpbmQoJyNsZy1mbGlwLXZlcicpXHJcbiAgICAgICAgICAgICAgICAuZmlyc3QoKVxyXG4gICAgICAgICAgICAgICAgLm9uKCdjbGljay5sZycsIHRoaXMuZmxpcFZlcnRpY2FsLmJpbmQodGhpcykpO1xyXG4gICAgICAgICAgICAvLyBSZXNldCByb3RhdGUgb24gc2xpZGUgY2hhbmdlXHJcbiAgICAgICAgICAgIHRoaXMuY29yZS5MR2VsLm9uKGxHRXZlbnRzLmJlZm9yZVNsaWRlICsgXCIucm90YXRlXCIsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFfdGhpcy5yb3RhdGVWYWx1ZXNMaXN0W2V2ZW50LmRldGFpbC5pbmRleF0pIHtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5yb3RhdGVWYWx1ZXNMaXN0W2V2ZW50LmRldGFpbC5pbmRleF0gPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvdGF0ZTogMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmxpcEhvcml6b250YWw6IDEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZsaXBWZXJ0aWNhbDogMSxcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIFJvdGF0ZS5wcm90b3R5cGUuYXBwbHlTdHlsZXMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciAkaW1hZ2UgPSB0aGlzLmNvcmVcclxuICAgICAgICAgICAgICAgIC5nZXRTbGlkZUl0ZW0odGhpcy5jb3JlLmluZGV4KVxyXG4gICAgICAgICAgICAgICAgLmZpbmQoJy5sZy1pbWctcm90YXRlJylcclxuICAgICAgICAgICAgICAgIC5maXJzdCgpO1xyXG4gICAgICAgICAgICAkaW1hZ2UuY3NzKCd0cmFuc2Zvcm0nLCAncm90YXRlKCcgK1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yb3RhdGVWYWx1ZXNMaXN0W3RoaXMuY29yZS5pbmRleF0ucm90YXRlICtcclxuICAgICAgICAgICAgICAgICdkZWcpJyArXHJcbiAgICAgICAgICAgICAgICAnIHNjYWxlM2QoJyArXHJcbiAgICAgICAgICAgICAgICB0aGlzLnJvdGF0ZVZhbHVlc0xpc3RbdGhpcy5jb3JlLmluZGV4XS5mbGlwSG9yaXpvbnRhbCArXHJcbiAgICAgICAgICAgICAgICAnLCAnICtcclxuICAgICAgICAgICAgICAgIHRoaXMucm90YXRlVmFsdWVzTGlzdFt0aGlzLmNvcmUuaW5kZXhdLmZsaXBWZXJ0aWNhbCArXHJcbiAgICAgICAgICAgICAgICAnLCAxKScpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgUm90YXRlLnByb3RvdHlwZS5yb3RhdGVMZWZ0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0aGlzLnJvdGF0ZVZhbHVlc0xpc3RbdGhpcy5jb3JlLmluZGV4XS5yb3RhdGUgLT0gOTA7XHJcbiAgICAgICAgICAgIHRoaXMuYXBwbHlTdHlsZXMoKTtcclxuICAgICAgICAgICAgdGhpcy50cmlnZ2VyRXZlbnRzKGxHRXZlbnRzLnJvdGF0ZUxlZnQsIHtcclxuICAgICAgICAgICAgICAgIHJvdGF0ZTogdGhpcy5yb3RhdGVWYWx1ZXNMaXN0W3RoaXMuY29yZS5pbmRleF0ucm90YXRlLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIFJvdGF0ZS5wcm90b3R5cGUucm90YXRlUmlnaHQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMucm90YXRlVmFsdWVzTGlzdFt0aGlzLmNvcmUuaW5kZXhdLnJvdGF0ZSArPSA5MDtcclxuICAgICAgICAgICAgdGhpcy5hcHBseVN0eWxlcygpO1xyXG4gICAgICAgICAgICB0aGlzLnRyaWdnZXJFdmVudHMobEdFdmVudHMucm90YXRlUmlnaHQsIHtcclxuICAgICAgICAgICAgICAgIHJvdGF0ZTogdGhpcy5yb3RhdGVWYWx1ZXNMaXN0W3RoaXMuY29yZS5pbmRleF0ucm90YXRlLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIFJvdGF0ZS5wcm90b3R5cGUuZ2V0Q3VycmVudFJvdGF0aW9uID0gZnVuY3Rpb24gKGVsKSB7XHJcbiAgICAgICAgICAgIGlmICghZWwpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBzdCA9IHRoaXMuJExHKGVsKS5zdHlsZSgpO1xyXG4gICAgICAgICAgICB2YXIgdG0gPSBzdC5nZXRQcm9wZXJ0eVZhbHVlKCctd2Via2l0LXRyYW5zZm9ybScpIHx8XHJcbiAgICAgICAgICAgICAgICBzdC5nZXRQcm9wZXJ0eVZhbHVlKCctbW96LXRyYW5zZm9ybScpIHx8XHJcbiAgICAgICAgICAgICAgICBzdC5nZXRQcm9wZXJ0eVZhbHVlKCctbXMtdHJhbnNmb3JtJykgfHxcclxuICAgICAgICAgICAgICAgIHN0LmdldFByb3BlcnR5VmFsdWUoJy1vLXRyYW5zZm9ybScpIHx8XHJcbiAgICAgICAgICAgICAgICBzdC5nZXRQcm9wZXJ0eVZhbHVlKCd0cmFuc2Zvcm0nKSB8fFxyXG4gICAgICAgICAgICAgICAgJ25vbmUnO1xyXG4gICAgICAgICAgICBpZiAodG0gIT09ICdub25lJykge1xyXG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlcyA9IHRtLnNwbGl0KCcoJylbMV0uc3BsaXQoJyknKVswXS5zcGxpdCgnLCcpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlcykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBhbmdsZSA9IE1hdGgucm91bmQoTWF0aC5hdGFuMih2YWx1ZXNbMV0sIHZhbHVlc1swXSkgKiAoMTgwIC8gTWF0aC5QSSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhbmdsZSA8IDAgPyBhbmdsZSArIDM2MCA6IGFuZ2xlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgUm90YXRlLnByb3RvdHlwZS5mbGlwSG9yaXpvbnRhbCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHJvdGF0ZUVsID0gdGhpcy5jb3JlXHJcbiAgICAgICAgICAgICAgICAuZ2V0U2xpZGVJdGVtKHRoaXMuY29yZS5pbmRleClcclxuICAgICAgICAgICAgICAgIC5maW5kKCcubGctaW1nLXJvdGF0ZScpXHJcbiAgICAgICAgICAgICAgICAuZmlyc3QoKVxyXG4gICAgICAgICAgICAgICAgLmdldCgpO1xyXG4gICAgICAgICAgICB2YXIgY3VycmVudFJvdGF0aW9uID0gdGhpcy5nZXRDdXJyZW50Um90YXRpb24ocm90YXRlRWwpO1xyXG4gICAgICAgICAgICB2YXIgcm90YXRlQXhpcyA9ICdmbGlwSG9yaXpvbnRhbCc7XHJcbiAgICAgICAgICAgIGlmIChjdXJyZW50Um90YXRpb24gPT09IDkwIHx8IGN1cnJlbnRSb3RhdGlvbiA9PT0gMjcwKSB7XHJcbiAgICAgICAgICAgICAgICByb3RhdGVBeGlzID0gJ2ZsaXBWZXJ0aWNhbCc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5yb3RhdGVWYWx1ZXNMaXN0W3RoaXMuY29yZS5pbmRleF1bcm90YXRlQXhpc10gKj0gLTE7XHJcbiAgICAgICAgICAgIHRoaXMuYXBwbHlTdHlsZXMoKTtcclxuICAgICAgICAgICAgdGhpcy50cmlnZ2VyRXZlbnRzKGxHRXZlbnRzLmZsaXBIb3Jpem9udGFsLCB7XHJcbiAgICAgICAgICAgICAgICBmbGlwSG9yaXpvbnRhbDogdGhpcy5yb3RhdGVWYWx1ZXNMaXN0W3RoaXMuY29yZS5pbmRleF1bcm90YXRlQXhpc10sXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgUm90YXRlLnByb3RvdHlwZS5mbGlwVmVydGljYWwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciByb3RhdGVFbCA9IHRoaXMuY29yZVxyXG4gICAgICAgICAgICAgICAgLmdldFNsaWRlSXRlbSh0aGlzLmNvcmUuaW5kZXgpXHJcbiAgICAgICAgICAgICAgICAuZmluZCgnLmxnLWltZy1yb3RhdGUnKVxyXG4gICAgICAgICAgICAgICAgLmZpcnN0KClcclxuICAgICAgICAgICAgICAgIC5nZXQoKTtcclxuICAgICAgICAgICAgdmFyIGN1cnJlbnRSb3RhdGlvbiA9IHRoaXMuZ2V0Q3VycmVudFJvdGF0aW9uKHJvdGF0ZUVsKTtcclxuICAgICAgICAgICAgdmFyIHJvdGF0ZUF4aXMgPSAnZmxpcFZlcnRpY2FsJztcclxuICAgICAgICAgICAgaWYgKGN1cnJlbnRSb3RhdGlvbiA9PT0gOTAgfHwgY3VycmVudFJvdGF0aW9uID09PSAyNzApIHtcclxuICAgICAgICAgICAgICAgIHJvdGF0ZUF4aXMgPSAnZmxpcEhvcml6b250YWwnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMucm90YXRlVmFsdWVzTGlzdFt0aGlzLmNvcmUuaW5kZXhdW3JvdGF0ZUF4aXNdICo9IC0xO1xyXG4gICAgICAgICAgICB0aGlzLmFwcGx5U3R5bGVzKCk7XHJcbiAgICAgICAgICAgIHRoaXMudHJpZ2dlckV2ZW50cyhsR0V2ZW50cy5mbGlwVmVydGljYWwsIHtcclxuICAgICAgICAgICAgICAgIGZsaXBWZXJ0aWNhbDogdGhpcy5yb3RhdGVWYWx1ZXNMaXN0W3RoaXMuY29yZS5pbmRleF1bcm90YXRlQXhpc10sXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgUm90YXRlLnByb3RvdHlwZS50cmlnZ2VyRXZlbnRzID0gZnVuY3Rpb24gKGV2ZW50LCBkZXRhaWwpIHtcclxuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5jb3JlLkxHZWwudHJpZ2dlcihldmVudCwgZGV0YWlsKTtcclxuICAgICAgICAgICAgfSwgdGhpcy5zZXR0aW5ncy5yb3RhdGVTcGVlZCArIDEwKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIFJvdGF0ZS5wcm90b3R5cGUuaXNJbWFnZU9yaWVudGF0aW9uQ2hhbmdlZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHJvdGF0ZVZhbHVlID0gdGhpcy5yb3RhdGVWYWx1ZXNMaXN0W3RoaXMuY29yZS5pbmRleF07XHJcbiAgICAgICAgICAgIHZhciBpc1JvdGF0ZWQgPSBNYXRoLmFicyhyb3RhdGVWYWx1ZS5yb3RhdGUpICUgMzYwICE9PSAwO1xyXG4gICAgICAgICAgICB2YXIgaWZGbGlwcGVkSG9yID0gcm90YXRlVmFsdWUuZmxpcEhvcml6b250YWwgPCAwO1xyXG4gICAgICAgICAgICB2YXIgaWZGbGlwcGVkVmVyID0gcm90YXRlVmFsdWUuZmxpcFZlcnRpY2FsIDwgMDtcclxuICAgICAgICAgICAgcmV0dXJuIGlzUm90YXRlZCB8fCBpZkZsaXBwZWRIb3IgfHwgaWZGbGlwcGVkVmVyO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgUm90YXRlLnByb3RvdHlwZS5jbG9zZUdhbGxlcnkgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmlzSW1hZ2VPcmllbnRhdGlvbkNoYW5nZWQoKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb3JlLmdldFNsaWRlSXRlbSh0aGlzLmNvcmUuaW5kZXgpLmNzcygnb3BhY2l0eScsIDApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMucm90YXRlVmFsdWVzTGlzdCA9IHt9O1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgUm90YXRlLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAvLyBVbmJpbmQgYWxsIGV2ZW50cyBhZGRlZCBieSBsaWdodEdhbGxlcnkgcm90YXRlIHBsdWdpblxyXG4gICAgICAgICAgICB0aGlzLmNvcmUuTEdlbC5vZmYoJy5sZy5yb3RhdGUnKTtcclxuICAgICAgICAgICAgdGhpcy5jb3JlLkxHZWwub2ZmKCcucm90YXRlJyk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gUm90YXRlO1xyXG4gICAgfSgpKTtcblxuICAgIHJldHVybiBSb3RhdGU7XG5cbn0pKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sZy1yb3RhdGUudW1kLmpzLm1hcFxuIiwiLyohXG4gKiBGbGlja2l0eSBQQUNLQUdFRCB2Mi4zLjBcbiAqIFRvdWNoLCByZXNwb25zaXZlLCBmbGlja2FibGUgY2Fyb3VzZWxzXG4gKlxuICogTGljZW5zZWQgR1BMdjMgZm9yIG9wZW4gc291cmNlIHVzZVxuICogb3IgRmxpY2tpdHkgQ29tbWVyY2lhbCBMaWNlbnNlIGZvciBjb21tZXJjaWFsIHVzZVxuICpcbiAqIGh0dHBzOi8vZmxpY2tpdHkubWV0YWZpenp5LmNvXG4gKiBDb3B5cmlnaHQgMjAxNS0yMDIxIE1ldGFmaXp6eVxuICovXG4oZnVuY3Rpb24oZSxpKXtpZih0eXBlb2YgZGVmaW5lPT1cImZ1bmN0aW9uXCImJmRlZmluZS5hbWQpe2RlZmluZShcImpxdWVyeS1icmlkZ2V0L2pxdWVyeS1icmlkZ2V0XCIsW1wianF1ZXJ5XCJdLGZ1bmN0aW9uKHQpe3JldHVybiBpKGUsdCl9KX1lbHNlIGlmKHR5cGVvZiBtb2R1bGU9PVwib2JqZWN0XCImJm1vZHVsZS5leHBvcnRzKXttb2R1bGUuZXhwb3J0cz1pKGUscmVxdWlyZShcImpxdWVyeVwiKSl9ZWxzZXtlLmpRdWVyeUJyaWRnZXQ9aShlLGUualF1ZXJ5KX19KSh3aW5kb3csZnVuY3Rpb24gdChlLHIpe1widXNlIHN0cmljdFwiO3ZhciBvPUFycmF5LnByb3RvdHlwZS5zbGljZTt2YXIgaT1lLmNvbnNvbGU7dmFyIHU9dHlwZW9mIGk9PVwidW5kZWZpbmVkXCI/ZnVuY3Rpb24oKXt9OmZ1bmN0aW9uKHQpe2kuZXJyb3IodCl9O2Z1bmN0aW9uIG4oaCxzLGMpe2M9Y3x8cnx8ZS5qUXVlcnk7aWYoIWMpe3JldHVybn1pZighcy5wcm90b3R5cGUub3B0aW9uKXtzLnByb3RvdHlwZS5vcHRpb249ZnVuY3Rpb24odCl7aWYoIWMuaXNQbGFpbk9iamVjdCh0KSl7cmV0dXJufXRoaXMub3B0aW9ucz1jLmV4dGVuZCh0cnVlLHRoaXMub3B0aW9ucyx0KX19Yy5mbltoXT1mdW5jdGlvbih0KXtpZih0eXBlb2YgdD09XCJzdHJpbmdcIil7dmFyIGU9by5jYWxsKGFyZ3VtZW50cywxKTtyZXR1cm4gaSh0aGlzLHQsZSl9bih0aGlzLHQpO3JldHVybiB0aGlzfTtmdW5jdGlvbiBpKHQscixvKXt2YXIgYTt2YXIgbD1cIiQoKS5cIitoKycoXCInK3IrJ1wiKSc7dC5lYWNoKGZ1bmN0aW9uKHQsZSl7dmFyIGk9Yy5kYXRhKGUsaCk7aWYoIWkpe3UoaCtcIiBub3QgaW5pdGlhbGl6ZWQuIENhbm5vdCBjYWxsIG1ldGhvZHMsIGkuZS4gXCIrbCk7cmV0dXJufXZhciBuPWlbcl07aWYoIW58fHIuY2hhckF0KDApPT1cIl9cIil7dShsK1wiIGlzIG5vdCBhIHZhbGlkIG1ldGhvZFwiKTtyZXR1cm59dmFyIHM9bi5hcHBseShpLG8pO2E9YT09PXVuZGVmaW5lZD9zOmF9KTtyZXR1cm4gYSE9PXVuZGVmaW5lZD9hOnR9ZnVuY3Rpb24gbih0LG4pe3QuZWFjaChmdW5jdGlvbih0LGUpe3ZhciBpPWMuZGF0YShlLGgpO2lmKGkpe2kub3B0aW9uKG4pO2kuX2luaXQoKX1lbHNle2k9bmV3IHMoZSxuKTtjLmRhdGEoZSxoLGkpfX0pfWEoYyl9ZnVuY3Rpb24gYSh0KXtpZighdHx8dCYmdC5icmlkZ2V0KXtyZXR1cm59dC5icmlkZ2V0PW59YShyfHxlLmpRdWVyeSk7cmV0dXJuIG59KTsoZnVuY3Rpb24odCxlKXtpZih0eXBlb2YgZGVmaW5lPT1cImZ1bmN0aW9uXCImJmRlZmluZS5hbWQpe2RlZmluZShcImV2LWVtaXR0ZXIvZXYtZW1pdHRlclwiLGUpfWVsc2UgaWYodHlwZW9mIG1vZHVsZT09XCJvYmplY3RcIiYmbW9kdWxlLmV4cG9ydHMpe21vZHVsZS5leHBvcnRzPWUoKX1lbHNle3QuRXZFbWl0dGVyPWUoKX19KSh0eXBlb2Ygd2luZG93IT1cInVuZGVmaW5lZFwiP3dpbmRvdzp0aGlzLGZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCgpe312YXIgZT10LnByb3RvdHlwZTtlLm9uPWZ1bmN0aW9uKHQsZSl7aWYoIXR8fCFlKXtyZXR1cm59dmFyIGk9dGhpcy5fZXZlbnRzPXRoaXMuX2V2ZW50c3x8e307dmFyIG49aVt0XT1pW3RdfHxbXTtpZihuLmluZGV4T2YoZSk9PS0xKXtuLnB1c2goZSl9cmV0dXJuIHRoaXN9O2Uub25jZT1mdW5jdGlvbih0LGUpe2lmKCF0fHwhZSl7cmV0dXJufXRoaXMub24odCxlKTt2YXIgaT10aGlzLl9vbmNlRXZlbnRzPXRoaXMuX29uY2VFdmVudHN8fHt9O3ZhciBuPWlbdF09aVt0XXx8e307bltlXT10cnVlO3JldHVybiB0aGlzfTtlLm9mZj1mdW5jdGlvbih0LGUpe3ZhciBpPXRoaXMuX2V2ZW50cyYmdGhpcy5fZXZlbnRzW3RdO2lmKCFpfHwhaS5sZW5ndGgpe3JldHVybn12YXIgbj1pLmluZGV4T2YoZSk7aWYobiE9LTEpe2kuc3BsaWNlKG4sMSl9cmV0dXJuIHRoaXN9O2UuZW1pdEV2ZW50PWZ1bmN0aW9uKHQsZSl7dmFyIGk9dGhpcy5fZXZlbnRzJiZ0aGlzLl9ldmVudHNbdF07aWYoIWl8fCFpLmxlbmd0aCl7cmV0dXJufWk9aS5zbGljZSgwKTtlPWV8fFtdO3ZhciBuPXRoaXMuX29uY2VFdmVudHMmJnRoaXMuX29uY2VFdmVudHNbdF07Zm9yKHZhciBzPTA7czxpLmxlbmd0aDtzKyspe3ZhciByPWlbc107dmFyIG89biYmbltyXTtpZihvKXt0aGlzLm9mZih0LHIpO2RlbGV0ZSBuW3JdfXIuYXBwbHkodGhpcyxlKX1yZXR1cm4gdGhpc307ZS5hbGxPZmY9ZnVuY3Rpb24oKXtkZWxldGUgdGhpcy5fZXZlbnRzO2RlbGV0ZSB0aGlzLl9vbmNlRXZlbnRzfTtyZXR1cm4gdH0pO1xuLyohXG4gKiBnZXRTaXplIHYyLjAuM1xuICogbWVhc3VyZSBzaXplIG9mIGVsZW1lbnRzXG4gKiBNSVQgbGljZW5zZVxuICovXG4oZnVuY3Rpb24odCxlKXtpZih0eXBlb2YgZGVmaW5lPT1cImZ1bmN0aW9uXCImJmRlZmluZS5hbWQpe2RlZmluZShcImdldC1zaXplL2dldC1zaXplXCIsZSl9ZWxzZSBpZih0eXBlb2YgbW9kdWxlPT1cIm9iamVjdFwiJiZtb2R1bGUuZXhwb3J0cyl7bW9kdWxlLmV4cG9ydHM9ZSgpfWVsc2V7dC5nZXRTaXplPWUoKX19KSh3aW5kb3csZnVuY3Rpb24gdCgpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIG0odCl7dmFyIGU9cGFyc2VGbG9hdCh0KTt2YXIgaT10LmluZGV4T2YoXCIlXCIpPT0tMSYmIWlzTmFOKGUpO3JldHVybiBpJiZlfWZ1bmN0aW9uIGUoKXt9dmFyIGk9dHlwZW9mIGNvbnNvbGU9PVwidW5kZWZpbmVkXCI/ZTpmdW5jdGlvbih0KXtjb25zb2xlLmVycm9yKHQpfTt2YXIgeT1bXCJwYWRkaW5nTGVmdFwiLFwicGFkZGluZ1JpZ2h0XCIsXCJwYWRkaW5nVG9wXCIsXCJwYWRkaW5nQm90dG9tXCIsXCJtYXJnaW5MZWZ0XCIsXCJtYXJnaW5SaWdodFwiLFwibWFyZ2luVG9wXCIsXCJtYXJnaW5Cb3R0b21cIixcImJvcmRlckxlZnRXaWR0aFwiLFwiYm9yZGVyUmlnaHRXaWR0aFwiLFwiYm9yZGVyVG9wV2lkdGhcIixcImJvcmRlckJvdHRvbVdpZHRoXCJdO3ZhciBiPXkubGVuZ3RoO2Z1bmN0aW9uIEUoKXt2YXIgdD17d2lkdGg6MCxoZWlnaHQ6MCxpbm5lcldpZHRoOjAsaW5uZXJIZWlnaHQ6MCxvdXRlcldpZHRoOjAsb3V0ZXJIZWlnaHQ6MH07Zm9yKHZhciBlPTA7ZTxiO2UrKyl7dmFyIGk9eVtlXTt0W2ldPTB9cmV0dXJuIHR9ZnVuY3Rpb24gUyh0KXt2YXIgZT1nZXRDb21wdXRlZFN0eWxlKHQpO2lmKCFlKXtpKFwiU3R5bGUgcmV0dXJuZWQgXCIrZStcIi4gQXJlIHlvdSBydW5uaW5nIHRoaXMgY29kZSBpbiBhIGhpZGRlbiBpZnJhbWUgb24gRmlyZWZveD8gXCIrXCJTZWUgaHR0cHM6Ly9iaXQubHkvZ2V0c2l6ZWJ1ZzFcIil9cmV0dXJuIGV9dmFyIG49ZmFsc2U7dmFyIEM7ZnVuY3Rpb24geCgpe2lmKG4pe3JldHVybn1uPXRydWU7dmFyIHQ9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTt0LnN0eWxlLndpZHRoPVwiMjAwcHhcIjt0LnN0eWxlLnBhZGRpbmc9XCIxcHggMnB4IDNweCA0cHhcIjt0LnN0eWxlLmJvcmRlclN0eWxlPVwic29saWRcIjt0LnN0eWxlLmJvcmRlcldpZHRoPVwiMXB4IDJweCAzcHggNHB4XCI7dC5zdHlsZS5ib3hTaXppbmc9XCJib3JkZXItYm94XCI7dmFyIGU9ZG9jdW1lbnQuYm9keXx8ZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O2UuYXBwZW5kQ2hpbGQodCk7dmFyIGk9Uyh0KTtDPU1hdGgucm91bmQobShpLndpZHRoKSk9PTIwMDtzLmlzQm94U2l6ZU91dGVyPUM7ZS5yZW1vdmVDaGlsZCh0KX1mdW5jdGlvbiBzKHQpe3goKTtpZih0eXBlb2YgdD09XCJzdHJpbmdcIil7dD1kb2N1bWVudC5xdWVyeVNlbGVjdG9yKHQpfWlmKCF0fHx0eXBlb2YgdCE9XCJvYmplY3RcInx8IXQubm9kZVR5cGUpe3JldHVybn12YXIgZT1TKHQpO2lmKGUuZGlzcGxheT09XCJub25lXCIpe3JldHVybiBFKCl9dmFyIGk9e307aS53aWR0aD10Lm9mZnNldFdpZHRoO2kuaGVpZ2h0PXQub2Zmc2V0SGVpZ2h0O3ZhciBuPWkuaXNCb3JkZXJCb3g9ZS5ib3hTaXppbmc9PVwiYm9yZGVyLWJveFwiO2Zvcih2YXIgcz0wO3M8YjtzKyspe3ZhciByPXlbc107dmFyIG89ZVtyXTt2YXIgYT1wYXJzZUZsb2F0KG8pO2lbcl09IWlzTmFOKGEpP2E6MH12YXIgbD1pLnBhZGRpbmdMZWZ0K2kucGFkZGluZ1JpZ2h0O3ZhciBoPWkucGFkZGluZ1RvcCtpLnBhZGRpbmdCb3R0b207dmFyIGM9aS5tYXJnaW5MZWZ0K2kubWFyZ2luUmlnaHQ7dmFyIHU9aS5tYXJnaW5Ub3AraS5tYXJnaW5Cb3R0b207dmFyIGQ9aS5ib3JkZXJMZWZ0V2lkdGgraS5ib3JkZXJSaWdodFdpZHRoO3ZhciBmPWkuYm9yZGVyVG9wV2lkdGgraS5ib3JkZXJCb3R0b21XaWR0aDt2YXIgcD1uJiZDO3ZhciB2PW0oZS53aWR0aCk7aWYodiE9PWZhbHNlKXtpLndpZHRoPXYrKHA/MDpsK2QpfXZhciBnPW0oZS5oZWlnaHQpO2lmKGchPT1mYWxzZSl7aS5oZWlnaHQ9ZysocD8wOmgrZil9aS5pbm5lcldpZHRoPWkud2lkdGgtKGwrZCk7aS5pbm5lckhlaWdodD1pLmhlaWdodC0oaCtmKTtpLm91dGVyV2lkdGg9aS53aWR0aCtjO2kub3V0ZXJIZWlnaHQ9aS5oZWlnaHQrdTtyZXR1cm4gaX1yZXR1cm4gc30pOyhmdW5jdGlvbih0LGUpe1widXNlIHN0cmljdFwiO2lmKHR5cGVvZiBkZWZpbmU9PVwiZnVuY3Rpb25cIiYmZGVmaW5lLmFtZCl7ZGVmaW5lKFwiZGVzYW5kcm8tbWF0Y2hlcy1zZWxlY3Rvci9tYXRjaGVzLXNlbGVjdG9yXCIsZSl9ZWxzZSBpZih0eXBlb2YgbW9kdWxlPT1cIm9iamVjdFwiJiZtb2R1bGUuZXhwb3J0cyl7bW9kdWxlLmV4cG9ydHM9ZSgpfWVsc2V7dC5tYXRjaGVzU2VsZWN0b3I9ZSgpfX0pKHdpbmRvdyxmdW5jdGlvbiB0KCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZnVuY3Rpb24oKXt2YXIgdD13aW5kb3cuRWxlbWVudC5wcm90b3R5cGU7aWYodC5tYXRjaGVzKXtyZXR1cm5cIm1hdGNoZXNcIn1pZih0Lm1hdGNoZXNTZWxlY3Rvcil7cmV0dXJuXCJtYXRjaGVzU2VsZWN0b3JcIn12YXIgZT1bXCJ3ZWJraXRcIixcIm1velwiLFwibXNcIixcIm9cIl07Zm9yKHZhciBpPTA7aTxlLmxlbmd0aDtpKyspe3ZhciBuPWVbaV07dmFyIHM9bitcIk1hdGNoZXNTZWxlY3RvclwiO2lmKHRbc10pe3JldHVybiBzfX19KCk7cmV0dXJuIGZ1bmN0aW9uIHQoZSxpKXtyZXR1cm4gZVtuXShpKX19KTsoZnVuY3Rpb24oZSxpKXtpZih0eXBlb2YgZGVmaW5lPT1cImZ1bmN0aW9uXCImJmRlZmluZS5hbWQpe2RlZmluZShcImZpenp5LXVpLXV0aWxzL3V0aWxzXCIsW1wiZGVzYW5kcm8tbWF0Y2hlcy1zZWxlY3Rvci9tYXRjaGVzLXNlbGVjdG9yXCJdLGZ1bmN0aW9uKHQpe3JldHVybiBpKGUsdCl9KX1lbHNlIGlmKHR5cGVvZiBtb2R1bGU9PVwib2JqZWN0XCImJm1vZHVsZS5leHBvcnRzKXttb2R1bGUuZXhwb3J0cz1pKGUscmVxdWlyZShcImRlc2FuZHJvLW1hdGNoZXMtc2VsZWN0b3JcIikpfWVsc2V7ZS5maXp6eVVJVXRpbHM9aShlLGUubWF0Y2hlc1NlbGVjdG9yKX19KSh3aW5kb3csZnVuY3Rpb24gdChoLHIpe3ZhciBjPXt9O2MuZXh0ZW5kPWZ1bmN0aW9uKHQsZSl7Zm9yKHZhciBpIGluIGUpe3RbaV09ZVtpXX1yZXR1cm4gdH07Yy5tb2R1bG89ZnVuY3Rpb24odCxlKXtyZXR1cm4odCVlK2UpJWV9O3ZhciBpPUFycmF5LnByb3RvdHlwZS5zbGljZTtjLm1ha2VBcnJheT1mdW5jdGlvbih0KXtpZihBcnJheS5pc0FycmF5KHQpKXtyZXR1cm4gdH1pZih0PT09bnVsbHx8dD09PXVuZGVmaW5lZCl7cmV0dXJuW119dmFyIGU9dHlwZW9mIHQ9PVwib2JqZWN0XCImJnR5cGVvZiB0Lmxlbmd0aD09XCJudW1iZXJcIjtpZihlKXtyZXR1cm4gaS5jYWxsKHQpfXJldHVyblt0XX07Yy5yZW1vdmVGcm9tPWZ1bmN0aW9uKHQsZSl7dmFyIGk9dC5pbmRleE9mKGUpO2lmKGkhPS0xKXt0LnNwbGljZShpLDEpfX07Yy5nZXRQYXJlbnQ9ZnVuY3Rpb24odCxlKXt3aGlsZSh0LnBhcmVudE5vZGUmJnQhPWRvY3VtZW50LmJvZHkpe3Q9dC5wYXJlbnROb2RlO2lmKHIodCxlKSl7cmV0dXJuIHR9fX07Yy5nZXRRdWVyeUVsZW1lbnQ9ZnVuY3Rpb24odCl7aWYodHlwZW9mIHQ9PVwic3RyaW5nXCIpe3JldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHQpfXJldHVybiB0fTtjLmhhbmRsZUV2ZW50PWZ1bmN0aW9uKHQpe3ZhciBlPVwib25cIit0LnR5cGU7aWYodGhpc1tlXSl7dGhpc1tlXSh0KX19O2MuZmlsdGVyRmluZEVsZW1lbnRzPWZ1bmN0aW9uKHQsbil7dD1jLm1ha2VBcnJheSh0KTt2YXIgcz1bXTt0LmZvckVhY2goZnVuY3Rpb24odCl7aWYoISh0IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpKXtyZXR1cm59aWYoIW4pe3MucHVzaCh0KTtyZXR1cm59aWYocih0LG4pKXtzLnB1c2godCl9dmFyIGU9dC5xdWVyeVNlbGVjdG9yQWxsKG4pO2Zvcih2YXIgaT0wO2k8ZS5sZW5ndGg7aSsrKXtzLnB1c2goZVtpXSl9fSk7cmV0dXJuIHN9O2MuZGVib3VuY2VNZXRob2Q9ZnVuY3Rpb24odCxlLG4pe249bnx8MTAwO3ZhciBzPXQucHJvdG90eXBlW2VdO3ZhciByPWUrXCJUaW1lb3V0XCI7dC5wcm90b3R5cGVbZV09ZnVuY3Rpb24oKXt2YXIgdD10aGlzW3JdO2NsZWFyVGltZW91dCh0KTt2YXIgZT1hcmd1bWVudHM7dmFyIGk9dGhpczt0aGlzW3JdPXNldFRpbWVvdXQoZnVuY3Rpb24oKXtzLmFwcGx5KGksZSk7ZGVsZXRlIGlbcl19LG4pfX07Yy5kb2NSZWFkeT1mdW5jdGlvbih0KXt2YXIgZT1kb2N1bWVudC5yZWFkeVN0YXRlO2lmKGU9PVwiY29tcGxldGVcInx8ZT09XCJpbnRlcmFjdGl2ZVwiKXtzZXRUaW1lb3V0KHQpfWVsc2V7ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIix0KX19O2MudG9EYXNoZWQ9ZnVuY3Rpb24odCl7cmV0dXJuIHQucmVwbGFjZSgvKC4pKFtBLVpdKS9nLGZ1bmN0aW9uKHQsZSxpKXtyZXR1cm4gZStcIi1cIitpfSkudG9Mb3dlckNhc2UoKX07dmFyIHU9aC5jb25zb2xlO2MuaHRtbEluaXQ9ZnVuY3Rpb24oYSxsKXtjLmRvY1JlYWR5KGZ1bmN0aW9uKCl7dmFyIHQ9Yy50b0Rhc2hlZChsKTt2YXIgcz1cImRhdGEtXCIrdDt2YXIgZT1kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiW1wiK3MrXCJdXCIpO3ZhciBpPWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuanMtXCIrdCk7dmFyIG49Yy5tYWtlQXJyYXkoZSkuY29uY2F0KGMubWFrZUFycmF5KGkpKTt2YXIgcj1zK1wiLW9wdGlvbnNcIjt2YXIgbz1oLmpRdWVyeTtuLmZvckVhY2goZnVuY3Rpb24oZSl7dmFyIHQ9ZS5nZXRBdHRyaWJ1dGUocyl8fGUuZ2V0QXR0cmlidXRlKHIpO3ZhciBpO3RyeXtpPXQmJkpTT04ucGFyc2UodCl9Y2F0Y2godCl7aWYodSl7dS5lcnJvcihcIkVycm9yIHBhcnNpbmcgXCIrcytcIiBvbiBcIitlLmNsYXNzTmFtZStcIjogXCIrdCl9cmV0dXJufXZhciBuPW5ldyBhKGUsaSk7aWYobyl7by5kYXRhKGUsbCxuKX19KX0pfTtyZXR1cm4gY30pOyhmdW5jdGlvbihlLGkpe2lmKHR5cGVvZiBkZWZpbmU9PVwiZnVuY3Rpb25cIiYmZGVmaW5lLmFtZCl7ZGVmaW5lKFwiZmxpY2tpdHkvanMvY2VsbFwiLFtcImdldC1zaXplL2dldC1zaXplXCJdLGZ1bmN0aW9uKHQpe3JldHVybiBpKGUsdCl9KX1lbHNlIGlmKHR5cGVvZiBtb2R1bGU9PVwib2JqZWN0XCImJm1vZHVsZS5leHBvcnRzKXttb2R1bGUuZXhwb3J0cz1pKGUscmVxdWlyZShcImdldC1zaXplXCIpKX1lbHNle2UuRmxpY2tpdHk9ZS5GbGlja2l0eXx8e307ZS5GbGlja2l0eS5DZWxsPWkoZSxlLmdldFNpemUpfX0pKHdpbmRvdyxmdW5jdGlvbiB0KGUsaSl7ZnVuY3Rpb24gbih0LGUpe3RoaXMuZWxlbWVudD10O3RoaXMucGFyZW50PWU7dGhpcy5jcmVhdGUoKX12YXIgcz1uLnByb3RvdHlwZTtzLmNyZWF0ZT1mdW5jdGlvbigpe3RoaXMuZWxlbWVudC5zdHlsZS5wb3NpdGlvbj1cImFic29sdXRlXCI7dGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZShcImFyaWEtaGlkZGVuXCIsXCJ0cnVlXCIpO3RoaXMueD0wO3RoaXMuc2hpZnQ9MDt0aGlzLmVsZW1lbnQuc3R5bGVbdGhpcy5wYXJlbnQub3JpZ2luU2lkZV09MH07cy5kZXN0cm95PWZ1bmN0aW9uKCl7dGhpcy51bnNlbGVjdCgpO3RoaXMuZWxlbWVudC5zdHlsZS5wb3NpdGlvbj1cIlwiO3ZhciB0PXRoaXMucGFyZW50Lm9yaWdpblNpZGU7dGhpcy5lbGVtZW50LnN0eWxlW3RdPVwiXCI7dGhpcy5lbGVtZW50LnN0eWxlLnRyYW5zZm9ybT1cIlwiO3RoaXMuZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoXCJhcmlhLWhpZGRlblwiKX07cy5nZXRTaXplPWZ1bmN0aW9uKCl7dGhpcy5zaXplPWkodGhpcy5lbGVtZW50KX07cy5zZXRQb3NpdGlvbj1mdW5jdGlvbih0KXt0aGlzLng9dDt0aGlzLnVwZGF0ZVRhcmdldCgpO3RoaXMucmVuZGVyUG9zaXRpb24odCl9O3MudXBkYXRlVGFyZ2V0PXMuc2V0RGVmYXVsdFRhcmdldD1mdW5jdGlvbigpe3ZhciB0PXRoaXMucGFyZW50Lm9yaWdpblNpZGU9PVwibGVmdFwiP1wibWFyZ2luTGVmdFwiOlwibWFyZ2luUmlnaHRcIjt0aGlzLnRhcmdldD10aGlzLngrdGhpcy5zaXplW3RdK3RoaXMuc2l6ZS53aWR0aCp0aGlzLnBhcmVudC5jZWxsQWxpZ259O3MucmVuZGVyUG9zaXRpb249ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5wYXJlbnQub3JpZ2luU2lkZT09PVwibGVmdFwiPzE6LTE7dmFyIGk9dGhpcy5wYXJlbnQub3B0aW9ucy5wZXJjZW50UG9zaXRpb24/dCplKih0aGlzLnBhcmVudC5zaXplLmlubmVyV2lkdGgvdGhpcy5zaXplLndpZHRoKTp0KmU7dGhpcy5lbGVtZW50LnN0eWxlLnRyYW5zZm9ybT1cInRyYW5zbGF0ZVgoXCIrdGhpcy5wYXJlbnQuZ2V0UG9zaXRpb25WYWx1ZShpKStcIilcIn07cy5zZWxlY3Q9ZnVuY3Rpb24oKXt0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImlzLXNlbGVjdGVkXCIpO3RoaXMuZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoXCJhcmlhLWhpZGRlblwiKX07cy51bnNlbGVjdD1mdW5jdGlvbigpe3RoaXMuZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwiaXMtc2VsZWN0ZWRcIik7dGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZShcImFyaWEtaGlkZGVuXCIsXCJ0cnVlXCIpfTtzLndyYXBTaGlmdD1mdW5jdGlvbih0KXt0aGlzLnNoaWZ0PXQ7dGhpcy5yZW5kZXJQb3NpdGlvbih0aGlzLngrdGhpcy5wYXJlbnQuc2xpZGVhYmxlV2lkdGgqdCl9O3MucmVtb3ZlPWZ1bmN0aW9uKCl7dGhpcy5lbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5lbGVtZW50KX07cmV0dXJuIG59KTsoZnVuY3Rpb24odCxlKXtpZih0eXBlb2YgZGVmaW5lPT1cImZ1bmN0aW9uXCImJmRlZmluZS5hbWQpe2RlZmluZShcImZsaWNraXR5L2pzL3NsaWRlXCIsZSl9ZWxzZSBpZih0eXBlb2YgbW9kdWxlPT1cIm9iamVjdFwiJiZtb2R1bGUuZXhwb3J0cyl7bW9kdWxlLmV4cG9ydHM9ZSgpfWVsc2V7dC5GbGlja2l0eT10LkZsaWNraXR5fHx7fTt0LkZsaWNraXR5LlNsaWRlPWUoKX19KSh3aW5kb3csZnVuY3Rpb24gdCgpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGUodCl7dGhpcy5wYXJlbnQ9dDt0aGlzLmlzT3JpZ2luTGVmdD10Lm9yaWdpblNpZGU9PVwibGVmdFwiO3RoaXMuY2VsbHM9W107dGhpcy5vdXRlcldpZHRoPTA7dGhpcy5oZWlnaHQ9MH12YXIgaT1lLnByb3RvdHlwZTtpLmFkZENlbGw9ZnVuY3Rpb24odCl7dGhpcy5jZWxscy5wdXNoKHQpO3RoaXMub3V0ZXJXaWR0aCs9dC5zaXplLm91dGVyV2lkdGg7dGhpcy5oZWlnaHQ9TWF0aC5tYXgodC5zaXplLm91dGVySGVpZ2h0LHRoaXMuaGVpZ2h0KTtpZih0aGlzLmNlbGxzLmxlbmd0aD09MSl7dGhpcy54PXQueDt2YXIgZT10aGlzLmlzT3JpZ2luTGVmdD9cIm1hcmdpbkxlZnRcIjpcIm1hcmdpblJpZ2h0XCI7dGhpcy5maXJzdE1hcmdpbj10LnNpemVbZV19fTtpLnVwZGF0ZVRhcmdldD1mdW5jdGlvbigpe3ZhciB0PXRoaXMuaXNPcmlnaW5MZWZ0P1wibWFyZ2luUmlnaHRcIjpcIm1hcmdpbkxlZnRcIjt2YXIgZT10aGlzLmdldExhc3RDZWxsKCk7dmFyIGk9ZT9lLnNpemVbdF06MDt2YXIgbj10aGlzLm91dGVyV2lkdGgtKHRoaXMuZmlyc3RNYXJnaW4raSk7dGhpcy50YXJnZXQ9dGhpcy54K3RoaXMuZmlyc3RNYXJnaW4rbip0aGlzLnBhcmVudC5jZWxsQWxpZ259O2kuZ2V0TGFzdENlbGw9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jZWxsc1t0aGlzLmNlbGxzLmxlbmd0aC0xXX07aS5zZWxlY3Q9ZnVuY3Rpb24oKXt0aGlzLmNlbGxzLmZvckVhY2goZnVuY3Rpb24odCl7dC5zZWxlY3QoKX0pfTtpLnVuc2VsZWN0PWZ1bmN0aW9uKCl7dGhpcy5jZWxscy5mb3JFYWNoKGZ1bmN0aW9uKHQpe3QudW5zZWxlY3QoKX0pfTtpLmdldENlbGxFbGVtZW50cz1mdW5jdGlvbigpe3JldHVybiB0aGlzLmNlbGxzLm1hcChmdW5jdGlvbih0KXtyZXR1cm4gdC5lbGVtZW50fSl9O3JldHVybiBlfSk7KGZ1bmN0aW9uKGUsaSl7aWYodHlwZW9mIGRlZmluZT09XCJmdW5jdGlvblwiJiZkZWZpbmUuYW1kKXtkZWZpbmUoXCJmbGlja2l0eS9qcy9hbmltYXRlXCIsW1wiZml6enktdWktdXRpbHMvdXRpbHNcIl0sZnVuY3Rpb24odCl7cmV0dXJuIGkoZSx0KX0pfWVsc2UgaWYodHlwZW9mIG1vZHVsZT09XCJvYmplY3RcIiYmbW9kdWxlLmV4cG9ydHMpe21vZHVsZS5leHBvcnRzPWkoZSxyZXF1aXJlKFwiZml6enktdWktdXRpbHNcIikpfWVsc2V7ZS5GbGlja2l0eT1lLkZsaWNraXR5fHx7fTtlLkZsaWNraXR5LmFuaW1hdGVQcm90b3R5cGU9aShlLGUuZml6enlVSVV0aWxzKX19KSh3aW5kb3csZnVuY3Rpb24gdChlLGkpe3ZhciBuPXt9O24uc3RhcnRBbmltYXRpb249ZnVuY3Rpb24oKXtpZih0aGlzLmlzQW5pbWF0aW5nKXtyZXR1cm59dGhpcy5pc0FuaW1hdGluZz10cnVlO3RoaXMucmVzdGluZ0ZyYW1lcz0wO3RoaXMuYW5pbWF0ZSgpfTtuLmFuaW1hdGU9ZnVuY3Rpb24oKXt0aGlzLmFwcGx5RHJhZ0ZvcmNlKCk7dGhpcy5hcHBseVNlbGVjdGVkQXR0cmFjdGlvbigpO3ZhciB0PXRoaXMueDt0aGlzLmludGVncmF0ZVBoeXNpY3MoKTt0aGlzLnBvc2l0aW9uU2xpZGVyKCk7dGhpcy5zZXR0bGUodCk7aWYodGhpcy5pc0FuaW1hdGluZyl7dmFyIGU9dGhpcztyZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gdCgpe2UuYW5pbWF0ZSgpfSl9fTtuLnBvc2l0aW9uU2xpZGVyPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy54O2lmKHRoaXMub3B0aW9ucy53cmFwQXJvdW5kJiZ0aGlzLmNlbGxzLmxlbmd0aD4xKXt0PWkubW9kdWxvKHQsdGhpcy5zbGlkZWFibGVXaWR0aCk7dC09dGhpcy5zbGlkZWFibGVXaWR0aDt0aGlzLnNoaWZ0V3JhcENlbGxzKHQpfXRoaXMuc2V0VHJhbnNsYXRlWCh0LHRoaXMuaXNBbmltYXRpbmcpO3RoaXMuZGlzcGF0Y2hTY3JvbGxFdmVudCgpfTtuLnNldFRyYW5zbGF0ZVg9ZnVuY3Rpb24odCxlKXt0Kz10aGlzLmN1cnNvclBvc2l0aW9uO3Q9dGhpcy5vcHRpb25zLnJpZ2h0VG9MZWZ0Py10OnQ7dmFyIGk9dGhpcy5nZXRQb3NpdGlvblZhbHVlKHQpO3RoaXMuc2xpZGVyLnN0eWxlLnRyYW5zZm9ybT1lP1widHJhbnNsYXRlM2QoXCIraStcIiwwLDApXCI6XCJ0cmFuc2xhdGVYKFwiK2krXCIpXCJ9O24uZGlzcGF0Y2hTY3JvbGxFdmVudD1mdW5jdGlvbigpe3ZhciB0PXRoaXMuc2xpZGVzWzBdO2lmKCF0KXtyZXR1cm59dmFyIGU9LXRoaXMueC10LnRhcmdldDt2YXIgaT1lL3RoaXMuc2xpZGVzV2lkdGg7dGhpcy5kaXNwYXRjaEV2ZW50KFwic2Nyb2xsXCIsbnVsbCxbaSxlXSl9O24ucG9zaXRpb25TbGlkZXJBdFNlbGVjdGVkPWZ1bmN0aW9uKCl7aWYoIXRoaXMuY2VsbHMubGVuZ3RoKXtyZXR1cm59dGhpcy54PS10aGlzLnNlbGVjdGVkU2xpZGUudGFyZ2V0O3RoaXMudmVsb2NpdHk9MDt0aGlzLnBvc2l0aW9uU2xpZGVyKCl9O24uZ2V0UG9zaXRpb25WYWx1ZT1mdW5jdGlvbih0KXtpZih0aGlzLm9wdGlvbnMucGVyY2VudFBvc2l0aW9uKXtyZXR1cm4gTWF0aC5yb3VuZCh0L3RoaXMuc2l6ZS5pbm5lcldpZHRoKjFlNCkqLjAxK1wiJVwifWVsc2V7cmV0dXJuIE1hdGgucm91bmQodCkrXCJweFwifX07bi5zZXR0bGU9ZnVuY3Rpb24odCl7dmFyIGU9IXRoaXMuaXNQb2ludGVyRG93biYmTWF0aC5yb3VuZCh0aGlzLngqMTAwKT09TWF0aC5yb3VuZCh0KjEwMCk7aWYoZSl7dGhpcy5yZXN0aW5nRnJhbWVzKyt9aWYodGhpcy5yZXN0aW5nRnJhbWVzPjIpe3RoaXMuaXNBbmltYXRpbmc9ZmFsc2U7ZGVsZXRlIHRoaXMuaXNGcmVlU2Nyb2xsaW5nO3RoaXMucG9zaXRpb25TbGlkZXIoKTt0aGlzLmRpc3BhdGNoRXZlbnQoXCJzZXR0bGVcIixudWxsLFt0aGlzLnNlbGVjdGVkSW5kZXhdKX19O24uc2hpZnRXcmFwQ2VsbHM9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5jdXJzb3JQb3NpdGlvbit0O3RoaXMuX3NoaWZ0Q2VsbHModGhpcy5iZWZvcmVTaGlmdENlbGxzLGUsLTEpO3ZhciBpPXRoaXMuc2l6ZS5pbm5lcldpZHRoLSh0K3RoaXMuc2xpZGVhYmxlV2lkdGgrdGhpcy5jdXJzb3JQb3NpdGlvbik7dGhpcy5fc2hpZnRDZWxscyh0aGlzLmFmdGVyU2hpZnRDZWxscyxpLDEpfTtuLl9zaGlmdENlbGxzPWZ1bmN0aW9uKHQsZSxpKXtmb3IodmFyIG49MDtuPHQubGVuZ3RoO24rKyl7dmFyIHM9dFtuXTt2YXIgcj1lPjA/aTowO3Mud3JhcFNoaWZ0KHIpO2UtPXMuc2l6ZS5vdXRlcldpZHRofX07bi5fdW5zaGlmdENlbGxzPWZ1bmN0aW9uKHQpe2lmKCF0fHwhdC5sZW5ndGgpe3JldHVybn1mb3IodmFyIGU9MDtlPHQubGVuZ3RoO2UrKyl7dFtlXS53cmFwU2hpZnQoMCl9fTtuLmludGVncmF0ZVBoeXNpY3M9ZnVuY3Rpb24oKXt0aGlzLngrPXRoaXMudmVsb2NpdHk7dGhpcy52ZWxvY2l0eSo9dGhpcy5nZXRGcmljdGlvbkZhY3RvcigpfTtuLmFwcGx5Rm9yY2U9ZnVuY3Rpb24odCl7dGhpcy52ZWxvY2l0eSs9dH07bi5nZXRGcmljdGlvbkZhY3Rvcj1mdW5jdGlvbigpe3JldHVybiAxLXRoaXMub3B0aW9uc1t0aGlzLmlzRnJlZVNjcm9sbGluZz9cImZyZWVTY3JvbGxGcmljdGlvblwiOlwiZnJpY3Rpb25cIl19O24uZ2V0UmVzdGluZ1Bvc2l0aW9uPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMueCt0aGlzLnZlbG9jaXR5LygxLXRoaXMuZ2V0RnJpY3Rpb25GYWN0b3IoKSl9O24uYXBwbHlEcmFnRm9yY2U9ZnVuY3Rpb24oKXtpZighdGhpcy5pc0RyYWdnYWJsZXx8IXRoaXMuaXNQb2ludGVyRG93bil7cmV0dXJufXZhciB0PXRoaXMuZHJhZ1gtdGhpcy54O3ZhciBlPXQtdGhpcy52ZWxvY2l0eTt0aGlzLmFwcGx5Rm9yY2UoZSl9O24uYXBwbHlTZWxlY3RlZEF0dHJhY3Rpb249ZnVuY3Rpb24oKXt2YXIgdD10aGlzLmlzRHJhZ2dhYmxlJiZ0aGlzLmlzUG9pbnRlckRvd247aWYodHx8dGhpcy5pc0ZyZWVTY3JvbGxpbmd8fCF0aGlzLnNsaWRlcy5sZW5ndGgpe3JldHVybn12YXIgZT10aGlzLnNlbGVjdGVkU2xpZGUudGFyZ2V0Ki0xLXRoaXMueDt2YXIgaT1lKnRoaXMub3B0aW9ucy5zZWxlY3RlZEF0dHJhY3Rpb247dGhpcy5hcHBseUZvcmNlKGkpfTtyZXR1cm4gbn0pOyhmdW5jdGlvbihvLGEpe2lmKHR5cGVvZiBkZWZpbmU9PVwiZnVuY3Rpb25cIiYmZGVmaW5lLmFtZCl7ZGVmaW5lKFwiZmxpY2tpdHkvanMvZmxpY2tpdHlcIixbXCJldi1lbWl0dGVyL2V2LWVtaXR0ZXJcIixcImdldC1zaXplL2dldC1zaXplXCIsXCJmaXp6eS11aS11dGlscy91dGlsc1wiLFwiLi9jZWxsXCIsXCIuL3NsaWRlXCIsXCIuL2FuaW1hdGVcIl0sZnVuY3Rpb24odCxlLGksbixzLHIpe3JldHVybiBhKG8sdCxlLGksbixzLHIpfSl9ZWxzZSBpZih0eXBlb2YgbW9kdWxlPT1cIm9iamVjdFwiJiZtb2R1bGUuZXhwb3J0cyl7bW9kdWxlLmV4cG9ydHM9YShvLHJlcXVpcmUoXCJldi1lbWl0dGVyXCIpLHJlcXVpcmUoXCJnZXQtc2l6ZVwiKSxyZXF1aXJlKFwiZml6enktdWktdXRpbHNcIikscmVxdWlyZShcIi4vY2VsbFwiKSxyZXF1aXJlKFwiLi9zbGlkZVwiKSxyZXF1aXJlKFwiLi9hbmltYXRlXCIpKX1lbHNle3ZhciB0PW8uRmxpY2tpdHk7by5GbGlja2l0eT1hKG8sby5FdkVtaXR0ZXIsby5nZXRTaXplLG8uZml6enlVSVV0aWxzLHQuQ2VsbCx0LlNsaWRlLHQuYW5pbWF0ZVByb3RvdHlwZSl9fSkod2luZG93LGZ1bmN0aW9uIHQobixlLGksYSxzLG8scil7dmFyIGw9bi5qUXVlcnk7dmFyIGg9bi5nZXRDb21wdXRlZFN0eWxlO3ZhciBjPW4uY29uc29sZTtmdW5jdGlvbiB1KHQsZSl7dD1hLm1ha2VBcnJheSh0KTt3aGlsZSh0Lmxlbmd0aCl7ZS5hcHBlbmRDaGlsZCh0LnNoaWZ0KCkpfX12YXIgZD0wO3ZhciBmPXt9O2Z1bmN0aW9uIHAodCxlKXt2YXIgaT1hLmdldFF1ZXJ5RWxlbWVudCh0KTtpZighaSl7aWYoYyl7Yy5lcnJvcihcIkJhZCBlbGVtZW50IGZvciBGbGlja2l0eTogXCIrKGl8fHQpKX1yZXR1cm59dGhpcy5lbGVtZW50PWk7aWYodGhpcy5lbGVtZW50LmZsaWNraXR5R1VJRCl7dmFyIG49Zlt0aGlzLmVsZW1lbnQuZmxpY2tpdHlHVUlEXTtpZihuKW4ub3B0aW9uKGUpO3JldHVybiBufWlmKGwpe3RoaXMuJGVsZW1lbnQ9bCh0aGlzLmVsZW1lbnQpfXRoaXMub3B0aW9ucz1hLmV4dGVuZCh7fSx0aGlzLmNvbnN0cnVjdG9yLmRlZmF1bHRzKTt0aGlzLm9wdGlvbihlKTt0aGlzLl9jcmVhdGUoKX1wLmRlZmF1bHRzPXthY2Nlc3NpYmlsaXR5OnRydWUsY2VsbEFsaWduOlwiY2VudGVyXCIsZnJlZVNjcm9sbEZyaWN0aW9uOi4wNzUsZnJpY3Rpb246LjI4LG5hbWVzcGFjZUpRdWVyeUV2ZW50czp0cnVlLHBlcmNlbnRQb3NpdGlvbjp0cnVlLHJlc2l6ZTp0cnVlLHNlbGVjdGVkQXR0cmFjdGlvbjouMDI1LHNldEdhbGxlcnlTaXplOnRydWV9O3AuY3JlYXRlTWV0aG9kcz1bXTt2YXIgdj1wLnByb3RvdHlwZTthLmV4dGVuZCh2LGUucHJvdG90eXBlKTt2Ll9jcmVhdGU9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLmd1aWQ9KytkO3RoaXMuZWxlbWVudC5mbGlja2l0eUdVSUQ9dDtmW3RdPXRoaXM7dGhpcy5zZWxlY3RlZEluZGV4PTA7dGhpcy5yZXN0aW5nRnJhbWVzPTA7dGhpcy54PTA7dGhpcy52ZWxvY2l0eT0wO3RoaXMub3JpZ2luU2lkZT10aGlzLm9wdGlvbnMucmlnaHRUb0xlZnQ/XCJyaWdodFwiOlwibGVmdFwiO3RoaXMudmlld3BvcnQ9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTt0aGlzLnZpZXdwb3J0LmNsYXNzTmFtZT1cImZsaWNraXR5LXZpZXdwb3J0XCI7dGhpcy5fY3JlYXRlU2xpZGVyKCk7aWYodGhpcy5vcHRpb25zLnJlc2l6ZXx8dGhpcy5vcHRpb25zLndhdGNoQ1NTKXtuLmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIix0aGlzKX1mb3IodmFyIGUgaW4gdGhpcy5vcHRpb25zLm9uKXt2YXIgaT10aGlzLm9wdGlvbnMub25bZV07dGhpcy5vbihlLGkpfXAuY3JlYXRlTWV0aG9kcy5mb3JFYWNoKGZ1bmN0aW9uKHQpe3RoaXNbdF0oKX0sdGhpcyk7aWYodGhpcy5vcHRpb25zLndhdGNoQ1NTKXt0aGlzLndhdGNoQ1NTKCl9ZWxzZXt0aGlzLmFjdGl2YXRlKCl9fTt2Lm9wdGlvbj1mdW5jdGlvbih0KXthLmV4dGVuZCh0aGlzLm9wdGlvbnMsdCl9O3YuYWN0aXZhdGU9ZnVuY3Rpb24oKXtpZih0aGlzLmlzQWN0aXZlKXtyZXR1cm59dGhpcy5pc0FjdGl2ZT10cnVlO3RoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiZmxpY2tpdHktZW5hYmxlZFwiKTtpZih0aGlzLm9wdGlvbnMucmlnaHRUb0xlZnQpe3RoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiZmxpY2tpdHktcnRsXCIpfXRoaXMuZ2V0U2l6ZSgpO3ZhciB0PXRoaXMuX2ZpbHRlckZpbmRDZWxsRWxlbWVudHModGhpcy5lbGVtZW50LmNoaWxkcmVuKTt1KHQsdGhpcy5zbGlkZXIpO3RoaXMudmlld3BvcnQuYXBwZW5kQ2hpbGQodGhpcy5zbGlkZXIpO3RoaXMuZWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLnZpZXdwb3J0KTt0aGlzLnJlbG9hZENlbGxzKCk7aWYodGhpcy5vcHRpb25zLmFjY2Vzc2liaWxpdHkpe3RoaXMuZWxlbWVudC50YWJJbmRleD0wO3RoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLHRoaXMpfXRoaXMuZW1pdEV2ZW50KFwiYWN0aXZhdGVcIik7dGhpcy5zZWxlY3RJbml0aWFsSW5kZXgoKTt0aGlzLmlzSW5pdEFjdGl2YXRlZD10cnVlO3RoaXMuZGlzcGF0Y2hFdmVudChcInJlYWR5XCIpfTt2Ll9jcmVhdGVTbGlkZXI9ZnVuY3Rpb24oKXt2YXIgdD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO3QuY2xhc3NOYW1lPVwiZmxpY2tpdHktc2xpZGVyXCI7dC5zdHlsZVt0aGlzLm9yaWdpblNpZGVdPTA7dGhpcy5zbGlkZXI9dH07di5fZmlsdGVyRmluZENlbGxFbGVtZW50cz1mdW5jdGlvbih0KXtyZXR1cm4gYS5maWx0ZXJGaW5kRWxlbWVudHModCx0aGlzLm9wdGlvbnMuY2VsbFNlbGVjdG9yKX07di5yZWxvYWRDZWxscz1mdW5jdGlvbigpe3RoaXMuY2VsbHM9dGhpcy5fbWFrZUNlbGxzKHRoaXMuc2xpZGVyLmNoaWxkcmVuKTt0aGlzLnBvc2l0aW9uQ2VsbHMoKTt0aGlzLl9nZXRXcmFwU2hpZnRDZWxscygpO3RoaXMuc2V0R2FsbGVyeVNpemUoKX07di5fbWFrZUNlbGxzPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuX2ZpbHRlckZpbmRDZWxsRWxlbWVudHModCk7dmFyIGk9ZS5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIG5ldyBzKHQsdGhpcyl9LHRoaXMpO3JldHVybiBpfTt2LmdldExhc3RDZWxsPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY2VsbHNbdGhpcy5jZWxscy5sZW5ndGgtMV19O3YuZ2V0TGFzdFNsaWRlPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc2xpZGVzW3RoaXMuc2xpZGVzLmxlbmd0aC0xXX07di5wb3NpdGlvbkNlbGxzPWZ1bmN0aW9uKCl7dGhpcy5fc2l6ZUNlbGxzKHRoaXMuY2VsbHMpO3RoaXMuX3Bvc2l0aW9uQ2VsbHMoMCl9O3YuX3Bvc2l0aW9uQ2VsbHM9ZnVuY3Rpb24odCl7dD10fHwwO3RoaXMubWF4Q2VsbEhlaWdodD10P3RoaXMubWF4Q2VsbEhlaWdodHx8MDowO3ZhciBlPTA7aWYodD4wKXt2YXIgaT10aGlzLmNlbGxzW3QtMV07ZT1pLngraS5zaXplLm91dGVyV2lkdGh9dmFyIG49dGhpcy5jZWxscy5sZW5ndGg7Zm9yKHZhciBzPXQ7czxuO3MrKyl7dmFyIHI9dGhpcy5jZWxsc1tzXTtyLnNldFBvc2l0aW9uKGUpO2UrPXIuc2l6ZS5vdXRlcldpZHRoO3RoaXMubWF4Q2VsbEhlaWdodD1NYXRoLm1heChyLnNpemUub3V0ZXJIZWlnaHQsdGhpcy5tYXhDZWxsSGVpZ2h0KX10aGlzLnNsaWRlYWJsZVdpZHRoPWU7dGhpcy51cGRhdGVTbGlkZXMoKTt0aGlzLl9jb250YWluU2xpZGVzKCk7dGhpcy5zbGlkZXNXaWR0aD1uP3RoaXMuZ2V0TGFzdFNsaWRlKCkudGFyZ2V0LXRoaXMuc2xpZGVzWzBdLnRhcmdldDowfTt2Ll9zaXplQ2VsbHM9ZnVuY3Rpb24odCl7dC5mb3JFYWNoKGZ1bmN0aW9uKHQpe3QuZ2V0U2l6ZSgpfSl9O3YudXBkYXRlU2xpZGVzPWZ1bmN0aW9uKCl7dGhpcy5zbGlkZXM9W107aWYoIXRoaXMuY2VsbHMubGVuZ3RoKXtyZXR1cm59dmFyIG49bmV3IG8odGhpcyk7dGhpcy5zbGlkZXMucHVzaChuKTt2YXIgdD10aGlzLm9yaWdpblNpZGU9PVwibGVmdFwiO3ZhciBzPXQ/XCJtYXJnaW5SaWdodFwiOlwibWFyZ2luTGVmdFwiO3ZhciByPXRoaXMuX2dldENhbkNlbGxGaXQoKTt0aGlzLmNlbGxzLmZvckVhY2goZnVuY3Rpb24odCxlKXtpZighbi5jZWxscy5sZW5ndGgpe24uYWRkQ2VsbCh0KTtyZXR1cm59dmFyIGk9bi5vdXRlcldpZHRoLW4uZmlyc3RNYXJnaW4rKHQuc2l6ZS5vdXRlcldpZHRoLXQuc2l6ZVtzXSk7aWYoci5jYWxsKHRoaXMsZSxpKSl7bi5hZGRDZWxsKHQpfWVsc2V7bi51cGRhdGVUYXJnZXQoKTtuPW5ldyBvKHRoaXMpO3RoaXMuc2xpZGVzLnB1c2gobik7bi5hZGRDZWxsKHQpfX0sdGhpcyk7bi51cGRhdGVUYXJnZXQoKTt0aGlzLnVwZGF0ZVNlbGVjdGVkU2xpZGUoKX07di5fZ2V0Q2FuQ2VsbEZpdD1mdW5jdGlvbigpe3ZhciB0PXRoaXMub3B0aW9ucy5ncm91cENlbGxzO2lmKCF0KXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gZmFsc2V9fWVsc2UgaWYodHlwZW9mIHQ9PVwibnVtYmVyXCIpe3ZhciBlPXBhcnNlSW50KHQsMTApO3JldHVybiBmdW5jdGlvbih0KXtyZXR1cm4gdCVlIT09MH19dmFyIGk9dHlwZW9mIHQ9PVwic3RyaW5nXCImJnQubWF0Y2goL14oXFxkKyklJC8pO3ZhciBuPWk/cGFyc2VJbnQoaVsxXSwxMCkvMTAwOjE7cmV0dXJuIGZ1bmN0aW9uKHQsZSl7cmV0dXJuIGU8PSh0aGlzLnNpemUuaW5uZXJXaWR0aCsxKSpufX07di5faW5pdD12LnJlcG9zaXRpb249ZnVuY3Rpb24oKXt0aGlzLnBvc2l0aW9uQ2VsbHMoKTt0aGlzLnBvc2l0aW9uU2xpZGVyQXRTZWxlY3RlZCgpfTt2LmdldFNpemU9ZnVuY3Rpb24oKXt0aGlzLnNpemU9aSh0aGlzLmVsZW1lbnQpO3RoaXMuc2V0Q2VsbEFsaWduKCk7dGhpcy5jdXJzb3JQb3NpdGlvbj10aGlzLnNpemUuaW5uZXJXaWR0aCp0aGlzLmNlbGxBbGlnbn07dmFyIGc9e2NlbnRlcjp7bGVmdDouNSxyaWdodDouNX0sbGVmdDp7bGVmdDowLHJpZ2h0OjF9LHJpZ2h0OntyaWdodDowLGxlZnQ6MX19O3Yuc2V0Q2VsbEFsaWduPWZ1bmN0aW9uKCl7dmFyIHQ9Z1t0aGlzLm9wdGlvbnMuY2VsbEFsaWduXTt0aGlzLmNlbGxBbGlnbj10P3RbdGhpcy5vcmlnaW5TaWRlXTp0aGlzLm9wdGlvbnMuY2VsbEFsaWdufTt2LnNldEdhbGxlcnlTaXplPWZ1bmN0aW9uKCl7aWYodGhpcy5vcHRpb25zLnNldEdhbGxlcnlTaXplKXt2YXIgdD10aGlzLm9wdGlvbnMuYWRhcHRpdmVIZWlnaHQmJnRoaXMuc2VsZWN0ZWRTbGlkZT90aGlzLnNlbGVjdGVkU2xpZGUuaGVpZ2h0OnRoaXMubWF4Q2VsbEhlaWdodDt0aGlzLnZpZXdwb3J0LnN0eWxlLmhlaWdodD10K1wicHhcIn19O3YuX2dldFdyYXBTaGlmdENlbGxzPWZ1bmN0aW9uKCl7aWYoIXRoaXMub3B0aW9ucy53cmFwQXJvdW5kKXtyZXR1cm59dGhpcy5fdW5zaGlmdENlbGxzKHRoaXMuYmVmb3JlU2hpZnRDZWxscyk7dGhpcy5fdW5zaGlmdENlbGxzKHRoaXMuYWZ0ZXJTaGlmdENlbGxzKTt2YXIgdD10aGlzLmN1cnNvclBvc2l0aW9uO3ZhciBlPXRoaXMuY2VsbHMubGVuZ3RoLTE7dGhpcy5iZWZvcmVTaGlmdENlbGxzPXRoaXMuX2dldEdhcENlbGxzKHQsZSwtMSk7dD10aGlzLnNpemUuaW5uZXJXaWR0aC10aGlzLmN1cnNvclBvc2l0aW9uO3RoaXMuYWZ0ZXJTaGlmdENlbGxzPXRoaXMuX2dldEdhcENlbGxzKHQsMCwxKX07di5fZ2V0R2FwQ2VsbHM9ZnVuY3Rpb24odCxlLGkpe3ZhciBuPVtdO3doaWxlKHQ+MCl7dmFyIHM9dGhpcy5jZWxsc1tlXTtpZighcyl7YnJlYWt9bi5wdXNoKHMpO2UrPWk7dC09cy5zaXplLm91dGVyV2lkdGh9cmV0dXJuIG59O3YuX2NvbnRhaW5TbGlkZXM9ZnVuY3Rpb24oKXtpZighdGhpcy5vcHRpb25zLmNvbnRhaW58fHRoaXMub3B0aW9ucy53cmFwQXJvdW5kfHwhdGhpcy5jZWxscy5sZW5ndGgpe3JldHVybn12YXIgdD10aGlzLm9wdGlvbnMucmlnaHRUb0xlZnQ7dmFyIGU9dD9cIm1hcmdpblJpZ2h0XCI6XCJtYXJnaW5MZWZ0XCI7dmFyIGk9dD9cIm1hcmdpbkxlZnRcIjpcIm1hcmdpblJpZ2h0XCI7dmFyIG49dGhpcy5zbGlkZWFibGVXaWR0aC10aGlzLmdldExhc3RDZWxsKCkuc2l6ZVtpXTt2YXIgcz1uPHRoaXMuc2l6ZS5pbm5lcldpZHRoO3ZhciByPXRoaXMuY3Vyc29yUG9zaXRpb24rdGhpcy5jZWxsc1swXS5zaXplW2VdO3ZhciBvPW4tdGhpcy5zaXplLmlubmVyV2lkdGgqKDEtdGhpcy5jZWxsQWxpZ24pO3RoaXMuc2xpZGVzLmZvckVhY2goZnVuY3Rpb24odCl7aWYocyl7dC50YXJnZXQ9bip0aGlzLmNlbGxBbGlnbn1lbHNle3QudGFyZ2V0PU1hdGgubWF4KHQudGFyZ2V0LHIpO3QudGFyZ2V0PU1hdGgubWluKHQudGFyZ2V0LG8pfX0sdGhpcyl9O3YuZGlzcGF0Y2hFdmVudD1mdW5jdGlvbih0LGUsaSl7dmFyIG49ZT9bZV0uY29uY2F0KGkpOmk7dGhpcy5lbWl0RXZlbnQodCxuKTtpZihsJiZ0aGlzLiRlbGVtZW50KXt0Kz10aGlzLm9wdGlvbnMubmFtZXNwYWNlSlF1ZXJ5RXZlbnRzP1wiLmZsaWNraXR5XCI6XCJcIjt2YXIgcz10O2lmKGUpe3ZhciByPW5ldyBsLkV2ZW50KGUpO3IudHlwZT10O3M9cn10aGlzLiRlbGVtZW50LnRyaWdnZXIocyxpKX19O3Yuc2VsZWN0PWZ1bmN0aW9uKHQsZSxpKXtpZighdGhpcy5pc0FjdGl2ZSl7cmV0dXJufXQ9cGFyc2VJbnQodCwxMCk7dGhpcy5fd3JhcFNlbGVjdCh0KTtpZih0aGlzLm9wdGlvbnMud3JhcEFyb3VuZHx8ZSl7dD1hLm1vZHVsbyh0LHRoaXMuc2xpZGVzLmxlbmd0aCl9aWYoIXRoaXMuc2xpZGVzW3RdKXtyZXR1cm59dmFyIG49dGhpcy5zZWxlY3RlZEluZGV4O3RoaXMuc2VsZWN0ZWRJbmRleD10O3RoaXMudXBkYXRlU2VsZWN0ZWRTbGlkZSgpO2lmKGkpe3RoaXMucG9zaXRpb25TbGlkZXJBdFNlbGVjdGVkKCl9ZWxzZXt0aGlzLnN0YXJ0QW5pbWF0aW9uKCl9aWYodGhpcy5vcHRpb25zLmFkYXB0aXZlSGVpZ2h0KXt0aGlzLnNldEdhbGxlcnlTaXplKCl9dGhpcy5kaXNwYXRjaEV2ZW50KFwic2VsZWN0XCIsbnVsbCxbdF0pO2lmKHQhPW4pe3RoaXMuZGlzcGF0Y2hFdmVudChcImNoYW5nZVwiLG51bGwsW3RdKX10aGlzLmRpc3BhdGNoRXZlbnQoXCJjZWxsU2VsZWN0XCIpfTt2Ll93cmFwU2VsZWN0PWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuc2xpZGVzLmxlbmd0aDt2YXIgaT10aGlzLm9wdGlvbnMud3JhcEFyb3VuZCYmZT4xO2lmKCFpKXtyZXR1cm4gdH12YXIgbj1hLm1vZHVsbyh0LGUpO3ZhciBzPU1hdGguYWJzKG4tdGhpcy5zZWxlY3RlZEluZGV4KTt2YXIgcj1NYXRoLmFicyhuK2UtdGhpcy5zZWxlY3RlZEluZGV4KTt2YXIgbz1NYXRoLmFicyhuLWUtdGhpcy5zZWxlY3RlZEluZGV4KTtpZighdGhpcy5pc0RyYWdTZWxlY3QmJnI8cyl7dCs9ZX1lbHNlIGlmKCF0aGlzLmlzRHJhZ1NlbGVjdCYmbzxzKXt0LT1lfWlmKHQ8MCl7dGhpcy54LT10aGlzLnNsaWRlYWJsZVdpZHRofWVsc2UgaWYodD49ZSl7dGhpcy54Kz10aGlzLnNsaWRlYWJsZVdpZHRofX07di5wcmV2aW91cz1mdW5jdGlvbih0LGUpe3RoaXMuc2VsZWN0KHRoaXMuc2VsZWN0ZWRJbmRleC0xLHQsZSl9O3YubmV4dD1mdW5jdGlvbih0LGUpe3RoaXMuc2VsZWN0KHRoaXMuc2VsZWN0ZWRJbmRleCsxLHQsZSl9O3YudXBkYXRlU2VsZWN0ZWRTbGlkZT1mdW5jdGlvbigpe3ZhciB0PXRoaXMuc2xpZGVzW3RoaXMuc2VsZWN0ZWRJbmRleF07aWYoIXQpe3JldHVybn10aGlzLnVuc2VsZWN0U2VsZWN0ZWRTbGlkZSgpO3RoaXMuc2VsZWN0ZWRTbGlkZT10O3Quc2VsZWN0KCk7dGhpcy5zZWxlY3RlZENlbGxzPXQuY2VsbHM7dGhpcy5zZWxlY3RlZEVsZW1lbnRzPXQuZ2V0Q2VsbEVsZW1lbnRzKCk7dGhpcy5zZWxlY3RlZENlbGw9dC5jZWxsc1swXTt0aGlzLnNlbGVjdGVkRWxlbWVudD10aGlzLnNlbGVjdGVkRWxlbWVudHNbMF19O3YudW5zZWxlY3RTZWxlY3RlZFNsaWRlPWZ1bmN0aW9uKCl7aWYodGhpcy5zZWxlY3RlZFNsaWRlKXt0aGlzLnNlbGVjdGVkU2xpZGUudW5zZWxlY3QoKX19O3Yuc2VsZWN0SW5pdGlhbEluZGV4PWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5vcHRpb25zLmluaXRpYWxJbmRleDtpZih0aGlzLmlzSW5pdEFjdGl2YXRlZCl7dGhpcy5zZWxlY3QodGhpcy5zZWxlY3RlZEluZGV4LGZhbHNlLHRydWUpO3JldHVybn1pZih0JiZ0eXBlb2YgdD09XCJzdHJpbmdcIil7dmFyIGU9dGhpcy5xdWVyeUNlbGwodCk7aWYoZSl7dGhpcy5zZWxlY3RDZWxsKHQsZmFsc2UsdHJ1ZSk7cmV0dXJufX12YXIgaT0wO2lmKHQmJnRoaXMuc2xpZGVzW3RdKXtpPXR9dGhpcy5zZWxlY3QoaSxmYWxzZSx0cnVlKX07di5zZWxlY3RDZWxsPWZ1bmN0aW9uKHQsZSxpKXt2YXIgbj10aGlzLnF1ZXJ5Q2VsbCh0KTtpZighbil7cmV0dXJufXZhciBzPXRoaXMuZ2V0Q2VsbFNsaWRlSW5kZXgobik7dGhpcy5zZWxlY3QocyxlLGkpfTt2LmdldENlbGxTbGlkZUluZGV4PWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT0wO2U8dGhpcy5zbGlkZXMubGVuZ3RoO2UrKyl7dmFyIGk9dGhpcy5zbGlkZXNbZV07dmFyIG49aS5jZWxscy5pbmRleE9mKHQpO2lmKG4hPS0xKXtyZXR1cm4gZX19fTt2LmdldENlbGw9ZnVuY3Rpb24odCl7Zm9yKHZhciBlPTA7ZTx0aGlzLmNlbGxzLmxlbmd0aDtlKyspe3ZhciBpPXRoaXMuY2VsbHNbZV07aWYoaS5lbGVtZW50PT10KXtyZXR1cm4gaX19fTt2LmdldENlbGxzPWZ1bmN0aW9uKHQpe3Q9YS5tYWtlQXJyYXkodCk7dmFyIGk9W107dC5mb3JFYWNoKGZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuZ2V0Q2VsbCh0KTtpZihlKXtpLnB1c2goZSl9fSx0aGlzKTtyZXR1cm4gaX07di5nZXRDZWxsRWxlbWVudHM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jZWxscy5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIHQuZWxlbWVudH0pfTt2LmdldFBhcmVudENlbGw9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5nZXRDZWxsKHQpO2lmKGUpe3JldHVybiBlfXQ9YS5nZXRQYXJlbnQodCxcIi5mbGlja2l0eS1zbGlkZXIgPiAqXCIpO3JldHVybiB0aGlzLmdldENlbGwodCl9O3YuZ2V0QWRqYWNlbnRDZWxsRWxlbWVudHM9ZnVuY3Rpb24odCxlKXtpZighdCl7cmV0dXJuIHRoaXMuc2VsZWN0ZWRTbGlkZS5nZXRDZWxsRWxlbWVudHMoKX1lPWU9PT11bmRlZmluZWQ/dGhpcy5zZWxlY3RlZEluZGV4OmU7dmFyIGk9dGhpcy5zbGlkZXMubGVuZ3RoO2lmKDErdCoyPj1pKXtyZXR1cm4gdGhpcy5nZXRDZWxsRWxlbWVudHMoKX12YXIgbj1bXTtmb3IodmFyIHM9ZS10O3M8PWUrdDtzKyspe3ZhciByPXRoaXMub3B0aW9ucy53cmFwQXJvdW5kP2EubW9kdWxvKHMsaSk6czt2YXIgbz10aGlzLnNsaWRlc1tyXTtpZihvKXtuPW4uY29uY2F0KG8uZ2V0Q2VsbEVsZW1lbnRzKCkpfX1yZXR1cm4gbn07di5xdWVyeUNlbGw9ZnVuY3Rpb24odCl7aWYodHlwZW9mIHQ9PVwibnVtYmVyXCIpe3JldHVybiB0aGlzLmNlbGxzW3RdfWlmKHR5cGVvZiB0PT1cInN0cmluZ1wiKXtpZih0Lm1hdGNoKC9eWyMuXT9bXFxkL10vKSl7cmV0dXJufXQ9dGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IodCl9cmV0dXJuIHRoaXMuZ2V0Q2VsbCh0KX07di51aUNoYW5nZT1mdW5jdGlvbigpe3RoaXMuZW1pdEV2ZW50KFwidWlDaGFuZ2VcIil9O3YuY2hpbGRVSVBvaW50ZXJEb3duPWZ1bmN0aW9uKHQpe2lmKHQudHlwZSE9XCJ0b3VjaHN0YXJ0XCIpe3QucHJldmVudERlZmF1bHQoKX10aGlzLmZvY3VzKCl9O3Yub25yZXNpemU9ZnVuY3Rpb24oKXt0aGlzLndhdGNoQ1NTKCk7dGhpcy5yZXNpemUoKX07YS5kZWJvdW5jZU1ldGhvZChwLFwib25yZXNpemVcIiwxNTApO3YucmVzaXplPWZ1bmN0aW9uKCl7aWYoIXRoaXMuaXNBY3RpdmV8fHRoaXMuaXNBbmltYXRpbmd8fHRoaXMuaXNEcmFnZ2luZyl7cmV0dXJufXRoaXMuZ2V0U2l6ZSgpO2lmKHRoaXMub3B0aW9ucy53cmFwQXJvdW5kKXt0aGlzLng9YS5tb2R1bG8odGhpcy54LHRoaXMuc2xpZGVhYmxlV2lkdGgpfXRoaXMucG9zaXRpb25DZWxscygpO3RoaXMuX2dldFdyYXBTaGlmdENlbGxzKCk7dGhpcy5zZXRHYWxsZXJ5U2l6ZSgpO3RoaXMuZW1pdEV2ZW50KFwicmVzaXplXCIpO3ZhciB0PXRoaXMuc2VsZWN0ZWRFbGVtZW50cyYmdGhpcy5zZWxlY3RlZEVsZW1lbnRzWzBdO3RoaXMuc2VsZWN0Q2VsbCh0LGZhbHNlLHRydWUpfTt2LndhdGNoQ1NTPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5vcHRpb25zLndhdGNoQ1NTO2lmKCF0KXtyZXR1cm59dmFyIGU9aCh0aGlzLmVsZW1lbnQsXCI6YWZ0ZXJcIikuY29udGVudDtpZihlLmluZGV4T2YoXCJmbGlja2l0eVwiKSE9LTEpe3RoaXMuYWN0aXZhdGUoKX1lbHNle3RoaXMuZGVhY3RpdmF0ZSgpfX07di5vbmtleWRvd249ZnVuY3Rpb24odCl7dmFyIGU9ZG9jdW1lbnQuYWN0aXZlRWxlbWVudCYmZG9jdW1lbnQuYWN0aXZlRWxlbWVudCE9dGhpcy5lbGVtZW50O2lmKCF0aGlzLm9wdGlvbnMuYWNjZXNzaWJpbGl0eXx8ZSl7cmV0dXJufXZhciBpPXAua2V5Ym9hcmRIYW5kbGVyc1t0LmtleUNvZGVdO2lmKGkpe2kuY2FsbCh0aGlzKX19O3Aua2V5Ym9hcmRIYW5kbGVycz17Mzc6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLm9wdGlvbnMucmlnaHRUb0xlZnQ/XCJuZXh0XCI6XCJwcmV2aW91c1wiO3RoaXMudWlDaGFuZ2UoKTt0aGlzW3RdKCl9LDM5OmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5vcHRpb25zLnJpZ2h0VG9MZWZ0P1wicHJldmlvdXNcIjpcIm5leHRcIjt0aGlzLnVpQ2hhbmdlKCk7dGhpc1t0XSgpfX07di5mb2N1cz1mdW5jdGlvbigpe3ZhciB0PW4ucGFnZVlPZmZzZXQ7dGhpcy5lbGVtZW50LmZvY3VzKHtwcmV2ZW50U2Nyb2xsOnRydWV9KTtpZihuLnBhZ2VZT2Zmc2V0IT10KXtuLnNjcm9sbFRvKG4ucGFnZVhPZmZzZXQsdCl9fTt2LmRlYWN0aXZhdGU9ZnVuY3Rpb24oKXtpZighdGhpcy5pc0FjdGl2ZSl7cmV0dXJufXRoaXMuZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwiZmxpY2tpdHktZW5hYmxlZFwiKTt0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcImZsaWNraXR5LXJ0bFwiKTt0aGlzLnVuc2VsZWN0U2VsZWN0ZWRTbGlkZSgpO3RoaXMuY2VsbHMuZm9yRWFjaChmdW5jdGlvbih0KXt0LmRlc3Ryb3koKX0pO3RoaXMuZWxlbWVudC5yZW1vdmVDaGlsZCh0aGlzLnZpZXdwb3J0KTt1KHRoaXMuc2xpZGVyLmNoaWxkcmVuLHRoaXMuZWxlbWVudCk7aWYodGhpcy5vcHRpb25zLmFjY2Vzc2liaWxpdHkpe3RoaXMuZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoXCJ0YWJJbmRleFwiKTt0aGlzLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIix0aGlzKX10aGlzLmlzQWN0aXZlPWZhbHNlO3RoaXMuZW1pdEV2ZW50KFwiZGVhY3RpdmF0ZVwiKX07di5kZXN0cm95PWZ1bmN0aW9uKCl7dGhpcy5kZWFjdGl2YXRlKCk7bi5yZW1vdmVFdmVudExpc3RlbmVyKFwicmVzaXplXCIsdGhpcyk7dGhpcy5hbGxPZmYoKTt0aGlzLmVtaXRFdmVudChcImRlc3Ryb3lcIik7aWYobCYmdGhpcy4kZWxlbWVudCl7bC5yZW1vdmVEYXRhKHRoaXMuZWxlbWVudCxcImZsaWNraXR5XCIpfWRlbGV0ZSB0aGlzLmVsZW1lbnQuZmxpY2tpdHlHVUlEO2RlbGV0ZSBmW3RoaXMuZ3VpZF19O2EuZXh0ZW5kKHYscik7cC5kYXRhPWZ1bmN0aW9uKHQpe3Q9YS5nZXRRdWVyeUVsZW1lbnQodCk7dmFyIGU9dCYmdC5mbGlja2l0eUdVSUQ7cmV0dXJuIGUmJmZbZV19O2EuaHRtbEluaXQocCxcImZsaWNraXR5XCIpO2lmKGwmJmwuYnJpZGdldCl7bC5icmlkZ2V0KFwiZmxpY2tpdHlcIixwKX1wLnNldEpRdWVyeT1mdW5jdGlvbih0KXtsPXR9O3AuQ2VsbD1zO3AuU2xpZGU9bztyZXR1cm4gcH0pO1xuLyohXG4gKiBVbmlwb2ludGVyIHYyLjQuMFxuICogYmFzZSBjbGFzcyBmb3IgZG9pbmcgb25lIHRoaW5nIHdpdGggcG9pbnRlciBldmVudFxuICogTUlUIGxpY2Vuc2VcbiAqL1xuKGZ1bmN0aW9uKGUsaSl7aWYodHlwZW9mIGRlZmluZT09XCJmdW5jdGlvblwiJiZkZWZpbmUuYW1kKXtkZWZpbmUoXCJ1bmlwb2ludGVyL3VuaXBvaW50ZXJcIixbXCJldi1lbWl0dGVyL2V2LWVtaXR0ZXJcIl0sZnVuY3Rpb24odCl7cmV0dXJuIGkoZSx0KX0pfWVsc2UgaWYodHlwZW9mIG1vZHVsZT09XCJvYmplY3RcIiYmbW9kdWxlLmV4cG9ydHMpe21vZHVsZS5leHBvcnRzPWkoZSxyZXF1aXJlKFwiZXYtZW1pdHRlclwiKSl9ZWxzZXtlLlVuaXBvaW50ZXI9aShlLGUuRXZFbWl0dGVyKX19KSh3aW5kb3csZnVuY3Rpb24gdChzLGUpe2Z1bmN0aW9uIGkoKXt9ZnVuY3Rpb24gbigpe312YXIgcj1uLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGUucHJvdG90eXBlKTtyLmJpbmRTdGFydEV2ZW50PWZ1bmN0aW9uKHQpe3RoaXMuX2JpbmRTdGFydEV2ZW50KHQsdHJ1ZSl9O3IudW5iaW5kU3RhcnRFdmVudD1mdW5jdGlvbih0KXt0aGlzLl9iaW5kU3RhcnRFdmVudCh0LGZhbHNlKX07ci5fYmluZFN0YXJ0RXZlbnQ9ZnVuY3Rpb24odCxlKXtlPWU9PT11bmRlZmluZWQ/dHJ1ZTplO3ZhciBpPWU/XCJhZGRFdmVudExpc3RlbmVyXCI6XCJyZW1vdmVFdmVudExpc3RlbmVyXCI7dmFyIG49XCJtb3VzZWRvd25cIjtpZihcIm9udG91Y2hzdGFydFwiaW4gcyl7bj1cInRvdWNoc3RhcnRcIn1lbHNlIGlmKHMuUG9pbnRlckV2ZW50KXtuPVwicG9pbnRlcmRvd25cIn10W2ldKG4sdGhpcyl9O3IuaGFuZGxlRXZlbnQ9ZnVuY3Rpb24odCl7dmFyIGU9XCJvblwiK3QudHlwZTtpZih0aGlzW2VdKXt0aGlzW2VdKHQpfX07ci5nZXRUb3VjaD1mdW5jdGlvbih0KXtmb3IodmFyIGU9MDtlPHQubGVuZ3RoO2UrKyl7dmFyIGk9dFtlXTtpZihpLmlkZW50aWZpZXI9PXRoaXMucG9pbnRlcklkZW50aWZpZXIpe3JldHVybiBpfX19O3Iub25tb3VzZWRvd249ZnVuY3Rpb24odCl7dmFyIGU9dC5idXR0b247aWYoZSYmKGUhPT0wJiZlIT09MSkpe3JldHVybn10aGlzLl9wb2ludGVyRG93bih0LHQpfTtyLm9udG91Y2hzdGFydD1mdW5jdGlvbih0KXt0aGlzLl9wb2ludGVyRG93bih0LHQuY2hhbmdlZFRvdWNoZXNbMF0pfTtyLm9ucG9pbnRlcmRvd249ZnVuY3Rpb24odCl7dGhpcy5fcG9pbnRlckRvd24odCx0KX07ci5fcG9pbnRlckRvd249ZnVuY3Rpb24odCxlKXtpZih0LmJ1dHRvbnx8dGhpcy5pc1BvaW50ZXJEb3duKXtyZXR1cm59dGhpcy5pc1BvaW50ZXJEb3duPXRydWU7dGhpcy5wb2ludGVySWRlbnRpZmllcj1lLnBvaW50ZXJJZCE9PXVuZGVmaW5lZD9lLnBvaW50ZXJJZDplLmlkZW50aWZpZXI7dGhpcy5wb2ludGVyRG93bih0LGUpfTtyLnBvaW50ZXJEb3duPWZ1bmN0aW9uKHQsZSl7dGhpcy5fYmluZFBvc3RTdGFydEV2ZW50cyh0KTt0aGlzLmVtaXRFdmVudChcInBvaW50ZXJEb3duXCIsW3QsZV0pfTt2YXIgbz17bW91c2Vkb3duOltcIm1vdXNlbW92ZVwiLFwibW91c2V1cFwiXSx0b3VjaHN0YXJ0OltcInRvdWNobW92ZVwiLFwidG91Y2hlbmRcIixcInRvdWNoY2FuY2VsXCJdLHBvaW50ZXJkb3duOltcInBvaW50ZXJtb3ZlXCIsXCJwb2ludGVydXBcIixcInBvaW50ZXJjYW5jZWxcIl19O3IuX2JpbmRQb3N0U3RhcnRFdmVudHM9ZnVuY3Rpb24odCl7aWYoIXQpe3JldHVybn12YXIgZT1vW3QudHlwZV07ZS5mb3JFYWNoKGZ1bmN0aW9uKHQpe3MuYWRkRXZlbnRMaXN0ZW5lcih0LHRoaXMpfSx0aGlzKTt0aGlzLl9ib3VuZFBvaW50ZXJFdmVudHM9ZX07ci5fdW5iaW5kUG9zdFN0YXJ0RXZlbnRzPWZ1bmN0aW9uKCl7aWYoIXRoaXMuX2JvdW5kUG9pbnRlckV2ZW50cyl7cmV0dXJufXRoaXMuX2JvdW5kUG9pbnRlckV2ZW50cy5mb3JFYWNoKGZ1bmN0aW9uKHQpe3MucmVtb3ZlRXZlbnRMaXN0ZW5lcih0LHRoaXMpfSx0aGlzKTtkZWxldGUgdGhpcy5fYm91bmRQb2ludGVyRXZlbnRzfTtyLm9ubW91c2Vtb3ZlPWZ1bmN0aW9uKHQpe3RoaXMuX3BvaW50ZXJNb3ZlKHQsdCl9O3Iub25wb2ludGVybW92ZT1mdW5jdGlvbih0KXtpZih0LnBvaW50ZXJJZD09dGhpcy5wb2ludGVySWRlbnRpZmllcil7dGhpcy5fcG9pbnRlck1vdmUodCx0KX19O3Iub250b3VjaG1vdmU9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5nZXRUb3VjaCh0LmNoYW5nZWRUb3VjaGVzKTtpZihlKXt0aGlzLl9wb2ludGVyTW92ZSh0LGUpfX07ci5fcG9pbnRlck1vdmU9ZnVuY3Rpb24odCxlKXt0aGlzLnBvaW50ZXJNb3ZlKHQsZSl9O3IucG9pbnRlck1vdmU9ZnVuY3Rpb24odCxlKXt0aGlzLmVtaXRFdmVudChcInBvaW50ZXJNb3ZlXCIsW3QsZV0pfTtyLm9ubW91c2V1cD1mdW5jdGlvbih0KXt0aGlzLl9wb2ludGVyVXAodCx0KX07ci5vbnBvaW50ZXJ1cD1mdW5jdGlvbih0KXtpZih0LnBvaW50ZXJJZD09dGhpcy5wb2ludGVySWRlbnRpZmllcil7dGhpcy5fcG9pbnRlclVwKHQsdCl9fTtyLm9udG91Y2hlbmQ9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5nZXRUb3VjaCh0LmNoYW5nZWRUb3VjaGVzKTtpZihlKXt0aGlzLl9wb2ludGVyVXAodCxlKX19O3IuX3BvaW50ZXJVcD1mdW5jdGlvbih0LGUpe3RoaXMuX3BvaW50ZXJEb25lKCk7dGhpcy5wb2ludGVyVXAodCxlKX07ci5wb2ludGVyVXA9ZnVuY3Rpb24odCxlKXt0aGlzLmVtaXRFdmVudChcInBvaW50ZXJVcFwiLFt0LGVdKX07ci5fcG9pbnRlckRvbmU9ZnVuY3Rpb24oKXt0aGlzLl9wb2ludGVyUmVzZXQoKTt0aGlzLl91bmJpbmRQb3N0U3RhcnRFdmVudHMoKTt0aGlzLnBvaW50ZXJEb25lKCl9O3IuX3BvaW50ZXJSZXNldD1mdW5jdGlvbigpe3RoaXMuaXNQb2ludGVyRG93bj1mYWxzZTtkZWxldGUgdGhpcy5wb2ludGVySWRlbnRpZmllcn07ci5wb2ludGVyRG9uZT1pO3Iub25wb2ludGVyY2FuY2VsPWZ1bmN0aW9uKHQpe2lmKHQucG9pbnRlcklkPT10aGlzLnBvaW50ZXJJZGVudGlmaWVyKXt0aGlzLl9wb2ludGVyQ2FuY2VsKHQsdCl9fTtyLm9udG91Y2hjYW5jZWw9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5nZXRUb3VjaCh0LmNoYW5nZWRUb3VjaGVzKTtpZihlKXt0aGlzLl9wb2ludGVyQ2FuY2VsKHQsZSl9fTtyLl9wb2ludGVyQ2FuY2VsPWZ1bmN0aW9uKHQsZSl7dGhpcy5fcG9pbnRlckRvbmUoKTt0aGlzLnBvaW50ZXJDYW5jZWwodCxlKX07ci5wb2ludGVyQ2FuY2VsPWZ1bmN0aW9uKHQsZSl7dGhpcy5lbWl0RXZlbnQoXCJwb2ludGVyQ2FuY2VsXCIsW3QsZV0pfTtuLmdldFBvaW50ZXJQb2ludD1mdW5jdGlvbih0KXtyZXR1cm57eDp0LnBhZ2VYLHk6dC5wYWdlWX19O3JldHVybiBufSk7XG4vKiFcbiAqIFVuaWRyYWdnZXIgdjIuNC4wXG4gKiBEcmFnZ2FibGUgYmFzZSBjbGFzc1xuICogTUlUIGxpY2Vuc2VcbiAqL1xuKGZ1bmN0aW9uKGUsaSl7aWYodHlwZW9mIGRlZmluZT09XCJmdW5jdGlvblwiJiZkZWZpbmUuYW1kKXtkZWZpbmUoXCJ1bmlkcmFnZ2VyL3VuaWRyYWdnZXJcIixbXCJ1bmlwb2ludGVyL3VuaXBvaW50ZXJcIl0sZnVuY3Rpb24odCl7cmV0dXJuIGkoZSx0KX0pfWVsc2UgaWYodHlwZW9mIG1vZHVsZT09XCJvYmplY3RcIiYmbW9kdWxlLmV4cG9ydHMpe21vZHVsZS5leHBvcnRzPWkoZSxyZXF1aXJlKFwidW5pcG9pbnRlclwiKSl9ZWxzZXtlLlVuaWRyYWdnZXI9aShlLGUuVW5pcG9pbnRlcil9fSkod2luZG93LGZ1bmN0aW9uIHQocixlKXtmdW5jdGlvbiBpKCl7fXZhciBuPWkucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoZS5wcm90b3R5cGUpO24uYmluZEhhbmRsZXM9ZnVuY3Rpb24oKXt0aGlzLl9iaW5kSGFuZGxlcyh0cnVlKX07bi51bmJpbmRIYW5kbGVzPWZ1bmN0aW9uKCl7dGhpcy5fYmluZEhhbmRsZXMoZmFsc2UpfTtuLl9iaW5kSGFuZGxlcz1mdW5jdGlvbih0KXt0PXQ9PT11bmRlZmluZWQ/dHJ1ZTp0O3ZhciBlPXQ/XCJhZGRFdmVudExpc3RlbmVyXCI6XCJyZW1vdmVFdmVudExpc3RlbmVyXCI7dmFyIGk9dD90aGlzLl90b3VjaEFjdGlvblZhbHVlOlwiXCI7Zm9yKHZhciBuPTA7bjx0aGlzLmhhbmRsZXMubGVuZ3RoO24rKyl7dmFyIHM9dGhpcy5oYW5kbGVzW25dO3RoaXMuX2JpbmRTdGFydEV2ZW50KHMsdCk7c1tlXShcImNsaWNrXCIsdGhpcyk7aWYoci5Qb2ludGVyRXZlbnQpe3Muc3R5bGUudG91Y2hBY3Rpb249aX19fTtuLl90b3VjaEFjdGlvblZhbHVlPVwibm9uZVwiO24ucG9pbnRlckRvd249ZnVuY3Rpb24odCxlKXt2YXIgaT10aGlzLm9rYXlQb2ludGVyRG93bih0KTtpZighaSl7cmV0dXJufXRoaXMucG9pbnRlckRvd25Qb2ludGVyPXtwYWdlWDplLnBhZ2VYLHBhZ2VZOmUucGFnZVl9O3QucHJldmVudERlZmF1bHQoKTt0aGlzLnBvaW50ZXJEb3duQmx1cigpO3RoaXMuX2JpbmRQb3N0U3RhcnRFdmVudHModCk7dGhpcy5lbWl0RXZlbnQoXCJwb2ludGVyRG93blwiLFt0LGVdKX07dmFyIHM9e1RFWFRBUkVBOnRydWUsSU5QVVQ6dHJ1ZSxTRUxFQ1Q6dHJ1ZSxPUFRJT046dHJ1ZX07dmFyIG89e3JhZGlvOnRydWUsY2hlY2tib3g6dHJ1ZSxidXR0b246dHJ1ZSxzdWJtaXQ6dHJ1ZSxpbWFnZTp0cnVlLGZpbGU6dHJ1ZX07bi5va2F5UG9pbnRlckRvd249ZnVuY3Rpb24odCl7dmFyIGU9c1t0LnRhcmdldC5ub2RlTmFtZV07dmFyIGk9b1t0LnRhcmdldC50eXBlXTt2YXIgbj0hZXx8aTtpZighbil7dGhpcy5fcG9pbnRlclJlc2V0KCl9cmV0dXJuIG59O24ucG9pbnRlckRvd25CbHVyPWZ1bmN0aW9uKCl7dmFyIHQ9ZG9jdW1lbnQuYWN0aXZlRWxlbWVudDt2YXIgZT10JiZ0LmJsdXImJnQhPWRvY3VtZW50LmJvZHk7aWYoZSl7dC5ibHVyKCl9fTtuLnBvaW50ZXJNb3ZlPWZ1bmN0aW9uKHQsZSl7dmFyIGk9dGhpcy5fZHJhZ1BvaW50ZXJNb3ZlKHQsZSk7dGhpcy5lbWl0RXZlbnQoXCJwb2ludGVyTW92ZVwiLFt0LGUsaV0pO3RoaXMuX2RyYWdNb3ZlKHQsZSxpKX07bi5fZHJhZ1BvaW50ZXJNb3ZlPWZ1bmN0aW9uKHQsZSl7dmFyIGk9e3g6ZS5wYWdlWC10aGlzLnBvaW50ZXJEb3duUG9pbnRlci5wYWdlWCx5OmUucGFnZVktdGhpcy5wb2ludGVyRG93blBvaW50ZXIucGFnZVl9O2lmKCF0aGlzLmlzRHJhZ2dpbmcmJnRoaXMuaGFzRHJhZ1N0YXJ0ZWQoaSkpe3RoaXMuX2RyYWdTdGFydCh0LGUpfXJldHVybiBpfTtuLmhhc0RyYWdTdGFydGVkPWZ1bmN0aW9uKHQpe3JldHVybiBNYXRoLmFicyh0LngpPjN8fE1hdGguYWJzKHQueSk+M307bi5wb2ludGVyVXA9ZnVuY3Rpb24odCxlKXt0aGlzLmVtaXRFdmVudChcInBvaW50ZXJVcFwiLFt0LGVdKTt0aGlzLl9kcmFnUG9pbnRlclVwKHQsZSl9O24uX2RyYWdQb2ludGVyVXA9ZnVuY3Rpb24odCxlKXtpZih0aGlzLmlzRHJhZ2dpbmcpe3RoaXMuX2RyYWdFbmQodCxlKX1lbHNle3RoaXMuX3N0YXRpY0NsaWNrKHQsZSl9fTtuLl9kcmFnU3RhcnQ9ZnVuY3Rpb24odCxlKXt0aGlzLmlzRHJhZ2dpbmc9dHJ1ZTt0aGlzLmlzUHJldmVudGluZ0NsaWNrcz10cnVlO3RoaXMuZHJhZ1N0YXJ0KHQsZSl9O24uZHJhZ1N0YXJ0PWZ1bmN0aW9uKHQsZSl7dGhpcy5lbWl0RXZlbnQoXCJkcmFnU3RhcnRcIixbdCxlXSl9O24uX2RyYWdNb3ZlPWZ1bmN0aW9uKHQsZSxpKXtpZighdGhpcy5pc0RyYWdnaW5nKXtyZXR1cm59dGhpcy5kcmFnTW92ZSh0LGUsaSl9O24uZHJhZ01vdmU9ZnVuY3Rpb24odCxlLGkpe3QucHJldmVudERlZmF1bHQoKTt0aGlzLmVtaXRFdmVudChcImRyYWdNb3ZlXCIsW3QsZSxpXSl9O24uX2RyYWdFbmQ9ZnVuY3Rpb24odCxlKXt0aGlzLmlzRHJhZ2dpbmc9ZmFsc2U7c2V0VGltZW91dChmdW5jdGlvbigpe2RlbGV0ZSB0aGlzLmlzUHJldmVudGluZ0NsaWNrc30uYmluZCh0aGlzKSk7dGhpcy5kcmFnRW5kKHQsZSl9O24uZHJhZ0VuZD1mdW5jdGlvbih0LGUpe3RoaXMuZW1pdEV2ZW50KFwiZHJhZ0VuZFwiLFt0LGVdKX07bi5vbmNsaWNrPWZ1bmN0aW9uKHQpe2lmKHRoaXMuaXNQcmV2ZW50aW5nQ2xpY2tzKXt0LnByZXZlbnREZWZhdWx0KCl9fTtuLl9zdGF0aWNDbGljaz1mdW5jdGlvbih0LGUpe2lmKHRoaXMuaXNJZ25vcmluZ01vdXNlVXAmJnQudHlwZT09XCJtb3VzZXVwXCIpe3JldHVybn10aGlzLnN0YXRpY0NsaWNrKHQsZSk7aWYodC50eXBlIT1cIm1vdXNldXBcIil7dGhpcy5pc0lnbm9yaW5nTW91c2VVcD10cnVlO3NldFRpbWVvdXQoZnVuY3Rpb24oKXtkZWxldGUgdGhpcy5pc0lnbm9yaW5nTW91c2VVcH0uYmluZCh0aGlzKSw0MDApfX07bi5zdGF0aWNDbGljaz1mdW5jdGlvbih0LGUpe3RoaXMuZW1pdEV2ZW50KFwic3RhdGljQ2xpY2tcIixbdCxlXSl9O2kuZ2V0UG9pbnRlclBvaW50PWUuZ2V0UG9pbnRlclBvaW50O3JldHVybiBpfSk7KGZ1bmN0aW9uKG4scyl7aWYodHlwZW9mIGRlZmluZT09XCJmdW5jdGlvblwiJiZkZWZpbmUuYW1kKXtkZWZpbmUoXCJmbGlja2l0eS9qcy9kcmFnXCIsW1wiLi9mbGlja2l0eVwiLFwidW5pZHJhZ2dlci91bmlkcmFnZ2VyXCIsXCJmaXp6eS11aS11dGlscy91dGlsc1wiXSxmdW5jdGlvbih0LGUsaSl7cmV0dXJuIHMobix0LGUsaSl9KX1lbHNlIGlmKHR5cGVvZiBtb2R1bGU9PVwib2JqZWN0XCImJm1vZHVsZS5leHBvcnRzKXttb2R1bGUuZXhwb3J0cz1zKG4scmVxdWlyZShcIi4vZmxpY2tpdHlcIikscmVxdWlyZShcInVuaWRyYWdnZXJcIikscmVxdWlyZShcImZpenp5LXVpLXV0aWxzXCIpKX1lbHNle24uRmxpY2tpdHk9cyhuLG4uRmxpY2tpdHksbi5VbmlkcmFnZ2VyLG4uZml6enlVSVV0aWxzKX19KSh3aW5kb3csZnVuY3Rpb24gdChuLGUsaSxhKXthLmV4dGVuZChlLmRlZmF1bHRzLHtkcmFnZ2FibGU6XCI+MVwiLGRyYWdUaHJlc2hvbGQ6M30pO2UuY3JlYXRlTWV0aG9kcy5wdXNoKFwiX2NyZWF0ZURyYWdcIik7dmFyIHM9ZS5wcm90b3R5cGU7YS5leHRlbmQocyxpLnByb3RvdHlwZSk7cy5fdG91Y2hBY3Rpb25WYWx1ZT1cInBhbi15XCI7cy5fY3JlYXRlRHJhZz1mdW5jdGlvbigpe3RoaXMub24oXCJhY3RpdmF0ZVwiLHRoaXMub25BY3RpdmF0ZURyYWcpO3RoaXMub24oXCJ1aUNoYW5nZVwiLHRoaXMuX3VpQ2hhbmdlRHJhZyk7dGhpcy5vbihcImRlYWN0aXZhdGVcIix0aGlzLm9uRGVhY3RpdmF0ZURyYWcpO3RoaXMub24oXCJjZWxsQ2hhbmdlXCIsdGhpcy51cGRhdGVEcmFnZ2FibGUpfTtzLm9uQWN0aXZhdGVEcmFnPWZ1bmN0aW9uKCl7dGhpcy5oYW5kbGVzPVt0aGlzLnZpZXdwb3J0XTt0aGlzLmJpbmRIYW5kbGVzKCk7dGhpcy51cGRhdGVEcmFnZ2FibGUoKX07cy5vbkRlYWN0aXZhdGVEcmFnPWZ1bmN0aW9uKCl7dGhpcy51bmJpbmRIYW5kbGVzKCk7dGhpcy5lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJpcy1kcmFnZ2FibGVcIil9O3MudXBkYXRlRHJhZ2dhYmxlPWZ1bmN0aW9uKCl7aWYodGhpcy5vcHRpb25zLmRyYWdnYWJsZT09XCI+MVwiKXt0aGlzLmlzRHJhZ2dhYmxlPXRoaXMuc2xpZGVzLmxlbmd0aD4xfWVsc2V7dGhpcy5pc0RyYWdnYWJsZT10aGlzLm9wdGlvbnMuZHJhZ2dhYmxlfWlmKHRoaXMuaXNEcmFnZ2FibGUpe3RoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiaXMtZHJhZ2dhYmxlXCIpfWVsc2V7dGhpcy5lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJpcy1kcmFnZ2FibGVcIil9fTtzLmJpbmREcmFnPWZ1bmN0aW9uKCl7dGhpcy5vcHRpb25zLmRyYWdnYWJsZT10cnVlO3RoaXMudXBkYXRlRHJhZ2dhYmxlKCl9O3MudW5iaW5kRHJhZz1mdW5jdGlvbigpe3RoaXMub3B0aW9ucy5kcmFnZ2FibGU9ZmFsc2U7dGhpcy51cGRhdGVEcmFnZ2FibGUoKX07cy5fdWlDaGFuZ2VEcmFnPWZ1bmN0aW9uKCl7ZGVsZXRlIHRoaXMuaXNGcmVlU2Nyb2xsaW5nfTtzLnBvaW50ZXJEb3duPWZ1bmN0aW9uKHQsZSl7aWYoIXRoaXMuaXNEcmFnZ2FibGUpe3RoaXMuX3BvaW50ZXJEb3duRGVmYXVsdCh0LGUpO3JldHVybn12YXIgaT10aGlzLm9rYXlQb2ludGVyRG93bih0KTtpZighaSl7cmV0dXJufXRoaXMuX3BvaW50ZXJEb3duUHJldmVudERlZmF1bHQodCk7dGhpcy5wb2ludGVyRG93bkZvY3VzKHQpO2lmKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQhPXRoaXMuZWxlbWVudCl7dGhpcy5wb2ludGVyRG93bkJsdXIoKX10aGlzLmRyYWdYPXRoaXMueDt0aGlzLnZpZXdwb3J0LmNsYXNzTGlzdC5hZGQoXCJpcy1wb2ludGVyLWRvd25cIik7dGhpcy5wb2ludGVyRG93blNjcm9sbD1vKCk7bi5hZGRFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsdGhpcyk7dGhpcy5fcG9pbnRlckRvd25EZWZhdWx0KHQsZSl9O3MuX3BvaW50ZXJEb3duRGVmYXVsdD1mdW5jdGlvbih0LGUpe3RoaXMucG9pbnRlckRvd25Qb2ludGVyPXtwYWdlWDplLnBhZ2VYLHBhZ2VZOmUucGFnZVl9O3RoaXMuX2JpbmRQb3N0U3RhcnRFdmVudHModCk7dGhpcy5kaXNwYXRjaEV2ZW50KFwicG9pbnRlckRvd25cIix0LFtlXSl9O3ZhciByPXtJTlBVVDp0cnVlLFRFWFRBUkVBOnRydWUsU0VMRUNUOnRydWV9O3MucG9pbnRlckRvd25Gb2N1cz1mdW5jdGlvbih0KXt2YXIgZT1yW3QudGFyZ2V0Lm5vZGVOYW1lXTtpZighZSl7dGhpcy5mb2N1cygpfX07cy5fcG9pbnRlckRvd25QcmV2ZW50RGVmYXVsdD1mdW5jdGlvbih0KXt2YXIgZT10LnR5cGU9PVwidG91Y2hzdGFydFwiO3ZhciBpPXQucG9pbnRlclR5cGU9PVwidG91Y2hcIjt2YXIgbj1yW3QudGFyZ2V0Lm5vZGVOYW1lXTtpZighZSYmIWkmJiFuKXt0LnByZXZlbnREZWZhdWx0KCl9fTtzLmhhc0RyYWdTdGFydGVkPWZ1bmN0aW9uKHQpe3JldHVybiBNYXRoLmFicyh0LngpPnRoaXMub3B0aW9ucy5kcmFnVGhyZXNob2xkfTtzLnBvaW50ZXJVcD1mdW5jdGlvbih0LGUpe2RlbGV0ZSB0aGlzLmlzVG91Y2hTY3JvbGxpbmc7dGhpcy52aWV3cG9ydC5jbGFzc0xpc3QucmVtb3ZlKFwiaXMtcG9pbnRlci1kb3duXCIpO3RoaXMuZGlzcGF0Y2hFdmVudChcInBvaW50ZXJVcFwiLHQsW2VdKTt0aGlzLl9kcmFnUG9pbnRlclVwKHQsZSl9O3MucG9pbnRlckRvbmU9ZnVuY3Rpb24oKXtuLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJzY3JvbGxcIix0aGlzKTtkZWxldGUgdGhpcy5wb2ludGVyRG93blNjcm9sbH07cy5kcmFnU3RhcnQ9ZnVuY3Rpb24odCxlKXtpZighdGhpcy5pc0RyYWdnYWJsZSl7cmV0dXJufXRoaXMuZHJhZ1N0YXJ0UG9zaXRpb249dGhpcy54O3RoaXMuc3RhcnRBbmltYXRpb24oKTtuLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJzY3JvbGxcIix0aGlzKTt0aGlzLmRpc3BhdGNoRXZlbnQoXCJkcmFnU3RhcnRcIix0LFtlXSl9O3MucG9pbnRlck1vdmU9ZnVuY3Rpb24odCxlKXt2YXIgaT10aGlzLl9kcmFnUG9pbnRlck1vdmUodCxlKTt0aGlzLmRpc3BhdGNoRXZlbnQoXCJwb2ludGVyTW92ZVwiLHQsW2UsaV0pO3RoaXMuX2RyYWdNb3ZlKHQsZSxpKX07cy5kcmFnTW92ZT1mdW5jdGlvbih0LGUsaSl7aWYoIXRoaXMuaXNEcmFnZ2FibGUpe3JldHVybn10LnByZXZlbnREZWZhdWx0KCk7dGhpcy5wcmV2aW91c0RyYWdYPXRoaXMuZHJhZ1g7dmFyIG49dGhpcy5vcHRpb25zLnJpZ2h0VG9MZWZ0Py0xOjE7aWYodGhpcy5vcHRpb25zLndyYXBBcm91bmQpe2kueCU9dGhpcy5zbGlkZWFibGVXaWR0aH12YXIgcz10aGlzLmRyYWdTdGFydFBvc2l0aW9uK2kueCpuO2lmKCF0aGlzLm9wdGlvbnMud3JhcEFyb3VuZCYmdGhpcy5zbGlkZXMubGVuZ3RoKXt2YXIgcj1NYXRoLm1heCgtdGhpcy5zbGlkZXNbMF0udGFyZ2V0LHRoaXMuZHJhZ1N0YXJ0UG9zaXRpb24pO3M9cz5yPyhzK3IpKi41OnM7dmFyIG89TWF0aC5taW4oLXRoaXMuZ2V0TGFzdFNsaWRlKCkudGFyZ2V0LHRoaXMuZHJhZ1N0YXJ0UG9zaXRpb24pO3M9czxvPyhzK28pKi41OnN9dGhpcy5kcmFnWD1zO3RoaXMuZHJhZ01vdmVUaW1lPW5ldyBEYXRlO3RoaXMuZGlzcGF0Y2hFdmVudChcImRyYWdNb3ZlXCIsdCxbZSxpXSl9O3MuZHJhZ0VuZD1mdW5jdGlvbih0LGUpe2lmKCF0aGlzLmlzRHJhZ2dhYmxlKXtyZXR1cm59aWYodGhpcy5vcHRpb25zLmZyZWVTY3JvbGwpe3RoaXMuaXNGcmVlU2Nyb2xsaW5nPXRydWV9dmFyIGk9dGhpcy5kcmFnRW5kUmVzdGluZ1NlbGVjdCgpO2lmKHRoaXMub3B0aW9ucy5mcmVlU2Nyb2xsJiYhdGhpcy5vcHRpb25zLndyYXBBcm91bmQpe3ZhciBuPXRoaXMuZ2V0UmVzdGluZ1Bvc2l0aW9uKCk7dGhpcy5pc0ZyZWVTY3JvbGxpbmc9LW4+dGhpcy5zbGlkZXNbMF0udGFyZ2V0JiYtbjx0aGlzLmdldExhc3RTbGlkZSgpLnRhcmdldH1lbHNlIGlmKCF0aGlzLm9wdGlvbnMuZnJlZVNjcm9sbCYmaT09dGhpcy5zZWxlY3RlZEluZGV4KXtpKz10aGlzLmRyYWdFbmRCb29zdFNlbGVjdCgpfWRlbGV0ZSB0aGlzLnByZXZpb3VzRHJhZ1g7dGhpcy5pc0RyYWdTZWxlY3Q9dGhpcy5vcHRpb25zLndyYXBBcm91bmQ7dGhpcy5zZWxlY3QoaSk7ZGVsZXRlIHRoaXMuaXNEcmFnU2VsZWN0O3RoaXMuZGlzcGF0Y2hFdmVudChcImRyYWdFbmRcIix0LFtlXSl9O3MuZHJhZ0VuZFJlc3RpbmdTZWxlY3Q9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLmdldFJlc3RpbmdQb3NpdGlvbigpO3ZhciBlPU1hdGguYWJzKHRoaXMuZ2V0U2xpZGVEaXN0YW5jZSgtdCx0aGlzLnNlbGVjdGVkSW5kZXgpKTt2YXIgaT10aGlzLl9nZXRDbG9zZXN0UmVzdGluZyh0LGUsMSk7dmFyIG49dGhpcy5fZ2V0Q2xvc2VzdFJlc3RpbmcodCxlLC0xKTt2YXIgcz1pLmRpc3RhbmNlPG4uZGlzdGFuY2U/aS5pbmRleDpuLmluZGV4O3JldHVybiBzfTtzLl9nZXRDbG9zZXN0UmVzdGluZz1mdW5jdGlvbih0LGUsaSl7dmFyIG49dGhpcy5zZWxlY3RlZEluZGV4O3ZhciBzPUluZmluaXR5O3ZhciByPXRoaXMub3B0aW9ucy5jb250YWluJiYhdGhpcy5vcHRpb25zLndyYXBBcm91bmQ/ZnVuY3Rpb24odCxlKXtyZXR1cm4gdDw9ZX06ZnVuY3Rpb24odCxlKXtyZXR1cm4gdDxlfTt3aGlsZShyKGUscykpe24rPWk7cz1lO2U9dGhpcy5nZXRTbGlkZURpc3RhbmNlKC10LG4pO2lmKGU9PT1udWxsKXticmVha31lPU1hdGguYWJzKGUpfXJldHVybntkaXN0YW5jZTpzLGluZGV4Om4taX19O3MuZ2V0U2xpZGVEaXN0YW5jZT1mdW5jdGlvbih0LGUpe3ZhciBpPXRoaXMuc2xpZGVzLmxlbmd0aDt2YXIgbj10aGlzLm9wdGlvbnMud3JhcEFyb3VuZCYmaT4xO3ZhciBzPW4/YS5tb2R1bG8oZSxpKTplO3ZhciByPXRoaXMuc2xpZGVzW3NdO2lmKCFyKXtyZXR1cm4gbnVsbH12YXIgbz1uP3RoaXMuc2xpZGVhYmxlV2lkdGgqTWF0aC5mbG9vcihlL2kpOjA7cmV0dXJuIHQtKHIudGFyZ2V0K28pfTtzLmRyYWdFbmRCb29zdFNlbGVjdD1mdW5jdGlvbigpe2lmKHRoaXMucHJldmlvdXNEcmFnWD09PXVuZGVmaW5lZHx8IXRoaXMuZHJhZ01vdmVUaW1lfHxuZXcgRGF0ZS10aGlzLmRyYWdNb3ZlVGltZT4xMDApe3JldHVybiAwfXZhciB0PXRoaXMuZ2V0U2xpZGVEaXN0YW5jZSgtdGhpcy5kcmFnWCx0aGlzLnNlbGVjdGVkSW5kZXgpO3ZhciBlPXRoaXMucHJldmlvdXNEcmFnWC10aGlzLmRyYWdYO2lmKHQ+MCYmZT4wKXtyZXR1cm4gMX1lbHNlIGlmKHQ8MCYmZTwwKXtyZXR1cm4tMX1yZXR1cm4gMH07cy5zdGF0aWNDbGljaz1mdW5jdGlvbih0LGUpe3ZhciBpPXRoaXMuZ2V0UGFyZW50Q2VsbCh0LnRhcmdldCk7dmFyIG49aSYmaS5lbGVtZW50O3ZhciBzPWkmJnRoaXMuY2VsbHMuaW5kZXhPZihpKTt0aGlzLmRpc3BhdGNoRXZlbnQoXCJzdGF0aWNDbGlja1wiLHQsW2UsbixzXSl9O3Mub25zY3JvbGw9ZnVuY3Rpb24oKXt2YXIgdD1vKCk7dmFyIGU9dGhpcy5wb2ludGVyRG93blNjcm9sbC54LXQueDt2YXIgaT10aGlzLnBvaW50ZXJEb3duU2Nyb2xsLnktdC55O2lmKE1hdGguYWJzKGUpPjN8fE1hdGguYWJzKGkpPjMpe3RoaXMuX3BvaW50ZXJEb25lKCl9fTtmdW5jdGlvbiBvKCl7cmV0dXJue3g6bi5wYWdlWE9mZnNldCx5Om4ucGFnZVlPZmZzZXR9fXJldHVybiBlfSk7KGZ1bmN0aW9uKG4scyl7aWYodHlwZW9mIGRlZmluZT09XCJmdW5jdGlvblwiJiZkZWZpbmUuYW1kKXtkZWZpbmUoXCJmbGlja2l0eS9qcy9wcmV2LW5leHQtYnV0dG9uXCIsW1wiLi9mbGlja2l0eVwiLFwidW5pcG9pbnRlci91bmlwb2ludGVyXCIsXCJmaXp6eS11aS11dGlscy91dGlsc1wiXSxmdW5jdGlvbih0LGUsaSl7cmV0dXJuIHMobix0LGUsaSl9KX1lbHNlIGlmKHR5cGVvZiBtb2R1bGU9PVwib2JqZWN0XCImJm1vZHVsZS5leHBvcnRzKXttb2R1bGUuZXhwb3J0cz1zKG4scmVxdWlyZShcIi4vZmxpY2tpdHlcIikscmVxdWlyZShcInVuaXBvaW50ZXJcIikscmVxdWlyZShcImZpenp5LXVpLXV0aWxzXCIpKX1lbHNle3MobixuLkZsaWNraXR5LG4uVW5pcG9pbnRlcixuLmZpenp5VUlVdGlscyl9fSkod2luZG93LGZ1bmN0aW9uIHQoZSxpLG4scyl7XCJ1c2Ugc3RyaWN0XCI7dmFyIHI9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiO2Z1bmN0aW9uIG8odCxlKXt0aGlzLmRpcmVjdGlvbj10O3RoaXMucGFyZW50PWU7dGhpcy5fY3JlYXRlKCl9by5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShuLnByb3RvdHlwZSk7by5wcm90b3R5cGUuX2NyZWF0ZT1mdW5jdGlvbigpe3RoaXMuaXNFbmFibGVkPXRydWU7dGhpcy5pc1ByZXZpb3VzPXRoaXMuZGlyZWN0aW9uPT0tMTt2YXIgdD10aGlzLnBhcmVudC5vcHRpb25zLnJpZ2h0VG9MZWZ0PzE6LTE7dGhpcy5pc0xlZnQ9dGhpcy5kaXJlY3Rpb249PXQ7dmFyIGU9dGhpcy5lbGVtZW50PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7ZS5jbGFzc05hbWU9XCJmbGlja2l0eS1idXR0b24gZmxpY2tpdHktcHJldi1uZXh0LWJ1dHRvblwiO2UuY2xhc3NOYW1lKz10aGlzLmlzUHJldmlvdXM/XCIgcHJldmlvdXNcIjpcIiBuZXh0XCI7ZS5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsXCJidXR0b25cIik7dGhpcy5kaXNhYmxlKCk7ZS5zZXRBdHRyaWJ1dGUoXCJhcmlhLWxhYmVsXCIsdGhpcy5pc1ByZXZpb3VzP1wiUHJldmlvdXNcIjpcIk5leHRcIik7dmFyIGk9dGhpcy5jcmVhdGVTVkcoKTtlLmFwcGVuZENoaWxkKGkpO3RoaXMucGFyZW50Lm9uKFwic2VsZWN0XCIsdGhpcy51cGRhdGUuYmluZCh0aGlzKSk7dGhpcy5vbihcInBvaW50ZXJEb3duXCIsdGhpcy5wYXJlbnQuY2hpbGRVSVBvaW50ZXJEb3duLmJpbmQodGhpcy5wYXJlbnQpKX07by5wcm90b3R5cGUuYWN0aXZhdGU9ZnVuY3Rpb24oKXt0aGlzLmJpbmRTdGFydEV2ZW50KHRoaXMuZWxlbWVudCk7dGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLHRoaXMpO3RoaXMucGFyZW50LmVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5lbGVtZW50KX07by5wcm90b3R5cGUuZGVhY3RpdmF0ZT1mdW5jdGlvbigpe3RoaXMucGFyZW50LmVsZW1lbnQucmVtb3ZlQ2hpbGQodGhpcy5lbGVtZW50KTt0aGlzLnVuYmluZFN0YXJ0RXZlbnQodGhpcy5lbGVtZW50KTt0aGlzLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsdGhpcyl9O28ucHJvdG90eXBlLmNyZWF0ZVNWRz1mdW5jdGlvbigpe3ZhciB0PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhyLFwic3ZnXCIpO3Quc2V0QXR0cmlidXRlKFwiY2xhc3NcIixcImZsaWNraXR5LWJ1dHRvbi1pY29uXCIpO3Quc2V0QXR0cmlidXRlKFwidmlld0JveFwiLFwiMCAwIDEwMCAxMDBcIik7dmFyIGU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKHIsXCJwYXRoXCIpO3ZhciBpPWEodGhpcy5wYXJlbnQub3B0aW9ucy5hcnJvd1NoYXBlKTtlLnNldEF0dHJpYnV0ZShcImRcIixpKTtlLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsXCJhcnJvd1wiKTtpZighdGhpcy5pc0xlZnQpe2Uuc2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIsXCJ0cmFuc2xhdGUoMTAwLCAxMDApIHJvdGF0ZSgxODApIFwiKX10LmFwcGVuZENoaWxkKGUpO3JldHVybiB0fTtmdW5jdGlvbiBhKHQpe2lmKHR5cGVvZiB0PT1cInN0cmluZ1wiKXtyZXR1cm4gdH1yZXR1cm5cIk0gXCIrdC54MCtcIiw1MFwiK1wiIEwgXCIrdC54MStcIixcIisodC55MSs1MCkrXCIgTCBcIit0LngyK1wiLFwiKyh0LnkyKzUwKStcIiBMIFwiK3QueDMrXCIsNTAgXCIrXCIgTCBcIit0LngyK1wiLFwiKyg1MC10LnkyKStcIiBMIFwiK3QueDErXCIsXCIrKDUwLXQueTEpK1wiIFpcIn1vLnByb3RvdHlwZS5oYW5kbGVFdmVudD1zLmhhbmRsZUV2ZW50O28ucHJvdG90eXBlLm9uY2xpY2s9ZnVuY3Rpb24oKXtpZighdGhpcy5pc0VuYWJsZWQpe3JldHVybn10aGlzLnBhcmVudC51aUNoYW5nZSgpO3ZhciB0PXRoaXMuaXNQcmV2aW91cz9cInByZXZpb3VzXCI6XCJuZXh0XCI7dGhpcy5wYXJlbnRbdF0oKX07by5wcm90b3R5cGUuZW5hYmxlPWZ1bmN0aW9uKCl7aWYodGhpcy5pc0VuYWJsZWQpe3JldHVybn10aGlzLmVsZW1lbnQuZGlzYWJsZWQ9ZmFsc2U7dGhpcy5pc0VuYWJsZWQ9dHJ1ZX07by5wcm90b3R5cGUuZGlzYWJsZT1mdW5jdGlvbigpe2lmKCF0aGlzLmlzRW5hYmxlZCl7cmV0dXJufXRoaXMuZWxlbWVudC5kaXNhYmxlZD10cnVlO3RoaXMuaXNFbmFibGVkPWZhbHNlfTtvLnByb3RvdHlwZS51cGRhdGU9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLnBhcmVudC5zbGlkZXM7aWYodGhpcy5wYXJlbnQub3B0aW9ucy53cmFwQXJvdW5kJiZ0Lmxlbmd0aD4xKXt0aGlzLmVuYWJsZSgpO3JldHVybn12YXIgZT10Lmxlbmd0aD90Lmxlbmd0aC0xOjA7dmFyIGk9dGhpcy5pc1ByZXZpb3VzPzA6ZTt2YXIgbj10aGlzLnBhcmVudC5zZWxlY3RlZEluZGV4PT1pP1wiZGlzYWJsZVwiOlwiZW5hYmxlXCI7dGhpc1tuXSgpfTtvLnByb3RvdHlwZS5kZXN0cm95PWZ1bmN0aW9uKCl7dGhpcy5kZWFjdGl2YXRlKCk7dGhpcy5hbGxPZmYoKX07cy5leHRlbmQoaS5kZWZhdWx0cyx7cHJldk5leHRCdXR0b25zOnRydWUsYXJyb3dTaGFwZTp7eDA6MTAseDE6NjAseTE6NTAseDI6NzAseTI6NDAseDM6MzB9fSk7aS5jcmVhdGVNZXRob2RzLnB1c2goXCJfY3JlYXRlUHJldk5leHRCdXR0b25zXCIpO3ZhciBsPWkucHJvdG90eXBlO2wuX2NyZWF0ZVByZXZOZXh0QnV0dG9ucz1mdW5jdGlvbigpe2lmKCF0aGlzLm9wdGlvbnMucHJldk5leHRCdXR0b25zKXtyZXR1cm59dGhpcy5wcmV2QnV0dG9uPW5ldyBvKC0xLHRoaXMpO3RoaXMubmV4dEJ1dHRvbj1uZXcgbygxLHRoaXMpO3RoaXMub24oXCJhY3RpdmF0ZVwiLHRoaXMuYWN0aXZhdGVQcmV2TmV4dEJ1dHRvbnMpfTtsLmFjdGl2YXRlUHJldk5leHRCdXR0b25zPWZ1bmN0aW9uKCl7dGhpcy5wcmV2QnV0dG9uLmFjdGl2YXRlKCk7dGhpcy5uZXh0QnV0dG9uLmFjdGl2YXRlKCk7dGhpcy5vbihcImRlYWN0aXZhdGVcIix0aGlzLmRlYWN0aXZhdGVQcmV2TmV4dEJ1dHRvbnMpfTtsLmRlYWN0aXZhdGVQcmV2TmV4dEJ1dHRvbnM9ZnVuY3Rpb24oKXt0aGlzLnByZXZCdXR0b24uZGVhY3RpdmF0ZSgpO3RoaXMubmV4dEJ1dHRvbi5kZWFjdGl2YXRlKCk7dGhpcy5vZmYoXCJkZWFjdGl2YXRlXCIsdGhpcy5kZWFjdGl2YXRlUHJldk5leHRCdXR0b25zKX07aS5QcmV2TmV4dEJ1dHRvbj1vO3JldHVybiBpfSk7KGZ1bmN0aW9uKG4scyl7aWYodHlwZW9mIGRlZmluZT09XCJmdW5jdGlvblwiJiZkZWZpbmUuYW1kKXtkZWZpbmUoXCJmbGlja2l0eS9qcy9wYWdlLWRvdHNcIixbXCIuL2ZsaWNraXR5XCIsXCJ1bmlwb2ludGVyL3VuaXBvaW50ZXJcIixcImZpenp5LXVpLXV0aWxzL3V0aWxzXCJdLGZ1bmN0aW9uKHQsZSxpKXtyZXR1cm4gcyhuLHQsZSxpKX0pfWVsc2UgaWYodHlwZW9mIG1vZHVsZT09XCJvYmplY3RcIiYmbW9kdWxlLmV4cG9ydHMpe21vZHVsZS5leHBvcnRzPXMobixyZXF1aXJlKFwiLi9mbGlja2l0eVwiKSxyZXF1aXJlKFwidW5pcG9pbnRlclwiKSxyZXF1aXJlKFwiZml6enktdWktdXRpbHNcIikpfWVsc2V7cyhuLG4uRmxpY2tpdHksbi5Vbmlwb2ludGVyLG4uZml6enlVSVV0aWxzKX19KSh3aW5kb3csZnVuY3Rpb24gdChlLGksbixzKXtmdW5jdGlvbiByKHQpe3RoaXMucGFyZW50PXQ7dGhpcy5fY3JlYXRlKCl9ci5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShuLnByb3RvdHlwZSk7ci5wcm90b3R5cGUuX2NyZWF0ZT1mdW5jdGlvbigpe3RoaXMuaG9sZGVyPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJvbFwiKTt0aGlzLmhvbGRlci5jbGFzc05hbWU9XCJmbGlja2l0eS1wYWdlLWRvdHNcIjt0aGlzLmRvdHM9W107dGhpcy5oYW5kbGVDbGljaz10aGlzLm9uQ2xpY2suYmluZCh0aGlzKTt0aGlzLm9uKFwicG9pbnRlckRvd25cIix0aGlzLnBhcmVudC5jaGlsZFVJUG9pbnRlckRvd24uYmluZCh0aGlzLnBhcmVudCkpfTtyLnByb3RvdHlwZS5hY3RpdmF0ZT1mdW5jdGlvbigpe3RoaXMuc2V0RG90cygpO3RoaXMuaG9sZGVyLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLHRoaXMuaGFuZGxlQ2xpY2spO3RoaXMuYmluZFN0YXJ0RXZlbnQodGhpcy5ob2xkZXIpO3RoaXMucGFyZW50LmVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5ob2xkZXIpfTtyLnByb3RvdHlwZS5kZWFjdGl2YXRlPWZ1bmN0aW9uKCl7dGhpcy5ob2xkZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsdGhpcy5oYW5kbGVDbGljayk7dGhpcy51bmJpbmRTdGFydEV2ZW50KHRoaXMuaG9sZGVyKTt0aGlzLnBhcmVudC5lbGVtZW50LnJlbW92ZUNoaWxkKHRoaXMuaG9sZGVyKX07ci5wcm90b3R5cGUuc2V0RG90cz1mdW5jdGlvbigpe3ZhciB0PXRoaXMucGFyZW50LnNsaWRlcy5sZW5ndGgtdGhpcy5kb3RzLmxlbmd0aDtpZih0PjApe3RoaXMuYWRkRG90cyh0KX1lbHNlIGlmKHQ8MCl7dGhpcy5yZW1vdmVEb3RzKC10KX19O3IucHJvdG90eXBlLmFkZERvdHM9ZnVuY3Rpb24odCl7dmFyIGU9ZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO3ZhciBpPVtdO3ZhciBuPXRoaXMuZG90cy5sZW5ndGg7dmFyIHM9bit0O2Zvcih2YXIgcj1uO3I8cztyKyspe3ZhciBvPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaVwiKTtvLmNsYXNzTmFtZT1cImRvdFwiO28uc2V0QXR0cmlidXRlKFwiYXJpYS1sYWJlbFwiLFwiUGFnZSBkb3QgXCIrKHIrMSkpO2UuYXBwZW5kQ2hpbGQobyk7aS5wdXNoKG8pfXRoaXMuaG9sZGVyLmFwcGVuZENoaWxkKGUpO3RoaXMuZG90cz10aGlzLmRvdHMuY29uY2F0KGkpfTtyLnByb3RvdHlwZS5yZW1vdmVEb3RzPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuZG90cy5zcGxpY2UodGhpcy5kb3RzLmxlbmd0aC10LHQpO2UuZm9yRWFjaChmdW5jdGlvbih0KXt0aGlzLmhvbGRlci5yZW1vdmVDaGlsZCh0KX0sdGhpcyl9O3IucHJvdG90eXBlLnVwZGF0ZVNlbGVjdGVkPWZ1bmN0aW9uKCl7aWYodGhpcy5zZWxlY3RlZERvdCl7dGhpcy5zZWxlY3RlZERvdC5jbGFzc05hbWU9XCJkb3RcIjt0aGlzLnNlbGVjdGVkRG90LnJlbW92ZUF0dHJpYnV0ZShcImFyaWEtY3VycmVudFwiKX1pZighdGhpcy5kb3RzLmxlbmd0aCl7cmV0dXJufXRoaXMuc2VsZWN0ZWREb3Q9dGhpcy5kb3RzW3RoaXMucGFyZW50LnNlbGVjdGVkSW5kZXhdO3RoaXMuc2VsZWN0ZWREb3QuY2xhc3NOYW1lPVwiZG90IGlzLXNlbGVjdGVkXCI7dGhpcy5zZWxlY3RlZERvdC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWN1cnJlbnRcIixcInN0ZXBcIil9O3IucHJvdG90eXBlLm9uVGFwPXIucHJvdG90eXBlLm9uQ2xpY2s9ZnVuY3Rpb24odCl7dmFyIGU9dC50YXJnZXQ7aWYoZS5ub2RlTmFtZSE9XCJMSVwiKXtyZXR1cm59dGhpcy5wYXJlbnQudWlDaGFuZ2UoKTt2YXIgaT10aGlzLmRvdHMuaW5kZXhPZihlKTt0aGlzLnBhcmVudC5zZWxlY3QoaSl9O3IucHJvdG90eXBlLmRlc3Ryb3k9ZnVuY3Rpb24oKXt0aGlzLmRlYWN0aXZhdGUoKTt0aGlzLmFsbE9mZigpfTtpLlBhZ2VEb3RzPXI7cy5leHRlbmQoaS5kZWZhdWx0cyx7cGFnZURvdHM6dHJ1ZX0pO2kuY3JlYXRlTWV0aG9kcy5wdXNoKFwiX2NyZWF0ZVBhZ2VEb3RzXCIpO3ZhciBvPWkucHJvdG90eXBlO28uX2NyZWF0ZVBhZ2VEb3RzPWZ1bmN0aW9uKCl7aWYoIXRoaXMub3B0aW9ucy5wYWdlRG90cyl7cmV0dXJufXRoaXMucGFnZURvdHM9bmV3IHIodGhpcyk7dGhpcy5vbihcImFjdGl2YXRlXCIsdGhpcy5hY3RpdmF0ZVBhZ2VEb3RzKTt0aGlzLm9uKFwic2VsZWN0XCIsdGhpcy51cGRhdGVTZWxlY3RlZFBhZ2VEb3RzKTt0aGlzLm9uKFwiY2VsbENoYW5nZVwiLHRoaXMudXBkYXRlUGFnZURvdHMpO3RoaXMub24oXCJyZXNpemVcIix0aGlzLnVwZGF0ZVBhZ2VEb3RzKTt0aGlzLm9uKFwiZGVhY3RpdmF0ZVwiLHRoaXMuZGVhY3RpdmF0ZVBhZ2VEb3RzKX07by5hY3RpdmF0ZVBhZ2VEb3RzPWZ1bmN0aW9uKCl7dGhpcy5wYWdlRG90cy5hY3RpdmF0ZSgpfTtvLnVwZGF0ZVNlbGVjdGVkUGFnZURvdHM9ZnVuY3Rpb24oKXt0aGlzLnBhZ2VEb3RzLnVwZGF0ZVNlbGVjdGVkKCl9O28udXBkYXRlUGFnZURvdHM9ZnVuY3Rpb24oKXt0aGlzLnBhZ2VEb3RzLnNldERvdHMoKX07by5kZWFjdGl2YXRlUGFnZURvdHM9ZnVuY3Rpb24oKXt0aGlzLnBhZ2VEb3RzLmRlYWN0aXZhdGUoKX07aS5QYWdlRG90cz1yO3JldHVybiBpfSk7KGZ1bmN0aW9uKHQsbil7aWYodHlwZW9mIGRlZmluZT09XCJmdW5jdGlvblwiJiZkZWZpbmUuYW1kKXtkZWZpbmUoXCJmbGlja2l0eS9qcy9wbGF5ZXJcIixbXCJldi1lbWl0dGVyL2V2LWVtaXR0ZXJcIixcImZpenp5LXVpLXV0aWxzL3V0aWxzXCIsXCIuL2ZsaWNraXR5XCJdLGZ1bmN0aW9uKHQsZSxpKXtyZXR1cm4gbih0LGUsaSl9KX1lbHNlIGlmKHR5cGVvZiBtb2R1bGU9PVwib2JqZWN0XCImJm1vZHVsZS5leHBvcnRzKXttb2R1bGUuZXhwb3J0cz1uKHJlcXVpcmUoXCJldi1lbWl0dGVyXCIpLHJlcXVpcmUoXCJmaXp6eS11aS11dGlsc1wiKSxyZXF1aXJlKFwiLi9mbGlja2l0eVwiKSl9ZWxzZXtuKHQuRXZFbWl0dGVyLHQuZml6enlVSVV0aWxzLHQuRmxpY2tpdHkpfX0pKHdpbmRvdyxmdW5jdGlvbiB0KGUsaSxuKXtmdW5jdGlvbiBzKHQpe3RoaXMucGFyZW50PXQ7dGhpcy5zdGF0ZT1cInN0b3BwZWRcIjt0aGlzLm9uVmlzaWJpbGl0eUNoYW5nZT10aGlzLnZpc2liaWxpdHlDaGFuZ2UuYmluZCh0aGlzKTt0aGlzLm9uVmlzaWJpbGl0eVBsYXk9dGhpcy52aXNpYmlsaXR5UGxheS5iaW5kKHRoaXMpfXMucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoZS5wcm90b3R5cGUpO3MucHJvdG90eXBlLnBsYXk9ZnVuY3Rpb24oKXtpZih0aGlzLnN0YXRlPT1cInBsYXlpbmdcIil7cmV0dXJufXZhciB0PWRvY3VtZW50LmhpZGRlbjtpZih0KXtkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwidmlzaWJpbGl0eWNoYW5nZVwiLHRoaXMub25WaXNpYmlsaXR5UGxheSk7cmV0dXJufXRoaXMuc3RhdGU9XCJwbGF5aW5nXCI7ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInZpc2liaWxpdHljaGFuZ2VcIix0aGlzLm9uVmlzaWJpbGl0eUNoYW5nZSk7dGhpcy50aWNrKCl9O3MucHJvdG90eXBlLnRpY2s9ZnVuY3Rpb24oKXtpZih0aGlzLnN0YXRlIT1cInBsYXlpbmdcIil7cmV0dXJufXZhciB0PXRoaXMucGFyZW50Lm9wdGlvbnMuYXV0b1BsYXk7dD10eXBlb2YgdD09XCJudW1iZXJcIj90OjNlMzt2YXIgZT10aGlzO3RoaXMuY2xlYXIoKTt0aGlzLnRpbWVvdXQ9c2V0VGltZW91dChmdW5jdGlvbigpe2UucGFyZW50Lm5leHQodHJ1ZSk7ZS50aWNrKCl9LHQpfTtzLnByb3RvdHlwZS5zdG9wPWZ1bmN0aW9uKCl7dGhpcy5zdGF0ZT1cInN0b3BwZWRcIjt0aGlzLmNsZWFyKCk7ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInZpc2liaWxpdHljaGFuZ2VcIix0aGlzLm9uVmlzaWJpbGl0eUNoYW5nZSl9O3MucHJvdG90eXBlLmNsZWFyPWZ1bmN0aW9uKCl7Y2xlYXJUaW1lb3V0KHRoaXMudGltZW91dCl9O3MucHJvdG90eXBlLnBhdXNlPWZ1bmN0aW9uKCl7aWYodGhpcy5zdGF0ZT09XCJwbGF5aW5nXCIpe3RoaXMuc3RhdGU9XCJwYXVzZWRcIjt0aGlzLmNsZWFyKCl9fTtzLnByb3RvdHlwZS51bnBhdXNlPWZ1bmN0aW9uKCl7aWYodGhpcy5zdGF0ZT09XCJwYXVzZWRcIil7dGhpcy5wbGF5KCl9fTtzLnByb3RvdHlwZS52aXNpYmlsaXR5Q2hhbmdlPWZ1bmN0aW9uKCl7dmFyIHQ9ZG9jdW1lbnQuaGlkZGVuO3RoaXNbdD9cInBhdXNlXCI6XCJ1bnBhdXNlXCJdKCl9O3MucHJvdG90eXBlLnZpc2liaWxpdHlQbGF5PWZ1bmN0aW9uKCl7dGhpcy5wbGF5KCk7ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInZpc2liaWxpdHljaGFuZ2VcIix0aGlzLm9uVmlzaWJpbGl0eVBsYXkpfTtpLmV4dGVuZChuLmRlZmF1bHRzLHtwYXVzZUF1dG9QbGF5T25Ib3Zlcjp0cnVlfSk7bi5jcmVhdGVNZXRob2RzLnB1c2goXCJfY3JlYXRlUGxheWVyXCIpO3ZhciByPW4ucHJvdG90eXBlO3IuX2NyZWF0ZVBsYXllcj1mdW5jdGlvbigpe3RoaXMucGxheWVyPW5ldyBzKHRoaXMpO3RoaXMub24oXCJhY3RpdmF0ZVwiLHRoaXMuYWN0aXZhdGVQbGF5ZXIpO3RoaXMub24oXCJ1aUNoYW5nZVwiLHRoaXMuc3RvcFBsYXllcik7dGhpcy5vbihcInBvaW50ZXJEb3duXCIsdGhpcy5zdG9wUGxheWVyKTt0aGlzLm9uKFwiZGVhY3RpdmF0ZVwiLHRoaXMuZGVhY3RpdmF0ZVBsYXllcil9O3IuYWN0aXZhdGVQbGF5ZXI9ZnVuY3Rpb24oKXtpZighdGhpcy5vcHRpb25zLmF1dG9QbGF5KXtyZXR1cm59dGhpcy5wbGF5ZXIucGxheSgpO3RoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2VlbnRlclwiLHRoaXMpfTtyLnBsYXlQbGF5ZXI9ZnVuY3Rpb24oKXt0aGlzLnBsYXllci5wbGF5KCl9O3Iuc3RvcFBsYXllcj1mdW5jdGlvbigpe3RoaXMucGxheWVyLnN0b3AoKX07ci5wYXVzZVBsYXllcj1mdW5jdGlvbigpe3RoaXMucGxheWVyLnBhdXNlKCl9O3IudW5wYXVzZVBsYXllcj1mdW5jdGlvbigpe3RoaXMucGxheWVyLnVucGF1c2UoKX07ci5kZWFjdGl2YXRlUGxheWVyPWZ1bmN0aW9uKCl7dGhpcy5wbGF5ZXIuc3RvcCgpO3RoaXMuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2VlbnRlclwiLHRoaXMpfTtyLm9ubW91c2VlbnRlcj1mdW5jdGlvbigpe2lmKCF0aGlzLm9wdGlvbnMucGF1c2VBdXRvUGxheU9uSG92ZXIpe3JldHVybn10aGlzLnBsYXllci5wYXVzZSgpO3RoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2VsZWF2ZVwiLHRoaXMpfTtyLm9ubW91c2VsZWF2ZT1mdW5jdGlvbigpe3RoaXMucGxheWVyLnVucGF1c2UoKTt0aGlzLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlbGVhdmVcIix0aGlzKX07bi5QbGF5ZXI9cztyZXR1cm4gbn0pOyhmdW5jdGlvbihpLG4pe2lmKHR5cGVvZiBkZWZpbmU9PVwiZnVuY3Rpb25cIiYmZGVmaW5lLmFtZCl7ZGVmaW5lKFwiZmxpY2tpdHkvanMvYWRkLXJlbW92ZS1jZWxsXCIsW1wiLi9mbGlja2l0eVwiLFwiZml6enktdWktdXRpbHMvdXRpbHNcIl0sZnVuY3Rpb24odCxlKXtyZXR1cm4gbihpLHQsZSl9KX1lbHNlIGlmKHR5cGVvZiBtb2R1bGU9PVwib2JqZWN0XCImJm1vZHVsZS5leHBvcnRzKXttb2R1bGUuZXhwb3J0cz1uKGkscmVxdWlyZShcIi4vZmxpY2tpdHlcIikscmVxdWlyZShcImZpenp5LXVpLXV0aWxzXCIpKX1lbHNle24oaSxpLkZsaWNraXR5LGkuZml6enlVSVV0aWxzKX19KSh3aW5kb3csZnVuY3Rpb24gdChlLGksbil7ZnVuY3Rpb24gbCh0KXt2YXIgZT1kb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7dC5mb3JFYWNoKGZ1bmN0aW9uKHQpe2UuYXBwZW5kQ2hpbGQodC5lbGVtZW50KX0pO3JldHVybiBlfXZhciBzPWkucHJvdG90eXBlO3MuaW5zZXJ0PWZ1bmN0aW9uKHQsZSl7dmFyIGk9dGhpcy5fbWFrZUNlbGxzKHQpO2lmKCFpfHwhaS5sZW5ndGgpe3JldHVybn12YXIgbj10aGlzLmNlbGxzLmxlbmd0aDtlPWU9PT11bmRlZmluZWQ/bjplO3ZhciBzPWwoaSk7dmFyIHI9ZT09bjtpZihyKXt0aGlzLnNsaWRlci5hcHBlbmRDaGlsZChzKX1lbHNle3ZhciBvPXRoaXMuY2VsbHNbZV0uZWxlbWVudDt0aGlzLnNsaWRlci5pbnNlcnRCZWZvcmUocyxvKX1pZihlPT09MCl7dGhpcy5jZWxscz1pLmNvbmNhdCh0aGlzLmNlbGxzKX1lbHNlIGlmKHIpe3RoaXMuY2VsbHM9dGhpcy5jZWxscy5jb25jYXQoaSl9ZWxzZXt2YXIgYT10aGlzLmNlbGxzLnNwbGljZShlLG4tZSk7dGhpcy5jZWxscz10aGlzLmNlbGxzLmNvbmNhdChpKS5jb25jYXQoYSl9dGhpcy5fc2l6ZUNlbGxzKGkpO3RoaXMuY2VsbENoYW5nZShlLHRydWUpfTtzLmFwcGVuZD1mdW5jdGlvbih0KXt0aGlzLmluc2VydCh0LHRoaXMuY2VsbHMubGVuZ3RoKX07cy5wcmVwZW5kPWZ1bmN0aW9uKHQpe3RoaXMuaW5zZXJ0KHQsMCl9O3MucmVtb3ZlPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuZ2V0Q2VsbHModCk7aWYoIWV8fCFlLmxlbmd0aCl7cmV0dXJufXZhciBpPXRoaXMuY2VsbHMubGVuZ3RoLTE7ZS5mb3JFYWNoKGZ1bmN0aW9uKHQpe3QucmVtb3ZlKCk7dmFyIGU9dGhpcy5jZWxscy5pbmRleE9mKHQpO2k9TWF0aC5taW4oZSxpKTtuLnJlbW92ZUZyb20odGhpcy5jZWxscyx0KX0sdGhpcyk7dGhpcy5jZWxsQ2hhbmdlKGksdHJ1ZSl9O3MuY2VsbFNpemVDaGFuZ2U9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5nZXRDZWxsKHQpO2lmKCFlKXtyZXR1cm59ZS5nZXRTaXplKCk7dmFyIGk9dGhpcy5jZWxscy5pbmRleE9mKGUpO3RoaXMuY2VsbENoYW5nZShpKX07cy5jZWxsQ2hhbmdlPWZ1bmN0aW9uKHQsZSl7dmFyIGk9dGhpcy5zZWxlY3RlZEVsZW1lbnQ7dGhpcy5fcG9zaXRpb25DZWxscyh0KTt0aGlzLl9nZXRXcmFwU2hpZnRDZWxscygpO3RoaXMuc2V0R2FsbGVyeVNpemUoKTt2YXIgbj10aGlzLmdldENlbGwoaSk7aWYobil7dGhpcy5zZWxlY3RlZEluZGV4PXRoaXMuZ2V0Q2VsbFNsaWRlSW5kZXgobil9dGhpcy5zZWxlY3RlZEluZGV4PU1hdGgubWluKHRoaXMuc2xpZGVzLmxlbmd0aC0xLHRoaXMuc2VsZWN0ZWRJbmRleCk7dGhpcy5lbWl0RXZlbnQoXCJjZWxsQ2hhbmdlXCIsW3RdKTt0aGlzLnNlbGVjdCh0aGlzLnNlbGVjdGVkSW5kZXgpO2lmKGUpe3RoaXMucG9zaXRpb25TbGlkZXJBdFNlbGVjdGVkKCl9fTtyZXR1cm4gaX0pOyhmdW5jdGlvbihpLG4pe2lmKHR5cGVvZiBkZWZpbmU9PVwiZnVuY3Rpb25cIiYmZGVmaW5lLmFtZCl7ZGVmaW5lKFwiZmxpY2tpdHkvanMvbGF6eWxvYWRcIixbXCIuL2ZsaWNraXR5XCIsXCJmaXp6eS11aS11dGlscy91dGlsc1wiXSxmdW5jdGlvbih0LGUpe3JldHVybiBuKGksdCxlKX0pfWVsc2UgaWYodHlwZW9mIG1vZHVsZT09XCJvYmplY3RcIiYmbW9kdWxlLmV4cG9ydHMpe21vZHVsZS5leHBvcnRzPW4oaSxyZXF1aXJlKFwiLi9mbGlja2l0eVwiKSxyZXF1aXJlKFwiZml6enktdWktdXRpbHNcIikpfWVsc2V7bihpLGkuRmxpY2tpdHksaS5maXp6eVVJVXRpbHMpfX0pKHdpbmRvdyxmdW5jdGlvbiB0KGUsaSxvKXtcInVzZSBzdHJpY3RcIjtpLmNyZWF0ZU1ldGhvZHMucHVzaChcIl9jcmVhdGVMYXp5bG9hZFwiKTt2YXIgbj1pLnByb3RvdHlwZTtuLl9jcmVhdGVMYXp5bG9hZD1mdW5jdGlvbigpe3RoaXMub24oXCJzZWxlY3RcIix0aGlzLmxhenlMb2FkKX07bi5sYXp5TG9hZD1mdW5jdGlvbigpe3ZhciB0PXRoaXMub3B0aW9ucy5sYXp5TG9hZDtpZighdCl7cmV0dXJufXZhciBlPXR5cGVvZiB0PT1cIm51bWJlclwiP3Q6MDt2YXIgaT10aGlzLmdldEFkamFjZW50Q2VsbEVsZW1lbnRzKGUpO3ZhciBuPVtdO2kuZm9yRWFjaChmdW5jdGlvbih0KXt2YXIgZT1zKHQpO249bi5jb25jYXQoZSl9KTtuLmZvckVhY2goZnVuY3Rpb24odCl7bmV3IHIodCx0aGlzKX0sdGhpcyl9O2Z1bmN0aW9uIHModCl7aWYodC5ub2RlTmFtZT09XCJJTUdcIil7dmFyIGU9dC5nZXRBdHRyaWJ1dGUoXCJkYXRhLWZsaWNraXR5LWxhenlsb2FkXCIpO3ZhciBpPXQuZ2V0QXR0cmlidXRlKFwiZGF0YS1mbGlja2l0eS1sYXp5bG9hZC1zcmNcIik7dmFyIG49dC5nZXRBdHRyaWJ1dGUoXCJkYXRhLWZsaWNraXR5LWxhenlsb2FkLXNyY3NldFwiKTtpZihlfHxpfHxuKXtyZXR1cm5bdF19fXZhciBzPVwiaW1nW2RhdGEtZmxpY2tpdHktbGF6eWxvYWRdLCBcIitcImltZ1tkYXRhLWZsaWNraXR5LWxhenlsb2FkLXNyY10sIGltZ1tkYXRhLWZsaWNraXR5LWxhenlsb2FkLXNyY3NldF1cIjt2YXIgcj10LnF1ZXJ5U2VsZWN0b3JBbGwocyk7cmV0dXJuIG8ubWFrZUFycmF5KHIpfWZ1bmN0aW9uIHIodCxlKXt0aGlzLmltZz10O3RoaXMuZmxpY2tpdHk9ZTt0aGlzLmxvYWQoKX1yLnByb3RvdHlwZS5oYW5kbGVFdmVudD1vLmhhbmRsZUV2ZW50O3IucHJvdG90eXBlLmxvYWQ9ZnVuY3Rpb24oKXt0aGlzLmltZy5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLHRoaXMpO3RoaXMuaW1nLmFkZEV2ZW50TGlzdGVuZXIoXCJlcnJvclwiLHRoaXMpO3ZhciB0PXRoaXMuaW1nLmdldEF0dHJpYnV0ZShcImRhdGEtZmxpY2tpdHktbGF6eWxvYWRcIil8fHRoaXMuaW1nLmdldEF0dHJpYnV0ZShcImRhdGEtZmxpY2tpdHktbGF6eWxvYWQtc3JjXCIpO3ZhciBlPXRoaXMuaW1nLmdldEF0dHJpYnV0ZShcImRhdGEtZmxpY2tpdHktbGF6eWxvYWQtc3Jjc2V0XCIpO3RoaXMuaW1nLnNyYz10O2lmKGUpe3RoaXMuaW1nLnNldEF0dHJpYnV0ZShcInNyY3NldFwiLGUpfXRoaXMuaW1nLnJlbW92ZUF0dHJpYnV0ZShcImRhdGEtZmxpY2tpdHktbGF6eWxvYWRcIik7dGhpcy5pbWcucmVtb3ZlQXR0cmlidXRlKFwiZGF0YS1mbGlja2l0eS1sYXp5bG9hZC1zcmNcIik7dGhpcy5pbWcucmVtb3ZlQXR0cmlidXRlKFwiZGF0YS1mbGlja2l0eS1sYXp5bG9hZC1zcmNzZXRcIil9O3IucHJvdG90eXBlLm9ubG9hZD1mdW5jdGlvbih0KXt0aGlzLmNvbXBsZXRlKHQsXCJmbGlja2l0eS1sYXp5bG9hZGVkXCIpfTtyLnByb3RvdHlwZS5vbmVycm9yPWZ1bmN0aW9uKHQpe3RoaXMuY29tcGxldGUodCxcImZsaWNraXR5LWxhenllcnJvclwiKX07ci5wcm90b3R5cGUuY29tcGxldGU9ZnVuY3Rpb24odCxlKXt0aGlzLmltZy5yZW1vdmVFdmVudExpc3RlbmVyKFwibG9hZFwiLHRoaXMpO3RoaXMuaW1nLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJlcnJvclwiLHRoaXMpO3ZhciBpPXRoaXMuZmxpY2tpdHkuZ2V0UGFyZW50Q2VsbCh0aGlzLmltZyk7dmFyIG49aSYmaS5lbGVtZW50O3RoaXMuZmxpY2tpdHkuY2VsbFNpemVDaGFuZ2Uobik7dGhpcy5pbWcuY2xhc3NMaXN0LmFkZChlKTt0aGlzLmZsaWNraXR5LmRpc3BhdGNoRXZlbnQoXCJsYXp5TG9hZFwiLHQsbil9O2kuTGF6eUxvYWRlcj1yO3JldHVybiBpfSk7XG4vKiFcbiAqIEZsaWNraXR5IHYyLjMuMFxuICogVG91Y2gsIHJlc3BvbnNpdmUsIGZsaWNrYWJsZSBjYXJvdXNlbHNcbiAqXG4gKiBMaWNlbnNlZCBHUEx2MyBmb3Igb3BlbiBzb3VyY2UgdXNlXG4gKiBvciBGbGlja2l0eSBDb21tZXJjaWFsIExpY2Vuc2UgZm9yIGNvbW1lcmNpYWwgdXNlXG4gKlxuICogaHR0cHM6Ly9mbGlja2l0eS5tZXRhZml6enkuY29cbiAqIENvcHlyaWdodCAyMDE1LTIwMjEgTWV0YWZpenp5XG4gKi9cbihmdW5jdGlvbih0LGUpe2lmKHR5cGVvZiBkZWZpbmU9PVwiZnVuY3Rpb25cIiYmZGVmaW5lLmFtZCl7ZGVmaW5lKFwiZmxpY2tpdHkvanMvaW5kZXhcIixbXCIuL2ZsaWNraXR5XCIsXCIuL2RyYWdcIixcIi4vcHJldi1uZXh0LWJ1dHRvblwiLFwiLi9wYWdlLWRvdHNcIixcIi4vcGxheWVyXCIsXCIuL2FkZC1yZW1vdmUtY2VsbFwiLFwiLi9sYXp5bG9hZFwiXSxlKX1lbHNlIGlmKHR5cGVvZiBtb2R1bGU9PVwib2JqZWN0XCImJm1vZHVsZS5leHBvcnRzKXttb2R1bGUuZXhwb3J0cz1lKHJlcXVpcmUoXCIuL2ZsaWNraXR5XCIpLHJlcXVpcmUoXCIuL2RyYWdcIikscmVxdWlyZShcIi4vcHJldi1uZXh0LWJ1dHRvblwiKSxyZXF1aXJlKFwiLi9wYWdlLWRvdHNcIikscmVxdWlyZShcIi4vcGxheWVyXCIpLHJlcXVpcmUoXCIuL2FkZC1yZW1vdmUtY2VsbFwiKSxyZXF1aXJlKFwiLi9sYXp5bG9hZFwiKSl9fSkod2luZG93LGZ1bmN0aW9uIHQoZSl7cmV0dXJuIGV9KTtcbi8qIVxuICogRmxpY2tpdHkgYXNOYXZGb3IgdjIuMC4yXG4gKiBlbmFibGUgYXNOYXZGb3IgZm9yIEZsaWNraXR5XG4gKi9cbihmdW5jdGlvbih0LGUpe2lmKHR5cGVvZiBkZWZpbmU9PVwiZnVuY3Rpb25cIiYmZGVmaW5lLmFtZCl7ZGVmaW5lKFwiZmxpY2tpdHktYXMtbmF2LWZvci9hcy1uYXYtZm9yXCIsW1wiZmxpY2tpdHkvanMvaW5kZXhcIixcImZpenp5LXVpLXV0aWxzL3V0aWxzXCJdLGUpfWVsc2UgaWYodHlwZW9mIG1vZHVsZT09XCJvYmplY3RcIiYmbW9kdWxlLmV4cG9ydHMpe21vZHVsZS5leHBvcnRzPWUocmVxdWlyZShcImZsaWNraXR5XCIpLHJlcXVpcmUoXCJmaXp6eS11aS11dGlsc1wiKSl9ZWxzZXt0LkZsaWNraXR5PWUodC5GbGlja2l0eSx0LmZpenp5VUlVdGlscyl9fSkod2luZG93LGZ1bmN0aW9uIHQobixzKXtuLmNyZWF0ZU1ldGhvZHMucHVzaChcIl9jcmVhdGVBc05hdkZvclwiKTt2YXIgZT1uLnByb3RvdHlwZTtlLl9jcmVhdGVBc05hdkZvcj1mdW5jdGlvbigpe3RoaXMub24oXCJhY3RpdmF0ZVwiLHRoaXMuYWN0aXZhdGVBc05hdkZvcik7dGhpcy5vbihcImRlYWN0aXZhdGVcIix0aGlzLmRlYWN0aXZhdGVBc05hdkZvcik7dGhpcy5vbihcImRlc3Ryb3lcIix0aGlzLmRlc3Ryb3lBc05hdkZvcik7dmFyIGU9dGhpcy5vcHRpb25zLmFzTmF2Rm9yO2lmKCFlKXtyZXR1cm59dmFyIGk9dGhpcztzZXRUaW1lb3V0KGZ1bmN0aW9uIHQoKXtpLnNldE5hdkNvbXBhbmlvbihlKX0pfTtlLnNldE5hdkNvbXBhbmlvbj1mdW5jdGlvbih0KXt0PXMuZ2V0UXVlcnlFbGVtZW50KHQpO3ZhciBlPW4uZGF0YSh0KTtpZighZXx8ZT09dGhpcyl7cmV0dXJufXRoaXMubmF2Q29tcGFuaW9uPWU7dmFyIGk9dGhpczt0aGlzLm9uTmF2Q29tcGFuaW9uU2VsZWN0PWZ1bmN0aW9uKCl7aS5uYXZDb21wYW5pb25TZWxlY3QoKX07ZS5vbihcInNlbGVjdFwiLHRoaXMub25OYXZDb21wYW5pb25TZWxlY3QpO3RoaXMub24oXCJzdGF0aWNDbGlja1wiLHRoaXMub25OYXZTdGF0aWNDbGljayk7dGhpcy5uYXZDb21wYW5pb25TZWxlY3QodHJ1ZSl9O2UubmF2Q29tcGFuaW9uU2VsZWN0PWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMubmF2Q29tcGFuaW9uJiZ0aGlzLm5hdkNvbXBhbmlvbi5zZWxlY3RlZENlbGxzO2lmKCFlKXtyZXR1cm59dmFyIGk9ZVswXTt2YXIgbj10aGlzLm5hdkNvbXBhbmlvbi5jZWxscy5pbmRleE9mKGkpO3ZhciBzPW4rZS5sZW5ndGgtMTt2YXIgcj1NYXRoLmZsb29yKGEobixzLHRoaXMubmF2Q29tcGFuaW9uLmNlbGxBbGlnbikpO3RoaXMuc2VsZWN0Q2VsbChyLGZhbHNlLHQpO3RoaXMucmVtb3ZlTmF2U2VsZWN0ZWRFbGVtZW50cygpO2lmKHI+PXRoaXMuY2VsbHMubGVuZ3RoKXtyZXR1cm59dmFyIG89dGhpcy5jZWxscy5zbGljZShuLHMrMSk7dGhpcy5uYXZTZWxlY3RlZEVsZW1lbnRzPW8ubWFwKGZ1bmN0aW9uKHQpe3JldHVybiB0LmVsZW1lbnR9KTt0aGlzLmNoYW5nZU5hdlNlbGVjdGVkQ2xhc3MoXCJhZGRcIil9O2Z1bmN0aW9uIGEodCxlLGkpe3JldHVybihlLXQpKmkrdH1lLmNoYW5nZU5hdlNlbGVjdGVkQ2xhc3M9ZnVuY3Rpb24oZSl7dGhpcy5uYXZTZWxlY3RlZEVsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24odCl7dC5jbGFzc0xpc3RbZV0oXCJpcy1uYXYtc2VsZWN0ZWRcIil9KX07ZS5hY3RpdmF0ZUFzTmF2Rm9yPWZ1bmN0aW9uKCl7dGhpcy5uYXZDb21wYW5pb25TZWxlY3QodHJ1ZSl9O2UucmVtb3ZlTmF2U2VsZWN0ZWRFbGVtZW50cz1mdW5jdGlvbigpe2lmKCF0aGlzLm5hdlNlbGVjdGVkRWxlbWVudHMpe3JldHVybn10aGlzLmNoYW5nZU5hdlNlbGVjdGVkQ2xhc3MoXCJyZW1vdmVcIik7ZGVsZXRlIHRoaXMubmF2U2VsZWN0ZWRFbGVtZW50c307ZS5vbk5hdlN0YXRpY0NsaWNrPWZ1bmN0aW9uKHQsZSxpLG4pe2lmKHR5cGVvZiBuPT1cIm51bWJlclwiKXt0aGlzLm5hdkNvbXBhbmlvbi5zZWxlY3RDZWxsKG4pfX07ZS5kZWFjdGl2YXRlQXNOYXZGb3I9ZnVuY3Rpb24oKXt0aGlzLnJlbW92ZU5hdlNlbGVjdGVkRWxlbWVudHMoKX07ZS5kZXN0cm95QXNOYXZGb3I9ZnVuY3Rpb24oKXtpZighdGhpcy5uYXZDb21wYW5pb24pe3JldHVybn10aGlzLm5hdkNvbXBhbmlvbi5vZmYoXCJzZWxlY3RcIix0aGlzLm9uTmF2Q29tcGFuaW9uU2VsZWN0KTt0aGlzLm9mZihcInN0YXRpY0NsaWNrXCIsdGhpcy5vbk5hdlN0YXRpY0NsaWNrKTtkZWxldGUgdGhpcy5uYXZDb21wYW5pb259O3JldHVybiBufSk7XG4vKiFcbiAqIGltYWdlc0xvYWRlZCB2NC4xLjRcbiAqIEphdmFTY3JpcHQgaXMgYWxsIGxpa2UgXCJZb3UgaW1hZ2VzIGFyZSBkb25lIHlldCBvciB3aGF0P1wiXG4gKiBNSVQgTGljZW5zZVxuICovXG4oZnVuY3Rpb24oZSxpKXtcInVzZSBzdHJpY3RcIjtpZih0eXBlb2YgZGVmaW5lPT1cImZ1bmN0aW9uXCImJmRlZmluZS5hbWQpe2RlZmluZShcImltYWdlc2xvYWRlZC9pbWFnZXNsb2FkZWRcIixbXCJldi1lbWl0dGVyL2V2LWVtaXR0ZXJcIl0sZnVuY3Rpb24odCl7cmV0dXJuIGkoZSx0KX0pfWVsc2UgaWYodHlwZW9mIG1vZHVsZT09XCJvYmplY3RcIiYmbW9kdWxlLmV4cG9ydHMpe21vZHVsZS5leHBvcnRzPWkoZSxyZXF1aXJlKFwiZXYtZW1pdHRlclwiKSl9ZWxzZXtlLmltYWdlc0xvYWRlZD1pKGUsZS5FdkVtaXR0ZXIpfX0pKHR5cGVvZiB3aW5kb3chPT1cInVuZGVmaW5lZFwiP3dpbmRvdzp0aGlzLGZ1bmN0aW9uIHQoZSxpKXt2YXIgcz1lLmpRdWVyeTt2YXIgcj1lLmNvbnNvbGU7ZnVuY3Rpb24gbyh0LGUpe2Zvcih2YXIgaSBpbiBlKXt0W2ldPWVbaV19cmV0dXJuIHR9dmFyIG49QXJyYXkucHJvdG90eXBlLnNsaWNlO2Z1bmN0aW9uIGEodCl7aWYoQXJyYXkuaXNBcnJheSh0KSl7cmV0dXJuIHR9dmFyIGU9dHlwZW9mIHQ9PVwib2JqZWN0XCImJnR5cGVvZiB0Lmxlbmd0aD09XCJudW1iZXJcIjtpZihlKXtyZXR1cm4gbi5jYWxsKHQpfXJldHVyblt0XX1mdW5jdGlvbiBsKHQsZSxpKXtpZighKHRoaXMgaW5zdGFuY2VvZiBsKSl7cmV0dXJuIG5ldyBsKHQsZSxpKX12YXIgbj10O2lmKHR5cGVvZiB0PT1cInN0cmluZ1wiKXtuPWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodCl9aWYoIW4pe3IuZXJyb3IoXCJCYWQgZWxlbWVudCBmb3IgaW1hZ2VzTG9hZGVkIFwiKyhufHx0KSk7cmV0dXJufXRoaXMuZWxlbWVudHM9YShuKTt0aGlzLm9wdGlvbnM9byh7fSx0aGlzLm9wdGlvbnMpO2lmKHR5cGVvZiBlPT1cImZ1bmN0aW9uXCIpe2k9ZX1lbHNle28odGhpcy5vcHRpb25zLGUpfWlmKGkpe3RoaXMub24oXCJhbHdheXNcIixpKX10aGlzLmdldEltYWdlcygpO2lmKHMpe3RoaXMuanFEZWZlcnJlZD1uZXcgcy5EZWZlcnJlZH1zZXRUaW1lb3V0KHRoaXMuY2hlY2suYmluZCh0aGlzKSl9bC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShpLnByb3RvdHlwZSk7bC5wcm90b3R5cGUub3B0aW9ucz17fTtsLnByb3RvdHlwZS5nZXRJbWFnZXM9ZnVuY3Rpb24oKXt0aGlzLmltYWdlcz1bXTt0aGlzLmVsZW1lbnRzLmZvckVhY2godGhpcy5hZGRFbGVtZW50SW1hZ2VzLHRoaXMpfTtsLnByb3RvdHlwZS5hZGRFbGVtZW50SW1hZ2VzPWZ1bmN0aW9uKHQpe2lmKHQubm9kZU5hbWU9PVwiSU1HXCIpe3RoaXMuYWRkSW1hZ2UodCl9aWYodGhpcy5vcHRpb25zLmJhY2tncm91bmQ9PT10cnVlKXt0aGlzLmFkZEVsZW1lbnRCYWNrZ3JvdW5kSW1hZ2VzKHQpfXZhciBlPXQubm9kZVR5cGU7aWYoIWV8fCFoW2VdKXtyZXR1cm59dmFyIGk9dC5xdWVyeVNlbGVjdG9yQWxsKFwiaW1nXCIpO2Zvcih2YXIgbj0wO248aS5sZW5ndGg7bisrKXt2YXIgcz1pW25dO3RoaXMuYWRkSW1hZ2Uocyl9aWYodHlwZW9mIHRoaXMub3B0aW9ucy5iYWNrZ3JvdW5kPT1cInN0cmluZ1wiKXt2YXIgcj10LnF1ZXJ5U2VsZWN0b3JBbGwodGhpcy5vcHRpb25zLmJhY2tncm91bmQpO2ZvcihuPTA7bjxyLmxlbmd0aDtuKyspe3ZhciBvPXJbbl07dGhpcy5hZGRFbGVtZW50QmFja2dyb3VuZEltYWdlcyhvKX19fTt2YXIgaD17MTp0cnVlLDk6dHJ1ZSwxMTp0cnVlfTtsLnByb3RvdHlwZS5hZGRFbGVtZW50QmFja2dyb3VuZEltYWdlcz1mdW5jdGlvbih0KXt2YXIgZT1nZXRDb21wdXRlZFN0eWxlKHQpO2lmKCFlKXtyZXR1cm59dmFyIGk9L3VybFxcKChbJ1wiXSk/KC4qPylcXDFcXCkvZ2k7dmFyIG49aS5leGVjKGUuYmFja2dyb3VuZEltYWdlKTt3aGlsZShuIT09bnVsbCl7dmFyIHM9biYmblsyXTtpZihzKXt0aGlzLmFkZEJhY2tncm91bmQocyx0KX1uPWkuZXhlYyhlLmJhY2tncm91bmRJbWFnZSl9fTtsLnByb3RvdHlwZS5hZGRJbWFnZT1mdW5jdGlvbih0KXt2YXIgZT1uZXcgYyh0KTt0aGlzLmltYWdlcy5wdXNoKGUpfTtsLnByb3RvdHlwZS5hZGRCYWNrZ3JvdW5kPWZ1bmN0aW9uKHQsZSl7dmFyIGk9bmV3IHUodCxlKTt0aGlzLmltYWdlcy5wdXNoKGkpfTtsLnByb3RvdHlwZS5jaGVjaz1mdW5jdGlvbigpe3ZhciBuPXRoaXM7dGhpcy5wcm9ncmVzc2VkQ291bnQ9MDt0aGlzLmhhc0FueUJyb2tlbj1mYWxzZTtpZighdGhpcy5pbWFnZXMubGVuZ3RoKXt0aGlzLmNvbXBsZXRlKCk7cmV0dXJufWZ1bmN0aW9uIGUodCxlLGkpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXtuLnByb2dyZXNzKHQsZSxpKX0pfXRoaXMuaW1hZ2VzLmZvckVhY2goZnVuY3Rpb24odCl7dC5vbmNlKFwicHJvZ3Jlc3NcIixlKTt0LmNoZWNrKCl9KX07bC5wcm90b3R5cGUucHJvZ3Jlc3M9ZnVuY3Rpb24odCxlLGkpe3RoaXMucHJvZ3Jlc3NlZENvdW50Kys7dGhpcy5oYXNBbnlCcm9rZW49dGhpcy5oYXNBbnlCcm9rZW58fCF0LmlzTG9hZGVkO3RoaXMuZW1pdEV2ZW50KFwicHJvZ3Jlc3NcIixbdGhpcyx0LGVdKTtpZih0aGlzLmpxRGVmZXJyZWQmJnRoaXMuanFEZWZlcnJlZC5ub3RpZnkpe3RoaXMuanFEZWZlcnJlZC5ub3RpZnkodGhpcyx0KX1pZih0aGlzLnByb2dyZXNzZWRDb3VudD09dGhpcy5pbWFnZXMubGVuZ3RoKXt0aGlzLmNvbXBsZXRlKCl9aWYodGhpcy5vcHRpb25zLmRlYnVnJiZyKXtyLmxvZyhcInByb2dyZXNzOiBcIitpLHQsZSl9fTtsLnByb3RvdHlwZS5jb21wbGV0ZT1mdW5jdGlvbigpe3ZhciB0PXRoaXMuaGFzQW55QnJva2VuP1wiZmFpbFwiOlwiZG9uZVwiO3RoaXMuaXNDb21wbGV0ZT10cnVlO3RoaXMuZW1pdEV2ZW50KHQsW3RoaXNdKTt0aGlzLmVtaXRFdmVudChcImFsd2F5c1wiLFt0aGlzXSk7aWYodGhpcy5qcURlZmVycmVkKXt2YXIgZT10aGlzLmhhc0FueUJyb2tlbj9cInJlamVjdFwiOlwicmVzb2x2ZVwiO3RoaXMuanFEZWZlcnJlZFtlXSh0aGlzKX19O2Z1bmN0aW9uIGModCl7dGhpcy5pbWc9dH1jLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGkucHJvdG90eXBlKTtjLnByb3RvdHlwZS5jaGVjaz1mdW5jdGlvbigpe3ZhciB0PXRoaXMuZ2V0SXNJbWFnZUNvbXBsZXRlKCk7aWYodCl7dGhpcy5jb25maXJtKHRoaXMuaW1nLm5hdHVyYWxXaWR0aCE9PTAsXCJuYXR1cmFsV2lkdGhcIik7cmV0dXJufXRoaXMucHJveHlJbWFnZT1uZXcgSW1hZ2U7dGhpcy5wcm94eUltYWdlLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsdGhpcyk7dGhpcy5wcm94eUltYWdlLmFkZEV2ZW50TGlzdGVuZXIoXCJlcnJvclwiLHRoaXMpO3RoaXMuaW1nLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsdGhpcyk7dGhpcy5pbWcuYWRkRXZlbnRMaXN0ZW5lcihcImVycm9yXCIsdGhpcyk7dGhpcy5wcm94eUltYWdlLnNyYz10aGlzLmltZy5zcmN9O2MucHJvdG90eXBlLmdldElzSW1hZ2VDb21wbGV0ZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmltZy5jb21wbGV0ZSYmdGhpcy5pbWcubmF0dXJhbFdpZHRofTtjLnByb3RvdHlwZS5jb25maXJtPWZ1bmN0aW9uKHQsZSl7dGhpcy5pc0xvYWRlZD10O3RoaXMuZW1pdEV2ZW50KFwicHJvZ3Jlc3NcIixbdGhpcyx0aGlzLmltZyxlXSl9O2MucHJvdG90eXBlLmhhbmRsZUV2ZW50PWZ1bmN0aW9uKHQpe3ZhciBlPVwib25cIit0LnR5cGU7aWYodGhpc1tlXSl7dGhpc1tlXSh0KX19O2MucHJvdG90eXBlLm9ubG9hZD1mdW5jdGlvbigpe3RoaXMuY29uZmlybSh0cnVlLFwib25sb2FkXCIpO3RoaXMudW5iaW5kRXZlbnRzKCl9O2MucHJvdG90eXBlLm9uZXJyb3I9ZnVuY3Rpb24oKXt0aGlzLmNvbmZpcm0oZmFsc2UsXCJvbmVycm9yXCIpO3RoaXMudW5iaW5kRXZlbnRzKCl9O2MucHJvdG90eXBlLnVuYmluZEV2ZW50cz1mdW5jdGlvbigpe3RoaXMucHJveHlJbWFnZS5yZW1vdmVFdmVudExpc3RlbmVyKFwibG9hZFwiLHRoaXMpO3RoaXMucHJveHlJbWFnZS5yZW1vdmVFdmVudExpc3RlbmVyKFwiZXJyb3JcIix0aGlzKTt0aGlzLmltZy5yZW1vdmVFdmVudExpc3RlbmVyKFwibG9hZFwiLHRoaXMpO3RoaXMuaW1nLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJlcnJvclwiLHRoaXMpfTtmdW5jdGlvbiB1KHQsZSl7dGhpcy51cmw9dDt0aGlzLmVsZW1lbnQ9ZTt0aGlzLmltZz1uZXcgSW1hZ2V9dS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShjLnByb3RvdHlwZSk7dS5wcm90b3R5cGUuY2hlY2s9ZnVuY3Rpb24oKXt0aGlzLmltZy5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLHRoaXMpO3RoaXMuaW1nLmFkZEV2ZW50TGlzdGVuZXIoXCJlcnJvclwiLHRoaXMpO3RoaXMuaW1nLnNyYz10aGlzLnVybDt2YXIgdD10aGlzLmdldElzSW1hZ2VDb21wbGV0ZSgpO2lmKHQpe3RoaXMuY29uZmlybSh0aGlzLmltZy5uYXR1cmFsV2lkdGghPT0wLFwibmF0dXJhbFdpZHRoXCIpO3RoaXMudW5iaW5kRXZlbnRzKCl9fTt1LnByb3RvdHlwZS51bmJpbmRFdmVudHM9ZnVuY3Rpb24oKXt0aGlzLmltZy5yZW1vdmVFdmVudExpc3RlbmVyKFwibG9hZFwiLHRoaXMpO3RoaXMuaW1nLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJlcnJvclwiLHRoaXMpfTt1LnByb3RvdHlwZS5jb25maXJtPWZ1bmN0aW9uKHQsZSl7dGhpcy5pc0xvYWRlZD10O3RoaXMuZW1pdEV2ZW50KFwicHJvZ3Jlc3NcIixbdGhpcyx0aGlzLmVsZW1lbnQsZV0pfTtsLm1ha2VKUXVlcnlQbHVnaW49ZnVuY3Rpb24odCl7dD10fHxlLmpRdWVyeTtpZighdCl7cmV0dXJufXM9dDtzLmZuLmltYWdlc0xvYWRlZD1mdW5jdGlvbih0LGUpe3ZhciBpPW5ldyBsKHRoaXMsdCxlKTtyZXR1cm4gaS5qcURlZmVycmVkLnByb21pc2Uocyh0aGlzKSl9fTtsLm1ha2VKUXVlcnlQbHVnaW4oKTtyZXR1cm4gbH0pO1xuLyohXG4gKiBGbGlja2l0eSBpbWFnZXNMb2FkZWQgdjIuMC4wXG4gKiBlbmFibGVzIGltYWdlc0xvYWRlZCBvcHRpb24gZm9yIEZsaWNraXR5XG4gKi9cbihmdW5jdGlvbihpLG4pe2lmKHR5cGVvZiBkZWZpbmU9PVwiZnVuY3Rpb25cIiYmZGVmaW5lLmFtZCl7ZGVmaW5lKFtcImZsaWNraXR5L2pzL2luZGV4XCIsXCJpbWFnZXNsb2FkZWQvaW1hZ2VzbG9hZGVkXCJdLGZ1bmN0aW9uKHQsZSl7cmV0dXJuIG4oaSx0LGUpfSl9ZWxzZSBpZih0eXBlb2YgbW9kdWxlPT1cIm9iamVjdFwiJiZtb2R1bGUuZXhwb3J0cyl7bW9kdWxlLmV4cG9ydHM9bihpLHJlcXVpcmUoXCJmbGlja2l0eVwiKSxyZXF1aXJlKFwiaW1hZ2VzbG9hZGVkXCIpKX1lbHNle2kuRmxpY2tpdHk9bihpLGkuRmxpY2tpdHksaS5pbWFnZXNMb2FkZWQpfX0pKHdpbmRvdyxmdW5jdGlvbiB0KGUsaSxzKXtcInVzZSBzdHJpY3RcIjtpLmNyZWF0ZU1ldGhvZHMucHVzaChcIl9jcmVhdGVJbWFnZXNMb2FkZWRcIik7dmFyIG49aS5wcm90b3R5cGU7bi5fY3JlYXRlSW1hZ2VzTG9hZGVkPWZ1bmN0aW9uKCl7dGhpcy5vbihcImFjdGl2YXRlXCIsdGhpcy5pbWFnZXNMb2FkZWQpfTtuLmltYWdlc0xvYWRlZD1mdW5jdGlvbigpe2lmKCF0aGlzLm9wdGlvbnMuaW1hZ2VzTG9hZGVkKXtyZXR1cm59dmFyIG49dGhpcztmdW5jdGlvbiB0KHQsZSl7dmFyIGk9bi5nZXRQYXJlbnRDZWxsKGUuaW1nKTtuLmNlbGxTaXplQ2hhbmdlKGkmJmkuZWxlbWVudCk7aWYoIW4ub3B0aW9ucy5mcmVlU2Nyb2xsKXtuLnBvc2l0aW9uU2xpZGVyQXRTZWxlY3RlZCgpfX1zKHRoaXMuc2xpZGVyKS5vbihcInByb2dyZXNzXCIsdCl9O3JldHVybiBpfSk7IiwiZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgKCkgPT4ge1xuICAgIHZhciBmbGt0eU1haW4gPSBuZXcgRmxpY2tpdHkoJy5jYXJvdXNlbC1tYWluJywge1xuICAgICAgICB3cmFwQXJvdW5kOiB0cnVlLFxuICAgICAgICBjZWxsQWxpZ246ICdjZW50ZXInLFxuICAgICAgICBjb250YWluOiB0cnVlLFxuICAgICAgICBwYWdlRG90czogZmFsc2UsXG4gICAgICAgIGxhenlMb2FkOiB0cnVlLFxuICAgICAgICAvLyBpbWFnZXNMb2FkZWQ6IHRydWVcbiAgICB9KTtcblxuICAgIHZhciBmbGt0eU5hdiA9IG5ldyBGbGlja2l0eSgnLmNhcm91c2VsLW5hdicsIHtcbiAgICAgICAgYXNOYXZGb3I6ICcuY2Fyb3VzZWwtbWFpbicsXG4gICAgICAgIGNvbnRhaW46IHRydWUsXG4gICAgICAgIHBhZ2VEb3RzOiBmYWxzZSxcbiAgICAgICAgcHJldk5leHRCdXR0b25zOiBmYWxzZSxcbiAgICAgICAgbGF6eUxvYWQ6IHRydWUsXG4gICAgICAgIC8vIGltYWdlc0xvYWRlZDogdHJ1ZVxuICAgIH0pO1xuXG5cbiAgICBpZiAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2xpZ2h0Z2FsbGVyeScpKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiRmlyZWRcIilcbiAgICAgICAgbGlnaHRHYWxsZXJ5KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdsaWdodGdhbGxlcnknKSwge1xuICAgICAgICAgIHBsdWdpbnM6IFtcbiAgICAgICAgICAgIGxnWm9vbSxcbiAgICAgICAgICAgIC8vbGdUaHVtYm5haWwsXG4gICAgICAgICAgICBsZ1ZpZGVvLFxuICAgICAgICAgICAgbGdSb3RhdGUsXG4gICAgICAgICAgICAvL2xnU2hhcmVcbiAgICAgICAgICBdLFxuICAgICAgICAgIHNwZWVkOiA1MDAsXG4gICAgICAgICAgLy9saWNlbnNlS2V5OiAneW91cl9saWNlbnNlX2tleScsXG4gICAgICAgICAgdGh1bWJuYWlsOnRydWUsXG4gICAgICAgICAgYW5pbWF0ZVRodW1iOiBmYWxzZSxcbiAgICAgICAgICBzaG93VGh1bWJCeURlZmF1bHQ6IGZhbHNlLFxuICAgICAgICAgIGRvd25sb2FkOiBmYWxzZSxcbiAgICAgICAgICBzZWxlY3RvcjogJy5jYXJvdXNlbC1jZWxsJ1xuICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndmlkZW8tZ2FsbGVyeScpKXtcbiAgICAgIGxpZ2h0R2FsbGVyeShkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndmlkZW8tZ2FsbGVyeScpLCB7XG4gICAgICAgIHBsdWdpbnM6IFtsZ1ZpZGVvXSxcbiAgICAgIH0pXG4gICAgfVxuICB9KTsiXX0=
